
SteadyHandMain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006344  08006344  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006344  08006344  00016344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800634c  0800634c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800634c  0800634c  0001634c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006354  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  200000a8  080063fc  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  080063fc  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021372  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003839  00000000  00000000  00041442  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00044c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  00045cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019332  00000000  00000000  00046bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000faa1  00000000  00000000  0005ff2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000941ba  00000000  00000000  0006f9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103b85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  00103c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006134 	.word	0x08006134

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	08006134 	.word	0x08006134

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	464f      	mov	r7, r9
 8000448:	4646      	mov	r6, r8
 800044a:	46d6      	mov	lr, sl
 800044c:	b5c0      	push	{r6, r7, lr}
 800044e:	0004      	movs	r4, r0
 8000450:	b082      	sub	sp, #8
 8000452:	000d      	movs	r5, r1
 8000454:	4691      	mov	r9, r2
 8000456:	4698      	mov	r8, r3
 8000458:	428b      	cmp	r3, r1
 800045a:	d82f      	bhi.n	80004bc <__udivmoddi4+0x78>
 800045c:	d02c      	beq.n	80004b8 <__udivmoddi4+0x74>
 800045e:	4641      	mov	r1, r8
 8000460:	4648      	mov	r0, r9
 8000462:	f000 fecd 	bl	8001200 <__clzdi2>
 8000466:	0029      	movs	r1, r5
 8000468:	0006      	movs	r6, r0
 800046a:	0020      	movs	r0, r4
 800046c:	f000 fec8 	bl	8001200 <__clzdi2>
 8000470:	1a33      	subs	r3, r6, r0
 8000472:	469c      	mov	ip, r3
 8000474:	3b20      	subs	r3, #32
 8000476:	469a      	mov	sl, r3
 8000478:	d500      	bpl.n	800047c <__udivmoddi4+0x38>
 800047a:	e076      	b.n	800056a <__udivmoddi4+0x126>
 800047c:	464b      	mov	r3, r9
 800047e:	4652      	mov	r2, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	001f      	movs	r7, r3
 8000484:	464b      	mov	r3, r9
 8000486:	4662      	mov	r2, ip
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d828      	bhi.n	80004e2 <__udivmoddi4+0x9e>
 8000490:	d025      	beq.n	80004de <__udivmoddi4+0x9a>
 8000492:	4653      	mov	r3, sl
 8000494:	1ba4      	subs	r4, r4, r6
 8000496:	41bd      	sbcs	r5, r7
 8000498:	2b00      	cmp	r3, #0
 800049a:	da00      	bge.n	800049e <__udivmoddi4+0x5a>
 800049c:	e07b      	b.n	8000596 <__udivmoddi4+0x152>
 800049e:	2200      	movs	r2, #0
 80004a0:	2300      	movs	r3, #0
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	2301      	movs	r3, #1
 80004a8:	4652      	mov	r2, sl
 80004aa:	4093      	lsls	r3, r2
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	4662      	mov	r2, ip
 80004b2:	4093      	lsls	r3, r2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	e018      	b.n	80004ea <__udivmoddi4+0xa6>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	d9d0      	bls.n	800045e <__udivmoddi4+0x1a>
 80004bc:	2200      	movs	r2, #0
 80004be:	2300      	movs	r3, #0
 80004c0:	9200      	str	r2, [sp, #0]
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <__udivmoddi4+0x8a>
 80004ca:	601c      	str	r4, [r3, #0]
 80004cc:	605d      	str	r5, [r3, #4]
 80004ce:	9800      	ldr	r0, [sp, #0]
 80004d0:	9901      	ldr	r1, [sp, #4]
 80004d2:	b002      	add	sp, #8
 80004d4:	bc1c      	pop	{r2, r3, r4}
 80004d6:	4690      	mov	r8, r2
 80004d8:	4699      	mov	r9, r3
 80004da:	46a2      	mov	sl, r4
 80004dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d9d7      	bls.n	8000492 <__udivmoddi4+0x4e>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	4663      	mov	r3, ip
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d0e9      	beq.n	80004c4 <__udivmoddi4+0x80>
 80004f0:	07fb      	lsls	r3, r7, #31
 80004f2:	4698      	mov	r8, r3
 80004f4:	4641      	mov	r1, r8
 80004f6:	0872      	lsrs	r2, r6, #1
 80004f8:	430a      	orrs	r2, r1
 80004fa:	087b      	lsrs	r3, r7, #1
 80004fc:	4666      	mov	r6, ip
 80004fe:	e00e      	b.n	800051e <__udivmoddi4+0xda>
 8000500:	42ab      	cmp	r3, r5
 8000502:	d101      	bne.n	8000508 <__udivmoddi4+0xc4>
 8000504:	42a2      	cmp	r2, r4
 8000506:	d80c      	bhi.n	8000522 <__udivmoddi4+0xde>
 8000508:	1aa4      	subs	r4, r4, r2
 800050a:	419d      	sbcs	r5, r3
 800050c:	2001      	movs	r0, #1
 800050e:	1924      	adds	r4, r4, r4
 8000510:	416d      	adcs	r5, r5
 8000512:	2100      	movs	r1, #0
 8000514:	3e01      	subs	r6, #1
 8000516:	1824      	adds	r4, r4, r0
 8000518:	414d      	adcs	r5, r1
 800051a:	2e00      	cmp	r6, #0
 800051c:	d006      	beq.n	800052c <__udivmoddi4+0xe8>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d9ee      	bls.n	8000500 <__udivmoddi4+0xbc>
 8000522:	3e01      	subs	r6, #1
 8000524:	1924      	adds	r4, r4, r4
 8000526:	416d      	adcs	r5, r5
 8000528:	2e00      	cmp	r6, #0
 800052a:	d1f8      	bne.n	800051e <__udivmoddi4+0xda>
 800052c:	9800      	ldr	r0, [sp, #0]
 800052e:	9901      	ldr	r1, [sp, #4]
 8000530:	4653      	mov	r3, sl
 8000532:	1900      	adds	r0, r0, r4
 8000534:	4169      	adcs	r1, r5
 8000536:	2b00      	cmp	r3, #0
 8000538:	db23      	blt.n	8000582 <__udivmoddi4+0x13e>
 800053a:	002b      	movs	r3, r5
 800053c:	4652      	mov	r2, sl
 800053e:	40d3      	lsrs	r3, r2
 8000540:	002a      	movs	r2, r5
 8000542:	4664      	mov	r4, ip
 8000544:	40e2      	lsrs	r2, r4
 8000546:	001c      	movs	r4, r3
 8000548:	4653      	mov	r3, sl
 800054a:	0015      	movs	r5, r2
 800054c:	2b00      	cmp	r3, #0
 800054e:	db2d      	blt.n	80005ac <__udivmoddi4+0x168>
 8000550:	0026      	movs	r6, r4
 8000552:	4657      	mov	r7, sl
 8000554:	40be      	lsls	r6, r7
 8000556:	0033      	movs	r3, r6
 8000558:	0026      	movs	r6, r4
 800055a:	4667      	mov	r7, ip
 800055c:	40be      	lsls	r6, r7
 800055e:	0032      	movs	r2, r6
 8000560:	1a80      	subs	r0, r0, r2
 8000562:	4199      	sbcs	r1, r3
 8000564:	9000      	str	r0, [sp, #0]
 8000566:	9101      	str	r1, [sp, #4]
 8000568:	e7ac      	b.n	80004c4 <__udivmoddi4+0x80>
 800056a:	4662      	mov	r2, ip
 800056c:	2320      	movs	r3, #32
 800056e:	1a9b      	subs	r3, r3, r2
 8000570:	464a      	mov	r2, r9
 8000572:	40da      	lsrs	r2, r3
 8000574:	4661      	mov	r1, ip
 8000576:	0013      	movs	r3, r2
 8000578:	4642      	mov	r2, r8
 800057a:	408a      	lsls	r2, r1
 800057c:	0017      	movs	r7, r2
 800057e:	431f      	orrs	r7, r3
 8000580:	e780      	b.n	8000484 <__udivmoddi4+0x40>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	4666      	mov	r6, ip
 800058c:	409a      	lsls	r2, r3
 800058e:	0023      	movs	r3, r4
 8000590:	40f3      	lsrs	r3, r6
 8000592:	4313      	orrs	r3, r2
 8000594:	e7d4      	b.n	8000540 <__udivmoddi4+0xfc>
 8000596:	4662      	mov	r2, ip
 8000598:	2320      	movs	r3, #32
 800059a:	2100      	movs	r1, #0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	9100      	str	r1, [sp, #0]
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	40da      	lsrs	r2, r3
 80005a8:	9201      	str	r2, [sp, #4]
 80005aa:	e780      	b.n	80004ae <__udivmoddi4+0x6a>
 80005ac:	2320      	movs	r3, #32
 80005ae:	4662      	mov	r2, ip
 80005b0:	0026      	movs	r6, r4
 80005b2:	1a9b      	subs	r3, r3, r2
 80005b4:	40de      	lsrs	r6, r3
 80005b6:	002f      	movs	r7, r5
 80005b8:	46b0      	mov	r8, r6
 80005ba:	4666      	mov	r6, ip
 80005bc:	40b7      	lsls	r7, r6
 80005be:	4646      	mov	r6, r8
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7c8      	b.n	8000558 <__udivmoddi4+0x114>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__aeabi_dadd>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	464f      	mov	r7, r9
 80005cc:	4646      	mov	r6, r8
 80005ce:	46d6      	mov	lr, sl
 80005d0:	000c      	movs	r4, r1
 80005d2:	0309      	lsls	r1, r1, #12
 80005d4:	b5c0      	push	{r6, r7, lr}
 80005d6:	0a49      	lsrs	r1, r1, #9
 80005d8:	0f47      	lsrs	r7, r0, #29
 80005da:	005e      	lsls	r6, r3, #1
 80005dc:	4339      	orrs	r1, r7
 80005de:	031f      	lsls	r7, r3, #12
 80005e0:	0fdb      	lsrs	r3, r3, #31
 80005e2:	469c      	mov	ip, r3
 80005e4:	0065      	lsls	r5, r4, #1
 80005e6:	0a7b      	lsrs	r3, r7, #9
 80005e8:	0f57      	lsrs	r7, r2, #29
 80005ea:	431f      	orrs	r7, r3
 80005ec:	0d6d      	lsrs	r5, r5, #21
 80005ee:	0fe4      	lsrs	r4, r4, #31
 80005f0:	0d76      	lsrs	r6, r6, #21
 80005f2:	46a1      	mov	r9, r4
 80005f4:	00c0      	lsls	r0, r0, #3
 80005f6:	46b8      	mov	r8, r7
 80005f8:	00d2      	lsls	r2, r2, #3
 80005fa:	1bab      	subs	r3, r5, r6
 80005fc:	4564      	cmp	r4, ip
 80005fe:	d07b      	beq.n	80006f8 <__aeabi_dadd+0x130>
 8000600:	2b00      	cmp	r3, #0
 8000602:	dd5f      	ble.n	80006c4 <__aeabi_dadd+0xfc>
 8000604:	2e00      	cmp	r6, #0
 8000606:	d000      	beq.n	800060a <__aeabi_dadd+0x42>
 8000608:	e0a4      	b.n	8000754 <__aeabi_dadd+0x18c>
 800060a:	003e      	movs	r6, r7
 800060c:	4316      	orrs	r6, r2
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x4a>
 8000610:	e112      	b.n	8000838 <__aeabi_dadd+0x270>
 8000612:	1e5e      	subs	r6, r3, #1
 8000614:	2e00      	cmp	r6, #0
 8000616:	d000      	beq.n	800061a <__aeabi_dadd+0x52>
 8000618:	e19e      	b.n	8000958 <__aeabi_dadd+0x390>
 800061a:	1a87      	subs	r7, r0, r2
 800061c:	4643      	mov	r3, r8
 800061e:	42b8      	cmp	r0, r7
 8000620:	4180      	sbcs	r0, r0
 8000622:	2501      	movs	r5, #1
 8000624:	1ac9      	subs	r1, r1, r3
 8000626:	4240      	negs	r0, r0
 8000628:	1a09      	subs	r1, r1, r0
 800062a:	020b      	lsls	r3, r1, #8
 800062c:	d400      	bmi.n	8000630 <__aeabi_dadd+0x68>
 800062e:	e131      	b.n	8000894 <__aeabi_dadd+0x2cc>
 8000630:	0249      	lsls	r1, r1, #9
 8000632:	0a4e      	lsrs	r6, r1, #9
 8000634:	2e00      	cmp	r6, #0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x72>
 8000638:	e16e      	b.n	8000918 <__aeabi_dadd+0x350>
 800063a:	0030      	movs	r0, r6
 800063c:	f000 fdc2 	bl	80011c4 <__clzsi2>
 8000640:	0003      	movs	r3, r0
 8000642:	3b08      	subs	r3, #8
 8000644:	2b1f      	cmp	r3, #31
 8000646:	dd00      	ble.n	800064a <__aeabi_dadd+0x82>
 8000648:	e161      	b.n	800090e <__aeabi_dadd+0x346>
 800064a:	2220      	movs	r2, #32
 800064c:	0039      	movs	r1, r7
 800064e:	1ad2      	subs	r2, r2, r3
 8000650:	409e      	lsls	r6, r3
 8000652:	40d1      	lsrs	r1, r2
 8000654:	409f      	lsls	r7, r3
 8000656:	430e      	orrs	r6, r1
 8000658:	429d      	cmp	r5, r3
 800065a:	dd00      	ble.n	800065e <__aeabi_dadd+0x96>
 800065c:	e151      	b.n	8000902 <__aeabi_dadd+0x33a>
 800065e:	1b5d      	subs	r5, r3, r5
 8000660:	1c6b      	adds	r3, r5, #1
 8000662:	2b1f      	cmp	r3, #31
 8000664:	dd00      	ble.n	8000668 <__aeabi_dadd+0xa0>
 8000666:	e17c      	b.n	8000962 <__aeabi_dadd+0x39a>
 8000668:	2120      	movs	r1, #32
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	003d      	movs	r5, r7
 800066e:	0030      	movs	r0, r6
 8000670:	408f      	lsls	r7, r1
 8000672:	4088      	lsls	r0, r1
 8000674:	40dd      	lsrs	r5, r3
 8000676:	1e79      	subs	r1, r7, #1
 8000678:	418f      	sbcs	r7, r1
 800067a:	0031      	movs	r1, r6
 800067c:	2207      	movs	r2, #7
 800067e:	4328      	orrs	r0, r5
 8000680:	40d9      	lsrs	r1, r3
 8000682:	2500      	movs	r5, #0
 8000684:	4307      	orrs	r7, r0
 8000686:	403a      	ands	r2, r7
 8000688:	2a00      	cmp	r2, #0
 800068a:	d009      	beq.n	80006a0 <__aeabi_dadd+0xd8>
 800068c:	230f      	movs	r3, #15
 800068e:	403b      	ands	r3, r7
 8000690:	2b04      	cmp	r3, #4
 8000692:	d005      	beq.n	80006a0 <__aeabi_dadd+0xd8>
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	42bb      	cmp	r3, r7
 8000698:	41bf      	sbcs	r7, r7
 800069a:	427f      	negs	r7, r7
 800069c:	19c9      	adds	r1, r1, r7
 800069e:	001f      	movs	r7, r3
 80006a0:	020b      	lsls	r3, r1, #8
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_dadd+0xde>
 80006a4:	e226      	b.n	8000af4 <__aeabi_dadd+0x52c>
 80006a6:	1c6a      	adds	r2, r5, #1
 80006a8:	4bc6      	ldr	r3, [pc, #792]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80006aa:	0555      	lsls	r5, r2, #21
 80006ac:	0d6d      	lsrs	r5, r5, #21
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0xec>
 80006b2:	e106      	b.n	80008c2 <__aeabi_dadd+0x2fa>
 80006b4:	4ac4      	ldr	r2, [pc, #784]	; (80009c8 <__aeabi_dadd+0x400>)
 80006b6:	08ff      	lsrs	r7, r7, #3
 80006b8:	400a      	ands	r2, r1
 80006ba:	0753      	lsls	r3, r2, #29
 80006bc:	0252      	lsls	r2, r2, #9
 80006be:	433b      	orrs	r3, r7
 80006c0:	0b12      	lsrs	r2, r2, #12
 80006c2:	e08e      	b.n	80007e2 <__aeabi_dadd+0x21a>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d000      	beq.n	80006ca <__aeabi_dadd+0x102>
 80006c8:	e0b8      	b.n	800083c <__aeabi_dadd+0x274>
 80006ca:	1c6b      	adds	r3, r5, #1
 80006cc:	055b      	lsls	r3, r3, #21
 80006ce:	0d5b      	lsrs	r3, r3, #21
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	dc00      	bgt.n	80006d6 <__aeabi_dadd+0x10e>
 80006d4:	e130      	b.n	8000938 <__aeabi_dadd+0x370>
 80006d6:	1a87      	subs	r7, r0, r2
 80006d8:	4643      	mov	r3, r8
 80006da:	42b8      	cmp	r0, r7
 80006dc:	41b6      	sbcs	r6, r6
 80006de:	1acb      	subs	r3, r1, r3
 80006e0:	4276      	negs	r6, r6
 80006e2:	1b9e      	subs	r6, r3, r6
 80006e4:	0233      	lsls	r3, r6, #8
 80006e6:	d500      	bpl.n	80006ea <__aeabi_dadd+0x122>
 80006e8:	e14c      	b.n	8000984 <__aeabi_dadd+0x3bc>
 80006ea:	003b      	movs	r3, r7
 80006ec:	4333      	orrs	r3, r6
 80006ee:	d1a1      	bne.n	8000634 <__aeabi_dadd+0x6c>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2400      	movs	r4, #0
 80006f4:	2500      	movs	r5, #0
 80006f6:	e070      	b.n	80007da <__aeabi_dadd+0x212>
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dc00      	bgt.n	80006fe <__aeabi_dadd+0x136>
 80006fc:	e0e5      	b.n	80008ca <__aeabi_dadd+0x302>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x13c>
 8000702:	e083      	b.n	800080c <__aeabi_dadd+0x244>
 8000704:	4eaf      	ldr	r6, [pc, #700]	; (80009c4 <__aeabi_dadd+0x3fc>)
 8000706:	42b5      	cmp	r5, r6
 8000708:	d060      	beq.n	80007cc <__aeabi_dadd+0x204>
 800070a:	2680      	movs	r6, #128	; 0x80
 800070c:	0436      	lsls	r6, r6, #16
 800070e:	4337      	orrs	r7, r6
 8000710:	46b8      	mov	r8, r7
 8000712:	2b38      	cmp	r3, #56	; 0x38
 8000714:	dc00      	bgt.n	8000718 <__aeabi_dadd+0x150>
 8000716:	e13e      	b.n	8000996 <__aeabi_dadd+0x3ce>
 8000718:	4643      	mov	r3, r8
 800071a:	4313      	orrs	r3, r2
 800071c:	001f      	movs	r7, r3
 800071e:	1e7a      	subs	r2, r7, #1
 8000720:	4197      	sbcs	r7, r2
 8000722:	183f      	adds	r7, r7, r0
 8000724:	4287      	cmp	r7, r0
 8000726:	4180      	sbcs	r0, r0
 8000728:	4240      	negs	r0, r0
 800072a:	1809      	adds	r1, r1, r0
 800072c:	020b      	lsls	r3, r1, #8
 800072e:	d400      	bmi.n	8000732 <__aeabi_dadd+0x16a>
 8000730:	e0b0      	b.n	8000894 <__aeabi_dadd+0x2cc>
 8000732:	4ba4      	ldr	r3, [pc, #656]	; (80009c4 <__aeabi_dadd+0x3fc>)
 8000734:	3501      	adds	r5, #1
 8000736:	429d      	cmp	r5, r3
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x174>
 800073a:	e0c3      	b.n	80008c4 <__aeabi_dadd+0x2fc>
 800073c:	4aa2      	ldr	r2, [pc, #648]	; (80009c8 <__aeabi_dadd+0x400>)
 800073e:	087b      	lsrs	r3, r7, #1
 8000740:	400a      	ands	r2, r1
 8000742:	2101      	movs	r1, #1
 8000744:	400f      	ands	r7, r1
 8000746:	431f      	orrs	r7, r3
 8000748:	0851      	lsrs	r1, r2, #1
 800074a:	07d3      	lsls	r3, r2, #31
 800074c:	2207      	movs	r2, #7
 800074e:	431f      	orrs	r7, r3
 8000750:	403a      	ands	r2, r7
 8000752:	e799      	b.n	8000688 <__aeabi_dadd+0xc0>
 8000754:	4e9b      	ldr	r6, [pc, #620]	; (80009c4 <__aeabi_dadd+0x3fc>)
 8000756:	42b5      	cmp	r5, r6
 8000758:	d038      	beq.n	80007cc <__aeabi_dadd+0x204>
 800075a:	2680      	movs	r6, #128	; 0x80
 800075c:	0436      	lsls	r6, r6, #16
 800075e:	4337      	orrs	r7, r6
 8000760:	46b8      	mov	r8, r7
 8000762:	2b38      	cmp	r3, #56	; 0x38
 8000764:	dd00      	ble.n	8000768 <__aeabi_dadd+0x1a0>
 8000766:	e0dc      	b.n	8000922 <__aeabi_dadd+0x35a>
 8000768:	2b1f      	cmp	r3, #31
 800076a:	dc00      	bgt.n	800076e <__aeabi_dadd+0x1a6>
 800076c:	e130      	b.n	80009d0 <__aeabi_dadd+0x408>
 800076e:	001e      	movs	r6, r3
 8000770:	4647      	mov	r7, r8
 8000772:	3e20      	subs	r6, #32
 8000774:	40f7      	lsrs	r7, r6
 8000776:	46bc      	mov	ip, r7
 8000778:	2b20      	cmp	r3, #32
 800077a:	d004      	beq.n	8000786 <__aeabi_dadd+0x1be>
 800077c:	2640      	movs	r6, #64	; 0x40
 800077e:	1af3      	subs	r3, r6, r3
 8000780:	4646      	mov	r6, r8
 8000782:	409e      	lsls	r6, r3
 8000784:	4332      	orrs	r2, r6
 8000786:	0017      	movs	r7, r2
 8000788:	4663      	mov	r3, ip
 800078a:	1e7a      	subs	r2, r7, #1
 800078c:	4197      	sbcs	r7, r2
 800078e:	431f      	orrs	r7, r3
 8000790:	e0cc      	b.n	800092c <__aeabi_dadd+0x364>
 8000792:	2b00      	cmp	r3, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x1d0>
 8000796:	e204      	b.n	8000ba2 <__aeabi_dadd+0x5da>
 8000798:	4643      	mov	r3, r8
 800079a:	4313      	orrs	r3, r2
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x1d8>
 800079e:	e159      	b.n	8000a54 <__aeabi_dadd+0x48c>
 80007a0:	074b      	lsls	r3, r1, #29
 80007a2:	08c0      	lsrs	r0, r0, #3
 80007a4:	4318      	orrs	r0, r3
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	08c9      	lsrs	r1, r1, #3
 80007aa:	031b      	lsls	r3, r3, #12
 80007ac:	4219      	tst	r1, r3
 80007ae:	d008      	beq.n	80007c2 <__aeabi_dadd+0x1fa>
 80007b0:	4645      	mov	r5, r8
 80007b2:	08ed      	lsrs	r5, r5, #3
 80007b4:	421d      	tst	r5, r3
 80007b6:	d104      	bne.n	80007c2 <__aeabi_dadd+0x1fa>
 80007b8:	4643      	mov	r3, r8
 80007ba:	08d0      	lsrs	r0, r2, #3
 80007bc:	0759      	lsls	r1, r3, #29
 80007be:	4308      	orrs	r0, r1
 80007c0:	0029      	movs	r1, r5
 80007c2:	0f42      	lsrs	r2, r0, #29
 80007c4:	00c9      	lsls	r1, r1, #3
 80007c6:	4d7f      	ldr	r5, [pc, #508]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80007c8:	4311      	orrs	r1, r2
 80007ca:	00c0      	lsls	r0, r0, #3
 80007cc:	074b      	lsls	r3, r1, #29
 80007ce:	08ca      	lsrs	r2, r1, #3
 80007d0:	497c      	ldr	r1, [pc, #496]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80007d2:	08c0      	lsrs	r0, r0, #3
 80007d4:	4303      	orrs	r3, r0
 80007d6:	428d      	cmp	r5, r1
 80007d8:	d068      	beq.n	80008ac <__aeabi_dadd+0x2e4>
 80007da:	0312      	lsls	r2, r2, #12
 80007dc:	056d      	lsls	r5, r5, #21
 80007de:	0b12      	lsrs	r2, r2, #12
 80007e0:	0d6d      	lsrs	r5, r5, #21
 80007e2:	2100      	movs	r1, #0
 80007e4:	0312      	lsls	r2, r2, #12
 80007e6:	0018      	movs	r0, r3
 80007e8:	0b13      	lsrs	r3, r2, #12
 80007ea:	0d0a      	lsrs	r2, r1, #20
 80007ec:	0512      	lsls	r2, r2, #20
 80007ee:	431a      	orrs	r2, r3
 80007f0:	4b76      	ldr	r3, [pc, #472]	; (80009cc <__aeabi_dadd+0x404>)
 80007f2:	052d      	lsls	r5, r5, #20
 80007f4:	4013      	ands	r3, r2
 80007f6:	432b      	orrs	r3, r5
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	07e4      	lsls	r4, r4, #31
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	4323      	orrs	r3, r4
 8000800:	0019      	movs	r1, r3
 8000802:	bc1c      	pop	{r2, r3, r4}
 8000804:	4690      	mov	r8, r2
 8000806:	4699      	mov	r9, r3
 8000808:	46a2      	mov	sl, r4
 800080a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080c:	003e      	movs	r6, r7
 800080e:	4316      	orrs	r6, r2
 8000810:	d012      	beq.n	8000838 <__aeabi_dadd+0x270>
 8000812:	1e5e      	subs	r6, r3, #1
 8000814:	2e00      	cmp	r6, #0
 8000816:	d000      	beq.n	800081a <__aeabi_dadd+0x252>
 8000818:	e100      	b.n	8000a1c <__aeabi_dadd+0x454>
 800081a:	1887      	adds	r7, r0, r2
 800081c:	4287      	cmp	r7, r0
 800081e:	4180      	sbcs	r0, r0
 8000820:	4441      	add	r1, r8
 8000822:	4240      	negs	r0, r0
 8000824:	1809      	adds	r1, r1, r0
 8000826:	2501      	movs	r5, #1
 8000828:	020b      	lsls	r3, r1, #8
 800082a:	d533      	bpl.n	8000894 <__aeabi_dadd+0x2cc>
 800082c:	2502      	movs	r5, #2
 800082e:	e785      	b.n	800073c <__aeabi_dadd+0x174>
 8000830:	4664      	mov	r4, ip
 8000832:	0033      	movs	r3, r6
 8000834:	4641      	mov	r1, r8
 8000836:	0010      	movs	r0, r2
 8000838:	001d      	movs	r5, r3
 800083a:	e7c7      	b.n	80007cc <__aeabi_dadd+0x204>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_dadd+0x27a>
 8000840:	e0da      	b.n	80009f8 <__aeabi_dadd+0x430>
 8000842:	000c      	movs	r4, r1
 8000844:	4304      	orrs	r4, r0
 8000846:	d0f3      	beq.n	8000830 <__aeabi_dadd+0x268>
 8000848:	1c5c      	adds	r4, r3, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x286>
 800084c:	e19f      	b.n	8000b8e <__aeabi_dadd+0x5c6>
 800084e:	4c5d      	ldr	r4, [pc, #372]	; (80009c4 <__aeabi_dadd+0x3fc>)
 8000850:	42a6      	cmp	r6, r4
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x28e>
 8000854:	e12f      	b.n	8000ab6 <__aeabi_dadd+0x4ee>
 8000856:	43db      	mvns	r3, r3
 8000858:	2b38      	cmp	r3, #56	; 0x38
 800085a:	dd00      	ble.n	800085e <__aeabi_dadd+0x296>
 800085c:	e166      	b.n	8000b2c <__aeabi_dadd+0x564>
 800085e:	2b1f      	cmp	r3, #31
 8000860:	dd00      	ble.n	8000864 <__aeabi_dadd+0x29c>
 8000862:	e183      	b.n	8000b6c <__aeabi_dadd+0x5a4>
 8000864:	2420      	movs	r4, #32
 8000866:	0005      	movs	r5, r0
 8000868:	1ae4      	subs	r4, r4, r3
 800086a:	000f      	movs	r7, r1
 800086c:	40dd      	lsrs	r5, r3
 800086e:	40d9      	lsrs	r1, r3
 8000870:	40a0      	lsls	r0, r4
 8000872:	4643      	mov	r3, r8
 8000874:	40a7      	lsls	r7, r4
 8000876:	1a5b      	subs	r3, r3, r1
 8000878:	1e44      	subs	r4, r0, #1
 800087a:	41a0      	sbcs	r0, r4
 800087c:	4698      	mov	r8, r3
 800087e:	432f      	orrs	r7, r5
 8000880:	4338      	orrs	r0, r7
 8000882:	1a17      	subs	r7, r2, r0
 8000884:	42ba      	cmp	r2, r7
 8000886:	4192      	sbcs	r2, r2
 8000888:	4643      	mov	r3, r8
 800088a:	4252      	negs	r2, r2
 800088c:	1a99      	subs	r1, r3, r2
 800088e:	4664      	mov	r4, ip
 8000890:	0035      	movs	r5, r6
 8000892:	e6ca      	b.n	800062a <__aeabi_dadd+0x62>
 8000894:	2207      	movs	r2, #7
 8000896:	403a      	ands	r2, r7
 8000898:	2a00      	cmp	r2, #0
 800089a:	d000      	beq.n	800089e <__aeabi_dadd+0x2d6>
 800089c:	e6f6      	b.n	800068c <__aeabi_dadd+0xc4>
 800089e:	074b      	lsls	r3, r1, #29
 80008a0:	08ca      	lsrs	r2, r1, #3
 80008a2:	4948      	ldr	r1, [pc, #288]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80008a4:	08ff      	lsrs	r7, r7, #3
 80008a6:	433b      	orrs	r3, r7
 80008a8:	428d      	cmp	r5, r1
 80008aa:	d196      	bne.n	80007da <__aeabi_dadd+0x212>
 80008ac:	0019      	movs	r1, r3
 80008ae:	4311      	orrs	r1, r2
 80008b0:	d100      	bne.n	80008b4 <__aeabi_dadd+0x2ec>
 80008b2:	e19e      	b.n	8000bf2 <__aeabi_dadd+0x62a>
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0309      	lsls	r1, r1, #12
 80008b8:	430a      	orrs	r2, r1
 80008ba:	0312      	lsls	r2, r2, #12
 80008bc:	0b12      	lsrs	r2, r2, #12
 80008be:	4d41      	ldr	r5, [pc, #260]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80008c0:	e78f      	b.n	80007e2 <__aeabi_dadd+0x21a>
 80008c2:	0015      	movs	r5, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	2300      	movs	r3, #0
 80008c8:	e78b      	b.n	80007e2 <__aeabi_dadd+0x21a>
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x308>
 80008ce:	e0c7      	b.n	8000a60 <__aeabi_dadd+0x498>
 80008d0:	1c6b      	adds	r3, r5, #1
 80008d2:	055f      	lsls	r7, r3, #21
 80008d4:	0d7f      	lsrs	r7, r7, #21
 80008d6:	2f01      	cmp	r7, #1
 80008d8:	dc00      	bgt.n	80008dc <__aeabi_dadd+0x314>
 80008da:	e0f1      	b.n	8000ac0 <__aeabi_dadd+0x4f8>
 80008dc:	4d39      	ldr	r5, [pc, #228]	; (80009c4 <__aeabi_dadd+0x3fc>)
 80008de:	42ab      	cmp	r3, r5
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x31c>
 80008e2:	e0b9      	b.n	8000a58 <__aeabi_dadd+0x490>
 80008e4:	1885      	adds	r5, r0, r2
 80008e6:	000a      	movs	r2, r1
 80008e8:	4285      	cmp	r5, r0
 80008ea:	4189      	sbcs	r1, r1
 80008ec:	4442      	add	r2, r8
 80008ee:	4249      	negs	r1, r1
 80008f0:	1851      	adds	r1, r2, r1
 80008f2:	2207      	movs	r2, #7
 80008f4:	07cf      	lsls	r7, r1, #31
 80008f6:	086d      	lsrs	r5, r5, #1
 80008f8:	432f      	orrs	r7, r5
 80008fa:	0849      	lsrs	r1, r1, #1
 80008fc:	403a      	ands	r2, r7
 80008fe:	001d      	movs	r5, r3
 8000900:	e6c2      	b.n	8000688 <__aeabi_dadd+0xc0>
 8000902:	2207      	movs	r2, #7
 8000904:	4930      	ldr	r1, [pc, #192]	; (80009c8 <__aeabi_dadd+0x400>)
 8000906:	1aed      	subs	r5, r5, r3
 8000908:	4031      	ands	r1, r6
 800090a:	403a      	ands	r2, r7
 800090c:	e6bc      	b.n	8000688 <__aeabi_dadd+0xc0>
 800090e:	003e      	movs	r6, r7
 8000910:	3828      	subs	r0, #40	; 0x28
 8000912:	4086      	lsls	r6, r0
 8000914:	2700      	movs	r7, #0
 8000916:	e69f      	b.n	8000658 <__aeabi_dadd+0x90>
 8000918:	0038      	movs	r0, r7
 800091a:	f000 fc53 	bl	80011c4 <__clzsi2>
 800091e:	3020      	adds	r0, #32
 8000920:	e68e      	b.n	8000640 <__aeabi_dadd+0x78>
 8000922:	4643      	mov	r3, r8
 8000924:	4313      	orrs	r3, r2
 8000926:	001f      	movs	r7, r3
 8000928:	1e7a      	subs	r2, r7, #1
 800092a:	4197      	sbcs	r7, r2
 800092c:	1bc7      	subs	r7, r0, r7
 800092e:	42b8      	cmp	r0, r7
 8000930:	4180      	sbcs	r0, r0
 8000932:	4240      	negs	r0, r0
 8000934:	1a09      	subs	r1, r1, r0
 8000936:	e678      	b.n	800062a <__aeabi_dadd+0x62>
 8000938:	000e      	movs	r6, r1
 800093a:	003b      	movs	r3, r7
 800093c:	4306      	orrs	r6, r0
 800093e:	4313      	orrs	r3, r2
 8000940:	2d00      	cmp	r5, #0
 8000942:	d161      	bne.n	8000a08 <__aeabi_dadd+0x440>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x382>
 8000948:	e0f4      	b.n	8000b34 <__aeabi_dadd+0x56c>
 800094a:	2b00      	cmp	r3, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_dadd+0x388>
 800094e:	e11b      	b.n	8000b88 <__aeabi_dadd+0x5c0>
 8000950:	4664      	mov	r4, ip
 8000952:	0039      	movs	r1, r7
 8000954:	0010      	movs	r0, r2
 8000956:	e739      	b.n	80007cc <__aeabi_dadd+0x204>
 8000958:	4f1a      	ldr	r7, [pc, #104]	; (80009c4 <__aeabi_dadd+0x3fc>)
 800095a:	42bb      	cmp	r3, r7
 800095c:	d07a      	beq.n	8000a54 <__aeabi_dadd+0x48c>
 800095e:	0033      	movs	r3, r6
 8000960:	e6ff      	b.n	8000762 <__aeabi_dadd+0x19a>
 8000962:	0030      	movs	r0, r6
 8000964:	3d1f      	subs	r5, #31
 8000966:	40e8      	lsrs	r0, r5
 8000968:	2b20      	cmp	r3, #32
 800096a:	d003      	beq.n	8000974 <__aeabi_dadd+0x3ac>
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	1acb      	subs	r3, r1, r3
 8000970:	409e      	lsls	r6, r3
 8000972:	4337      	orrs	r7, r6
 8000974:	1e7b      	subs	r3, r7, #1
 8000976:	419f      	sbcs	r7, r3
 8000978:	2207      	movs	r2, #7
 800097a:	4307      	orrs	r7, r0
 800097c:	403a      	ands	r2, r7
 800097e:	2100      	movs	r1, #0
 8000980:	2500      	movs	r5, #0
 8000982:	e789      	b.n	8000898 <__aeabi_dadd+0x2d0>
 8000984:	1a17      	subs	r7, r2, r0
 8000986:	4643      	mov	r3, r8
 8000988:	42ba      	cmp	r2, r7
 800098a:	41b6      	sbcs	r6, r6
 800098c:	1a59      	subs	r1, r3, r1
 800098e:	4276      	negs	r6, r6
 8000990:	1b8e      	subs	r6, r1, r6
 8000992:	4664      	mov	r4, ip
 8000994:	e64e      	b.n	8000634 <__aeabi_dadd+0x6c>
 8000996:	2b1f      	cmp	r3, #31
 8000998:	dd00      	ble.n	800099c <__aeabi_dadd+0x3d4>
 800099a:	e0ad      	b.n	8000af8 <__aeabi_dadd+0x530>
 800099c:	2620      	movs	r6, #32
 800099e:	4647      	mov	r7, r8
 80009a0:	1af6      	subs	r6, r6, r3
 80009a2:	40b7      	lsls	r7, r6
 80009a4:	46b9      	mov	r9, r7
 80009a6:	0017      	movs	r7, r2
 80009a8:	46b2      	mov	sl, r6
 80009aa:	40df      	lsrs	r7, r3
 80009ac:	464e      	mov	r6, r9
 80009ae:	433e      	orrs	r6, r7
 80009b0:	0037      	movs	r7, r6
 80009b2:	4656      	mov	r6, sl
 80009b4:	40b2      	lsls	r2, r6
 80009b6:	1e56      	subs	r6, r2, #1
 80009b8:	41b2      	sbcs	r2, r6
 80009ba:	4317      	orrs	r7, r2
 80009bc:	4642      	mov	r2, r8
 80009be:	40da      	lsrs	r2, r3
 80009c0:	1889      	adds	r1, r1, r2
 80009c2:	e6ae      	b.n	8000722 <__aeabi_dadd+0x15a>
 80009c4:	000007ff 	.word	0x000007ff
 80009c8:	ff7fffff 	.word	0xff7fffff
 80009cc:	800fffff 	.word	0x800fffff
 80009d0:	2620      	movs	r6, #32
 80009d2:	4647      	mov	r7, r8
 80009d4:	1af6      	subs	r6, r6, r3
 80009d6:	40b7      	lsls	r7, r6
 80009d8:	46b9      	mov	r9, r7
 80009da:	0017      	movs	r7, r2
 80009dc:	46b2      	mov	sl, r6
 80009de:	40df      	lsrs	r7, r3
 80009e0:	464e      	mov	r6, r9
 80009e2:	433e      	orrs	r6, r7
 80009e4:	0037      	movs	r7, r6
 80009e6:	4656      	mov	r6, sl
 80009e8:	40b2      	lsls	r2, r6
 80009ea:	1e56      	subs	r6, r2, #1
 80009ec:	41b2      	sbcs	r2, r6
 80009ee:	4317      	orrs	r7, r2
 80009f0:	4642      	mov	r2, r8
 80009f2:	40da      	lsrs	r2, r3
 80009f4:	1a89      	subs	r1, r1, r2
 80009f6:	e799      	b.n	800092c <__aeabi_dadd+0x364>
 80009f8:	4c7f      	ldr	r4, [pc, #508]	; (8000bf8 <__aeabi_dadd+0x630>)
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d05b      	beq.n	8000ab6 <__aeabi_dadd+0x4ee>
 80009fe:	2480      	movs	r4, #128	; 0x80
 8000a00:	0424      	lsls	r4, r4, #16
 8000a02:	425b      	negs	r3, r3
 8000a04:	4321      	orrs	r1, r4
 8000a06:	e727      	b.n	8000858 <__aeabi_dadd+0x290>
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d10c      	bne.n	8000a26 <__aeabi_dadd+0x45e>
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x44a>
 8000a10:	e0cb      	b.n	8000baa <__aeabi_dadd+0x5e2>
 8000a12:	4664      	mov	r4, ip
 8000a14:	0039      	movs	r1, r7
 8000a16:	0010      	movs	r0, r2
 8000a18:	4d77      	ldr	r5, [pc, #476]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000a1a:	e6d7      	b.n	80007cc <__aeabi_dadd+0x204>
 8000a1c:	4f76      	ldr	r7, [pc, #472]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000a1e:	42bb      	cmp	r3, r7
 8000a20:	d018      	beq.n	8000a54 <__aeabi_dadd+0x48c>
 8000a22:	0033      	movs	r3, r6
 8000a24:	e675      	b.n	8000712 <__aeabi_dadd+0x14a>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d014      	beq.n	8000a54 <__aeabi_dadd+0x48c>
 8000a2a:	074b      	lsls	r3, r1, #29
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	4318      	orrs	r0, r3
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	031b      	lsls	r3, r3, #12
 8000a36:	4219      	tst	r1, r3
 8000a38:	d007      	beq.n	8000a4a <__aeabi_dadd+0x482>
 8000a3a:	08fc      	lsrs	r4, r7, #3
 8000a3c:	421c      	tst	r4, r3
 8000a3e:	d104      	bne.n	8000a4a <__aeabi_dadd+0x482>
 8000a40:	0779      	lsls	r1, r7, #29
 8000a42:	08d0      	lsrs	r0, r2, #3
 8000a44:	4308      	orrs	r0, r1
 8000a46:	46e1      	mov	r9, ip
 8000a48:	0021      	movs	r1, r4
 8000a4a:	464c      	mov	r4, r9
 8000a4c:	0f42      	lsrs	r2, r0, #29
 8000a4e:	00c9      	lsls	r1, r1, #3
 8000a50:	4311      	orrs	r1, r2
 8000a52:	00c0      	lsls	r0, r0, #3
 8000a54:	4d68      	ldr	r5, [pc, #416]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000a56:	e6b9      	b.n	80007cc <__aeabi_dadd+0x204>
 8000a58:	001d      	movs	r5, r3
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e6c0      	b.n	80007e2 <__aeabi_dadd+0x21a>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d15b      	bne.n	8000b1c <__aeabi_dadd+0x554>
 8000a64:	000d      	movs	r5, r1
 8000a66:	4305      	orrs	r5, r0
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x4a4>
 8000a6a:	e6e2      	b.n	8000832 <__aeabi_dadd+0x26a>
 8000a6c:	1c5d      	adds	r5, r3, #1
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x4aa>
 8000a70:	e0b0      	b.n	8000bd4 <__aeabi_dadd+0x60c>
 8000a72:	4d61      	ldr	r5, [pc, #388]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000a74:	42ae      	cmp	r6, r5
 8000a76:	d01f      	beq.n	8000ab8 <__aeabi_dadd+0x4f0>
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	2b38      	cmp	r3, #56	; 0x38
 8000a7c:	dc71      	bgt.n	8000b62 <__aeabi_dadd+0x59a>
 8000a7e:	2b1f      	cmp	r3, #31
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dadd+0x4bc>
 8000a82:	e096      	b.n	8000bb2 <__aeabi_dadd+0x5ea>
 8000a84:	2520      	movs	r5, #32
 8000a86:	000f      	movs	r7, r1
 8000a88:	1aed      	subs	r5, r5, r3
 8000a8a:	40af      	lsls	r7, r5
 8000a8c:	46b9      	mov	r9, r7
 8000a8e:	0007      	movs	r7, r0
 8000a90:	46aa      	mov	sl, r5
 8000a92:	40df      	lsrs	r7, r3
 8000a94:	464d      	mov	r5, r9
 8000a96:	433d      	orrs	r5, r7
 8000a98:	002f      	movs	r7, r5
 8000a9a:	4655      	mov	r5, sl
 8000a9c:	40a8      	lsls	r0, r5
 8000a9e:	40d9      	lsrs	r1, r3
 8000aa0:	1e45      	subs	r5, r0, #1
 8000aa2:	41a8      	sbcs	r0, r5
 8000aa4:	4488      	add	r8, r1
 8000aa6:	4307      	orrs	r7, r0
 8000aa8:	18bf      	adds	r7, r7, r2
 8000aaa:	4297      	cmp	r7, r2
 8000aac:	4192      	sbcs	r2, r2
 8000aae:	4251      	negs	r1, r2
 8000ab0:	4441      	add	r1, r8
 8000ab2:	0035      	movs	r5, r6
 8000ab4:	e63a      	b.n	800072c <__aeabi_dadd+0x164>
 8000ab6:	4664      	mov	r4, ip
 8000ab8:	0035      	movs	r5, r6
 8000aba:	4641      	mov	r1, r8
 8000abc:	0010      	movs	r0, r2
 8000abe:	e685      	b.n	80007cc <__aeabi_dadd+0x204>
 8000ac0:	000b      	movs	r3, r1
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d000      	beq.n	8000aca <__aeabi_dadd+0x502>
 8000ac8:	e663      	b.n	8000792 <__aeabi_dadd+0x1ca>
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f5      	beq.n	8000aba <__aeabi_dadd+0x4f2>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x50e>
 8000ad4:	e67a      	b.n	80007cc <__aeabi_dadd+0x204>
 8000ad6:	1887      	adds	r7, r0, r2
 8000ad8:	4287      	cmp	r7, r0
 8000ada:	4180      	sbcs	r0, r0
 8000adc:	2207      	movs	r2, #7
 8000ade:	4441      	add	r1, r8
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	1809      	adds	r1, r1, r0
 8000ae4:	403a      	ands	r2, r7
 8000ae6:	020b      	lsls	r3, r1, #8
 8000ae8:	d400      	bmi.n	8000aec <__aeabi_dadd+0x524>
 8000aea:	e6d5      	b.n	8000898 <__aeabi_dadd+0x2d0>
 8000aec:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <__aeabi_dadd+0x634>)
 8000aee:	3501      	adds	r5, #1
 8000af0:	4019      	ands	r1, r3
 8000af2:	e5c9      	b.n	8000688 <__aeabi_dadd+0xc0>
 8000af4:	0038      	movs	r0, r7
 8000af6:	e669      	b.n	80007cc <__aeabi_dadd+0x204>
 8000af8:	001e      	movs	r6, r3
 8000afa:	4647      	mov	r7, r8
 8000afc:	3e20      	subs	r6, #32
 8000afe:	40f7      	lsrs	r7, r6
 8000b00:	46bc      	mov	ip, r7
 8000b02:	2b20      	cmp	r3, #32
 8000b04:	d004      	beq.n	8000b10 <__aeabi_dadd+0x548>
 8000b06:	2640      	movs	r6, #64	; 0x40
 8000b08:	1af3      	subs	r3, r6, r3
 8000b0a:	4646      	mov	r6, r8
 8000b0c:	409e      	lsls	r6, r3
 8000b0e:	4332      	orrs	r2, r6
 8000b10:	0017      	movs	r7, r2
 8000b12:	4663      	mov	r3, ip
 8000b14:	1e7a      	subs	r2, r7, #1
 8000b16:	4197      	sbcs	r7, r2
 8000b18:	431f      	orrs	r7, r3
 8000b1a:	e602      	b.n	8000722 <__aeabi_dadd+0x15a>
 8000b1c:	4d36      	ldr	r5, [pc, #216]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000b1e:	42ae      	cmp	r6, r5
 8000b20:	d0ca      	beq.n	8000ab8 <__aeabi_dadd+0x4f0>
 8000b22:	2580      	movs	r5, #128	; 0x80
 8000b24:	042d      	lsls	r5, r5, #16
 8000b26:	425b      	negs	r3, r3
 8000b28:	4329      	orrs	r1, r5
 8000b2a:	e7a6      	b.n	8000a7a <__aeabi_dadd+0x4b2>
 8000b2c:	4308      	orrs	r0, r1
 8000b2e:	1e41      	subs	r1, r0, #1
 8000b30:	4188      	sbcs	r0, r1
 8000b32:	e6a6      	b.n	8000882 <__aeabi_dadd+0x2ba>
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x572>
 8000b38:	e648      	b.n	80007cc <__aeabi_dadd+0x204>
 8000b3a:	1a87      	subs	r7, r0, r2
 8000b3c:	4643      	mov	r3, r8
 8000b3e:	42b8      	cmp	r0, r7
 8000b40:	41b6      	sbcs	r6, r6
 8000b42:	1acb      	subs	r3, r1, r3
 8000b44:	4276      	negs	r6, r6
 8000b46:	1b9e      	subs	r6, r3, r6
 8000b48:	0233      	lsls	r3, r6, #8
 8000b4a:	d54b      	bpl.n	8000be4 <__aeabi_dadd+0x61c>
 8000b4c:	1a17      	subs	r7, r2, r0
 8000b4e:	4643      	mov	r3, r8
 8000b50:	42ba      	cmp	r2, r7
 8000b52:	4192      	sbcs	r2, r2
 8000b54:	1a59      	subs	r1, r3, r1
 8000b56:	4252      	negs	r2, r2
 8000b58:	1a89      	subs	r1, r1, r2
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	4664      	mov	r4, ip
 8000b5e:	403a      	ands	r2, r7
 8000b60:	e592      	b.n	8000688 <__aeabi_dadd+0xc0>
 8000b62:	4301      	orrs	r1, r0
 8000b64:	000f      	movs	r7, r1
 8000b66:	1e79      	subs	r1, r7, #1
 8000b68:	418f      	sbcs	r7, r1
 8000b6a:	e79d      	b.n	8000aa8 <__aeabi_dadd+0x4e0>
 8000b6c:	001c      	movs	r4, r3
 8000b6e:	000f      	movs	r7, r1
 8000b70:	3c20      	subs	r4, #32
 8000b72:	40e7      	lsrs	r7, r4
 8000b74:	2b20      	cmp	r3, #32
 8000b76:	d003      	beq.n	8000b80 <__aeabi_dadd+0x5b8>
 8000b78:	2440      	movs	r4, #64	; 0x40
 8000b7a:	1ae3      	subs	r3, r4, r3
 8000b7c:	4099      	lsls	r1, r3
 8000b7e:	4308      	orrs	r0, r1
 8000b80:	1e41      	subs	r1, r0, #1
 8000b82:	4188      	sbcs	r0, r1
 8000b84:	4338      	orrs	r0, r7
 8000b86:	e67c      	b.n	8000882 <__aeabi_dadd+0x2ba>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	e625      	b.n	80007da <__aeabi_dadd+0x212>
 8000b8e:	1a17      	subs	r7, r2, r0
 8000b90:	4643      	mov	r3, r8
 8000b92:	42ba      	cmp	r2, r7
 8000b94:	4192      	sbcs	r2, r2
 8000b96:	1a59      	subs	r1, r3, r1
 8000b98:	4252      	negs	r2, r2
 8000b9a:	1a89      	subs	r1, r1, r2
 8000b9c:	4664      	mov	r4, ip
 8000b9e:	0035      	movs	r5, r6
 8000ba0:	e543      	b.n	800062a <__aeabi_dadd+0x62>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	4d14      	ldr	r5, [pc, #80]	; (8000bf8 <__aeabi_dadd+0x630>)
 8000ba8:	e610      	b.n	80007cc <__aeabi_dadd+0x204>
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	2400      	movs	r4, #0
 8000bae:	0312      	lsls	r2, r2, #12
 8000bb0:	e680      	b.n	80008b4 <__aeabi_dadd+0x2ec>
 8000bb2:	001d      	movs	r5, r3
 8000bb4:	000f      	movs	r7, r1
 8000bb6:	3d20      	subs	r5, #32
 8000bb8:	40ef      	lsrs	r7, r5
 8000bba:	46bc      	mov	ip, r7
 8000bbc:	2b20      	cmp	r3, #32
 8000bbe:	d003      	beq.n	8000bc8 <__aeabi_dadd+0x600>
 8000bc0:	2540      	movs	r5, #64	; 0x40
 8000bc2:	1aeb      	subs	r3, r5, r3
 8000bc4:	4099      	lsls	r1, r3
 8000bc6:	4308      	orrs	r0, r1
 8000bc8:	0007      	movs	r7, r0
 8000bca:	4663      	mov	r3, ip
 8000bcc:	1e78      	subs	r0, r7, #1
 8000bce:	4187      	sbcs	r7, r0
 8000bd0:	431f      	orrs	r7, r3
 8000bd2:	e769      	b.n	8000aa8 <__aeabi_dadd+0x4e0>
 8000bd4:	1887      	adds	r7, r0, r2
 8000bd6:	4297      	cmp	r7, r2
 8000bd8:	419b      	sbcs	r3, r3
 8000bda:	4441      	add	r1, r8
 8000bdc:	425b      	negs	r3, r3
 8000bde:	18c9      	adds	r1, r1, r3
 8000be0:	0035      	movs	r5, r6
 8000be2:	e5a3      	b.n	800072c <__aeabi_dadd+0x164>
 8000be4:	003b      	movs	r3, r7
 8000be6:	4333      	orrs	r3, r6
 8000be8:	d0ce      	beq.n	8000b88 <__aeabi_dadd+0x5c0>
 8000bea:	2207      	movs	r2, #7
 8000bec:	0031      	movs	r1, r6
 8000bee:	403a      	ands	r2, r7
 8000bf0:	e652      	b.n	8000898 <__aeabi_dadd+0x2d0>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	e5f4      	b.n	80007e2 <__aeabi_dadd+0x21a>
 8000bf8:	000007ff 	.word	0x000007ff
 8000bfc:	ff7fffff 	.word	0xff7fffff

08000c00 <__aeabi_dmul>:
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4657      	mov	r7, sl
 8000c04:	46de      	mov	lr, fp
 8000c06:	464e      	mov	r6, r9
 8000c08:	4645      	mov	r5, r8
 8000c0a:	b5e0      	push	{r5, r6, r7, lr}
 8000c0c:	4683      	mov	fp, r0
 8000c0e:	0006      	movs	r6, r0
 8000c10:	030f      	lsls	r7, r1, #12
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	b087      	sub	sp, #28
 8000c16:	4692      	mov	sl, r2
 8000c18:	001d      	movs	r5, r3
 8000c1a:	0b3f      	lsrs	r7, r7, #12
 8000c1c:	0d40      	lsrs	r0, r0, #21
 8000c1e:	0fcc      	lsrs	r4, r1, #31
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dmul+0x26>
 8000c24:	e06f      	b.n	8000d06 <__aeabi_dmul+0x106>
 8000c26:	4bde      	ldr	r3, [pc, #888]	; (8000fa0 <__aeabi_dmul+0x3a0>)
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d038      	beq.n	8000c9e <__aeabi_dmul+0x9e>
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	00ff      	lsls	r7, r7, #3
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	431f      	orrs	r7, r3
 8000c34:	0f73      	lsrs	r3, r6, #29
 8000c36:	433b      	orrs	r3, r7
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4bda      	ldr	r3, [pc, #872]	; (8000fa4 <__aeabi_dmul+0x3a4>)
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	4699      	mov	r9, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	469b      	mov	fp, r3
 8000c44:	00f6      	lsls	r6, r6, #3
 8000c46:	4481      	add	r9, r0
 8000c48:	032b      	lsls	r3, r5, #12
 8000c4a:	0069      	lsls	r1, r5, #1
 8000c4c:	0b1b      	lsrs	r3, r3, #12
 8000c4e:	4652      	mov	r2, sl
 8000c50:	4698      	mov	r8, r3
 8000c52:	0d49      	lsrs	r1, r1, #21
 8000c54:	0fed      	lsrs	r5, r5, #31
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_dmul+0x5c>
 8000c5a:	e085      	b.n	8000d68 <__aeabi_dmul+0x168>
 8000c5c:	4bd0      	ldr	r3, [pc, #832]	; (8000fa0 <__aeabi_dmul+0x3a0>)
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d100      	bne.n	8000c64 <__aeabi_dmul+0x64>
 8000c62:	e073      	b.n	8000d4c <__aeabi_dmul+0x14c>
 8000c64:	4643      	mov	r3, r8
 8000c66:	00da      	lsls	r2, r3, #3
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	4652      	mov	r2, sl
 8000c70:	48cc      	ldr	r0, [pc, #816]	; (8000fa4 <__aeabi_dmul+0x3a4>)
 8000c72:	0f52      	lsrs	r2, r2, #29
 8000c74:	4684      	mov	ip, r0
 8000c76:	4313      	orrs	r3, r2
 8000c78:	4652      	mov	r2, sl
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	4461      	add	r1, ip
 8000c7e:	00d2      	lsls	r2, r2, #3
 8000c80:	4489      	add	r9, r1
 8000c82:	0021      	movs	r1, r4
 8000c84:	4069      	eors	r1, r5
 8000c86:	9100      	str	r1, [sp, #0]
 8000c88:	468c      	mov	ip, r1
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4449      	add	r1, r9
 8000c8e:	468a      	mov	sl, r1
 8000c90:	2f0f      	cmp	r7, #15
 8000c92:	d900      	bls.n	8000c96 <__aeabi_dmul+0x96>
 8000c94:	e090      	b.n	8000db8 <__aeabi_dmul+0x1b8>
 8000c96:	49c4      	ldr	r1, [pc, #784]	; (8000fa8 <__aeabi_dmul+0x3a8>)
 8000c98:	00bf      	lsls	r7, r7, #2
 8000c9a:	59cf      	ldr	r7, [r1, r7]
 8000c9c:	46bf      	mov	pc, r7
 8000c9e:	465b      	mov	r3, fp
 8000ca0:	433b      	orrs	r3, r7
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dmul+0xa8>
 8000ca6:	e16a      	b.n	8000f7e <__aeabi_dmul+0x37e>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2708      	movs	r7, #8
 8000cac:	2600      	movs	r6, #0
 8000cae:	4681      	mov	r9, r0
 8000cb0:	469b      	mov	fp, r3
 8000cb2:	e7c9      	b.n	8000c48 <__aeabi_dmul+0x48>
 8000cb4:	0032      	movs	r2, r6
 8000cb6:	4658      	mov	r0, fp
 8000cb8:	9b01      	ldr	r3, [sp, #4]
 8000cba:	4661      	mov	r1, ip
 8000cbc:	9100      	str	r1, [sp, #0]
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dmul+0xc4>
 8000cc2:	e075      	b.n	8000db0 <__aeabi_dmul+0x1b0>
 8000cc4:	2803      	cmp	r0, #3
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dmul+0xca>
 8000cc8:	e1fe      	b.n	80010c8 <__aeabi_dmul+0x4c8>
 8000cca:	2801      	cmp	r0, #1
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_dmul+0xd0>
 8000cce:	e12c      	b.n	8000f2a <__aeabi_dmul+0x32a>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	2700      	movs	r7, #0
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	033f      	lsls	r7, r7, #12
 8000cda:	0d2a      	lsrs	r2, r5, #20
 8000cdc:	0b3f      	lsrs	r7, r7, #12
 8000cde:	48b3      	ldr	r0, [pc, #716]	; (8000fac <__aeabi_dmul+0x3ac>)
 8000ce0:	0512      	lsls	r2, r2, #20
 8000ce2:	433a      	orrs	r2, r7
 8000ce4:	4002      	ands	r2, r0
 8000ce6:	051b      	lsls	r3, r3, #20
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	9a00      	ldr	r2, [sp, #0]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	07d1      	lsls	r1, r2, #31
 8000cf0:	085b      	lsrs	r3, r3, #1
 8000cf2:	430b      	orrs	r3, r1
 8000cf4:	0030      	movs	r0, r6
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	b007      	add	sp, #28
 8000cfa:	bc3c      	pop	{r2, r3, r4, r5}
 8000cfc:	4690      	mov	r8, r2
 8000cfe:	4699      	mov	r9, r3
 8000d00:	46a2      	mov	sl, r4
 8000d02:	46ab      	mov	fp, r5
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	465b      	mov	r3, fp
 8000d08:	433b      	orrs	r3, r7
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dmul+0x110>
 8000d0e:	e12f      	b.n	8000f70 <__aeabi_dmul+0x370>
 8000d10:	2f00      	cmp	r7, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dmul+0x116>
 8000d14:	e1a5      	b.n	8001062 <__aeabi_dmul+0x462>
 8000d16:	0038      	movs	r0, r7
 8000d18:	f000 fa54 	bl	80011c4 <__clzsi2>
 8000d1c:	0003      	movs	r3, r0
 8000d1e:	3b0b      	subs	r3, #11
 8000d20:	2b1c      	cmp	r3, #28
 8000d22:	dd00      	ble.n	8000d26 <__aeabi_dmul+0x126>
 8000d24:	e196      	b.n	8001054 <__aeabi_dmul+0x454>
 8000d26:	221d      	movs	r2, #29
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	465a      	mov	r2, fp
 8000d2c:	0001      	movs	r1, r0
 8000d2e:	40da      	lsrs	r2, r3
 8000d30:	465e      	mov	r6, fp
 8000d32:	3908      	subs	r1, #8
 8000d34:	408f      	lsls	r7, r1
 8000d36:	0013      	movs	r3, r2
 8000d38:	408e      	lsls	r6, r1
 8000d3a:	433b      	orrs	r3, r7
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	4b9c      	ldr	r3, [pc, #624]	; (8000fb0 <__aeabi_dmul+0x3b0>)
 8000d40:	2700      	movs	r7, #0
 8000d42:	1a1b      	subs	r3, r3, r0
 8000d44:	4699      	mov	r9, r3
 8000d46:	2300      	movs	r3, #0
 8000d48:	469b      	mov	fp, r3
 8000d4a:	e77d      	b.n	8000c48 <__aeabi_dmul+0x48>
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	4653      	mov	r3, sl
 8000d50:	430b      	orrs	r3, r1
 8000d52:	4993      	ldr	r1, [pc, #588]	; (8000fa0 <__aeabi_dmul+0x3a0>)
 8000d54:	468c      	mov	ip, r1
 8000d56:	44e1      	add	r9, ip
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_dmul+0x15e>
 8000d5c:	e11a      	b.n	8000f94 <__aeabi_dmul+0x394>
 8000d5e:	2202      	movs	r2, #2
 8000d60:	2002      	movs	r0, #2
 8000d62:	4317      	orrs	r7, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e78c      	b.n	8000c82 <__aeabi_dmul+0x82>
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dmul+0x16e>
 8000d6c:	e10d      	b.n	8000f8a <__aeabi_dmul+0x38a>
 8000d6e:	4643      	mov	r3, r8
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dmul+0x176>
 8000d74:	e181      	b.n	800107a <__aeabi_dmul+0x47a>
 8000d76:	4640      	mov	r0, r8
 8000d78:	f000 fa24 	bl	80011c4 <__clzsi2>
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	3a0b      	subs	r2, #11
 8000d80:	2a1c      	cmp	r2, #28
 8000d82:	dd00      	ble.n	8000d86 <__aeabi_dmul+0x186>
 8000d84:	e172      	b.n	800106c <__aeabi_dmul+0x46c>
 8000d86:	0001      	movs	r1, r0
 8000d88:	4643      	mov	r3, r8
 8000d8a:	3908      	subs	r1, #8
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	4698      	mov	r8, r3
 8000d90:	231d      	movs	r3, #29
 8000d92:	1a9a      	subs	r2, r3, r2
 8000d94:	4653      	mov	r3, sl
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	001a      	movs	r2, r3
 8000d9a:	4643      	mov	r3, r8
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	4652      	mov	r2, sl
 8000da0:	408a      	lsls	r2, r1
 8000da2:	4649      	mov	r1, r9
 8000da4:	1a08      	subs	r0, r1, r0
 8000da6:	4982      	ldr	r1, [pc, #520]	; (8000fb0 <__aeabi_dmul+0x3b0>)
 8000da8:	4689      	mov	r9, r1
 8000daa:	4481      	add	r9, r0
 8000dac:	2000      	movs	r0, #0
 8000dae:	e768      	b.n	8000c82 <__aeabi_dmul+0x82>
 8000db0:	4b7b      	ldr	r3, [pc, #492]	; (8000fa0 <__aeabi_dmul+0x3a0>)
 8000db2:	2700      	movs	r7, #0
 8000db4:	2600      	movs	r6, #0
 8000db6:	e78e      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8000db8:	0c14      	lsrs	r4, r2, #16
 8000dba:	0412      	lsls	r2, r2, #16
 8000dbc:	0c12      	lsrs	r2, r2, #16
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0c37      	lsrs	r7, r6, #16
 8000dc2:	0436      	lsls	r6, r6, #16
 8000dc4:	0c35      	lsrs	r5, r6, #16
 8000dc6:	4379      	muls	r1, r7
 8000dc8:	0028      	movs	r0, r5
 8000dca:	468c      	mov	ip, r1
 8000dcc:	002e      	movs	r6, r5
 8000dce:	4360      	muls	r0, r4
 8000dd0:	4460      	add	r0, ip
 8000dd2:	4683      	mov	fp, r0
 8000dd4:	4356      	muls	r6, r2
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	0c30      	lsrs	r0, r6, #16
 8000dda:	4680      	mov	r8, r0
 8000ddc:	4658      	mov	r0, fp
 8000dde:	4379      	muls	r1, r7
 8000de0:	4440      	add	r0, r8
 8000de2:	9102      	str	r1, [sp, #8]
 8000de4:	4584      	cmp	ip, r0
 8000de6:	d906      	bls.n	8000df6 <__aeabi_dmul+0x1f6>
 8000de8:	4688      	mov	r8, r1
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	0249      	lsls	r1, r1, #9
 8000dee:	468c      	mov	ip, r1
 8000df0:	44e0      	add	r8, ip
 8000df2:	4641      	mov	r1, r8
 8000df4:	9102      	str	r1, [sp, #8]
 8000df6:	0436      	lsls	r6, r6, #16
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	0c36      	lsrs	r6, r6, #16
 8000dfc:	0400      	lsls	r0, r0, #16
 8000dfe:	468b      	mov	fp, r1
 8000e00:	1981      	adds	r1, r0, r6
 8000e02:	0c1e      	lsrs	r6, r3, #16
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	9103      	str	r1, [sp, #12]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	4379      	muls	r1, r7
 8000e0e:	468c      	mov	ip, r1
 8000e10:	0028      	movs	r0, r5
 8000e12:	4375      	muls	r5, r6
 8000e14:	4465      	add	r5, ip
 8000e16:	46a8      	mov	r8, r5
 8000e18:	4358      	muls	r0, r3
 8000e1a:	0c05      	lsrs	r5, r0, #16
 8000e1c:	4445      	add	r5, r8
 8000e1e:	4377      	muls	r7, r6
 8000e20:	42a9      	cmp	r1, r5
 8000e22:	d903      	bls.n	8000e2c <__aeabi_dmul+0x22c>
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	0249      	lsls	r1, r1, #9
 8000e28:	468c      	mov	ip, r1
 8000e2a:	4467      	add	r7, ip
 8000e2c:	0c29      	lsrs	r1, r5, #16
 8000e2e:	468c      	mov	ip, r1
 8000e30:	0039      	movs	r1, r7
 8000e32:	0400      	lsls	r0, r0, #16
 8000e34:	0c00      	lsrs	r0, r0, #16
 8000e36:	042d      	lsls	r5, r5, #16
 8000e38:	182d      	adds	r5, r5, r0
 8000e3a:	4461      	add	r1, ip
 8000e3c:	44ab      	add	fp, r5
 8000e3e:	9105      	str	r1, [sp, #20]
 8000e40:	4659      	mov	r1, fp
 8000e42:	9104      	str	r1, [sp, #16]
 8000e44:	9901      	ldr	r1, [sp, #4]
 8000e46:	040f      	lsls	r7, r1, #16
 8000e48:	0c3f      	lsrs	r7, r7, #16
 8000e4a:	0c08      	lsrs	r0, r1, #16
 8000e4c:	0039      	movs	r1, r7
 8000e4e:	4351      	muls	r1, r2
 8000e50:	4342      	muls	r2, r0
 8000e52:	4690      	mov	r8, r2
 8000e54:	0002      	movs	r2, r0
 8000e56:	468c      	mov	ip, r1
 8000e58:	0c09      	lsrs	r1, r1, #16
 8000e5a:	468b      	mov	fp, r1
 8000e5c:	4362      	muls	r2, r4
 8000e5e:	437c      	muls	r4, r7
 8000e60:	4444      	add	r4, r8
 8000e62:	445c      	add	r4, fp
 8000e64:	45a0      	cmp	r8, r4
 8000e66:	d903      	bls.n	8000e70 <__aeabi_dmul+0x270>
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	0249      	lsls	r1, r1, #9
 8000e6c:	4688      	mov	r8, r1
 8000e6e:	4442      	add	r2, r8
 8000e70:	0c21      	lsrs	r1, r4, #16
 8000e72:	4688      	mov	r8, r1
 8000e74:	4661      	mov	r1, ip
 8000e76:	0409      	lsls	r1, r1, #16
 8000e78:	0c09      	lsrs	r1, r1, #16
 8000e7a:	468c      	mov	ip, r1
 8000e7c:	0039      	movs	r1, r7
 8000e7e:	4359      	muls	r1, r3
 8000e80:	4343      	muls	r3, r0
 8000e82:	4370      	muls	r0, r6
 8000e84:	437e      	muls	r6, r7
 8000e86:	0c0f      	lsrs	r7, r1, #16
 8000e88:	18f6      	adds	r6, r6, r3
 8000e8a:	0424      	lsls	r4, r4, #16
 8000e8c:	19be      	adds	r6, r7, r6
 8000e8e:	4464      	add	r4, ip
 8000e90:	4442      	add	r2, r8
 8000e92:	468c      	mov	ip, r1
 8000e94:	42b3      	cmp	r3, r6
 8000e96:	d903      	bls.n	8000ea0 <__aeabi_dmul+0x2a0>
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	025b      	lsls	r3, r3, #9
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	4440      	add	r0, r8
 8000ea0:	9b02      	ldr	r3, [sp, #8]
 8000ea2:	4661      	mov	r1, ip
 8000ea4:	4698      	mov	r8, r3
 8000ea6:	9b04      	ldr	r3, [sp, #16]
 8000ea8:	0437      	lsls	r7, r6, #16
 8000eaa:	4443      	add	r3, r8
 8000eac:	469b      	mov	fp, r3
 8000eae:	45ab      	cmp	fp, r5
 8000eb0:	41ad      	sbcs	r5, r5
 8000eb2:	426b      	negs	r3, r5
 8000eb4:	040d      	lsls	r5, r1, #16
 8000eb6:	9905      	ldr	r1, [sp, #20]
 8000eb8:	0c2d      	lsrs	r5, r5, #16
 8000eba:	468c      	mov	ip, r1
 8000ebc:	197f      	adds	r7, r7, r5
 8000ebe:	4467      	add	r7, ip
 8000ec0:	18fd      	adds	r5, r7, r3
 8000ec2:	46a8      	mov	r8, r5
 8000ec4:	465d      	mov	r5, fp
 8000ec6:	192d      	adds	r5, r5, r4
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	41a4      	sbcs	r4, r4
 8000ecc:	4693      	mov	fp, r2
 8000ece:	4264      	negs	r4, r4
 8000ed0:	46a4      	mov	ip, r4
 8000ed2:	44c3      	add	fp, r8
 8000ed4:	44dc      	add	ip, fp
 8000ed6:	428f      	cmp	r7, r1
 8000ed8:	41bf      	sbcs	r7, r7
 8000eda:	4598      	cmp	r8, r3
 8000edc:	419b      	sbcs	r3, r3
 8000ede:	4593      	cmp	fp, r2
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	41a4      	sbcs	r4, r4
 8000ee6:	425b      	negs	r3, r3
 8000ee8:	427f      	negs	r7, r7
 8000eea:	431f      	orrs	r7, r3
 8000eec:	0c36      	lsrs	r6, r6, #16
 8000eee:	4252      	negs	r2, r2
 8000ef0:	4264      	negs	r4, r4
 8000ef2:	19bf      	adds	r7, r7, r6
 8000ef4:	4322      	orrs	r2, r4
 8000ef6:	18bf      	adds	r7, r7, r2
 8000ef8:	4662      	mov	r2, ip
 8000efa:	1838      	adds	r0, r7, r0
 8000efc:	0243      	lsls	r3, r0, #9
 8000efe:	0dd2      	lsrs	r2, r2, #23
 8000f00:	9903      	ldr	r1, [sp, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	026a      	lsls	r2, r5, #9
 8000f06:	430a      	orrs	r2, r1
 8000f08:	1e50      	subs	r0, r2, #1
 8000f0a:	4182      	sbcs	r2, r0
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	0ded      	lsrs	r5, r5, #23
 8000f10:	432a      	orrs	r2, r5
 8000f12:	024e      	lsls	r6, r1, #9
 8000f14:	4332      	orrs	r2, r6
 8000f16:	01d9      	lsls	r1, r3, #7
 8000f18:	d400      	bmi.n	8000f1c <__aeabi_dmul+0x31c>
 8000f1a:	e0b3      	b.n	8001084 <__aeabi_dmul+0x484>
 8000f1c:	2601      	movs	r6, #1
 8000f1e:	0850      	lsrs	r0, r2, #1
 8000f20:	4032      	ands	r2, r6
 8000f22:	4302      	orrs	r2, r0
 8000f24:	07de      	lsls	r6, r3, #31
 8000f26:	4332      	orrs	r2, r6
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	4c22      	ldr	r4, [pc, #136]	; (8000fb4 <__aeabi_dmul+0x3b4>)
 8000f2c:	4454      	add	r4, sl
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	dd62      	ble.n	8000ff8 <__aeabi_dmul+0x3f8>
 8000f32:	0751      	lsls	r1, r2, #29
 8000f34:	d009      	beq.n	8000f4a <__aeabi_dmul+0x34a>
 8000f36:	200f      	movs	r0, #15
 8000f38:	4010      	ands	r0, r2
 8000f3a:	2804      	cmp	r0, #4
 8000f3c:	d005      	beq.n	8000f4a <__aeabi_dmul+0x34a>
 8000f3e:	1d10      	adds	r0, r2, #4
 8000f40:	4290      	cmp	r0, r2
 8000f42:	4192      	sbcs	r2, r2
 8000f44:	4252      	negs	r2, r2
 8000f46:	189b      	adds	r3, r3, r2
 8000f48:	0002      	movs	r2, r0
 8000f4a:	01d9      	lsls	r1, r3, #7
 8000f4c:	d504      	bpl.n	8000f58 <__aeabi_dmul+0x358>
 8000f4e:	2480      	movs	r4, #128	; 0x80
 8000f50:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <__aeabi_dmul+0x3b8>)
 8000f52:	00e4      	lsls	r4, r4, #3
 8000f54:	4003      	ands	r3, r0
 8000f56:	4454      	add	r4, sl
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <__aeabi_dmul+0x3bc>)
 8000f5a:	4284      	cmp	r4, r0
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_dmul+0x360>
 8000f5e:	e727      	b.n	8000db0 <__aeabi_dmul+0x1b0>
 8000f60:	075e      	lsls	r6, r3, #29
 8000f62:	025b      	lsls	r3, r3, #9
 8000f64:	08d2      	lsrs	r2, r2, #3
 8000f66:	0b1f      	lsrs	r7, r3, #12
 8000f68:	0563      	lsls	r3, r4, #21
 8000f6a:	4316      	orrs	r6, r2
 8000f6c:	0d5b      	lsrs	r3, r3, #21
 8000f6e:	e6b2      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8000f70:	2300      	movs	r3, #0
 8000f72:	4699      	mov	r9, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	2704      	movs	r7, #4
 8000f78:	2600      	movs	r6, #0
 8000f7a:	469b      	mov	fp, r3
 8000f7c:	e664      	b.n	8000c48 <__aeabi_dmul+0x48>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	4681      	mov	r9, r0
 8000f84:	270c      	movs	r7, #12
 8000f86:	469b      	mov	fp, r3
 8000f88:	e65e      	b.n	8000c48 <__aeabi_dmul+0x48>
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4317      	orrs	r7, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	e676      	b.n	8000c82 <__aeabi_dmul+0x82>
 8000f94:	2303      	movs	r3, #3
 8000f96:	2003      	movs	r0, #3
 8000f98:	431f      	orrs	r7, r3
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	e671      	b.n	8000c82 <__aeabi_dmul+0x82>
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	000007ff 	.word	0x000007ff
 8000fa4:	fffffc01 	.word	0xfffffc01
 8000fa8:	08006220 	.word	0x08006220
 8000fac:	800fffff 	.word	0x800fffff
 8000fb0:	fffffc0d 	.word	0xfffffc0d
 8000fb4:	000003ff 	.word	0x000003ff
 8000fb8:	feffffff 	.word	0xfeffffff
 8000fbc:	000007fe 	.word	0x000007fe
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2780      	movs	r7, #128	; 0x80
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	033f      	lsls	r7, r7, #12
 8000fc8:	2600      	movs	r6, #0
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <__aeabi_dmul+0x4d8>)
 8000fcc:	e683      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8000fce:	9b01      	ldr	r3, [sp, #4]
 8000fd0:	0032      	movs	r2, r6
 8000fd2:	46a4      	mov	ip, r4
 8000fd4:	4658      	mov	r0, fp
 8000fd6:	e670      	b.n	8000cba <__aeabi_dmul+0xba>
 8000fd8:	46ac      	mov	ip, r5
 8000fda:	e66e      	b.n	8000cba <__aeabi_dmul+0xba>
 8000fdc:	2780      	movs	r7, #128	; 0x80
 8000fde:	9901      	ldr	r1, [sp, #4]
 8000fe0:	033f      	lsls	r7, r7, #12
 8000fe2:	4239      	tst	r1, r7
 8000fe4:	d02d      	beq.n	8001042 <__aeabi_dmul+0x442>
 8000fe6:	423b      	tst	r3, r7
 8000fe8:	d12b      	bne.n	8001042 <__aeabi_dmul+0x442>
 8000fea:	431f      	orrs	r7, r3
 8000fec:	033f      	lsls	r7, r7, #12
 8000fee:	0b3f      	lsrs	r7, r7, #12
 8000ff0:	9500      	str	r5, [sp, #0]
 8000ff2:	0016      	movs	r6, r2
 8000ff4:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <__aeabi_dmul+0x4d8>)
 8000ff6:	e66e      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	1b2d      	subs	r5, r5, r4
 8000ffc:	2d38      	cmp	r5, #56	; 0x38
 8000ffe:	dd00      	ble.n	8001002 <__aeabi_dmul+0x402>
 8001000:	e666      	b.n	8000cd0 <__aeabi_dmul+0xd0>
 8001002:	2d1f      	cmp	r5, #31
 8001004:	dc40      	bgt.n	8001088 <__aeabi_dmul+0x488>
 8001006:	4835      	ldr	r0, [pc, #212]	; (80010dc <__aeabi_dmul+0x4dc>)
 8001008:	001c      	movs	r4, r3
 800100a:	4450      	add	r0, sl
 800100c:	0016      	movs	r6, r2
 800100e:	4082      	lsls	r2, r0
 8001010:	4084      	lsls	r4, r0
 8001012:	40ee      	lsrs	r6, r5
 8001014:	1e50      	subs	r0, r2, #1
 8001016:	4182      	sbcs	r2, r0
 8001018:	4334      	orrs	r4, r6
 800101a:	4314      	orrs	r4, r2
 800101c:	40eb      	lsrs	r3, r5
 800101e:	0762      	lsls	r2, r4, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_dmul+0x436>
 8001022:	220f      	movs	r2, #15
 8001024:	4022      	ands	r2, r4
 8001026:	2a04      	cmp	r2, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_dmul+0x436>
 800102a:	0022      	movs	r2, r4
 800102c:	1d14      	adds	r4, r2, #4
 800102e:	4294      	cmp	r4, r2
 8001030:	4180      	sbcs	r0, r0
 8001032:	4240      	negs	r0, r0
 8001034:	181b      	adds	r3, r3, r0
 8001036:	021a      	lsls	r2, r3, #8
 8001038:	d53e      	bpl.n	80010b8 <__aeabi_dmul+0x4b8>
 800103a:	2301      	movs	r3, #1
 800103c:	2700      	movs	r7, #0
 800103e:	2600      	movs	r6, #0
 8001040:	e649      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8001042:	2780      	movs	r7, #128	; 0x80
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	033f      	lsls	r7, r7, #12
 8001048:	431f      	orrs	r7, r3
 800104a:	033f      	lsls	r7, r7, #12
 800104c:	0b3f      	lsrs	r7, r7, #12
 800104e:	9400      	str	r4, [sp, #0]
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <__aeabi_dmul+0x4d8>)
 8001052:	e640      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 8001054:	0003      	movs	r3, r0
 8001056:	465a      	mov	r2, fp
 8001058:	3b28      	subs	r3, #40	; 0x28
 800105a:	409a      	lsls	r2, r3
 800105c:	2600      	movs	r6, #0
 800105e:	9201      	str	r2, [sp, #4]
 8001060:	e66d      	b.n	8000d3e <__aeabi_dmul+0x13e>
 8001062:	4658      	mov	r0, fp
 8001064:	f000 f8ae 	bl	80011c4 <__clzsi2>
 8001068:	3020      	adds	r0, #32
 800106a:	e657      	b.n	8000d1c <__aeabi_dmul+0x11c>
 800106c:	0003      	movs	r3, r0
 800106e:	4652      	mov	r2, sl
 8001070:	3b28      	subs	r3, #40	; 0x28
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	2200      	movs	r2, #0
 8001078:	e693      	b.n	8000da2 <__aeabi_dmul+0x1a2>
 800107a:	4650      	mov	r0, sl
 800107c:	f000 f8a2 	bl	80011c4 <__clzsi2>
 8001080:	3020      	adds	r0, #32
 8001082:	e67b      	b.n	8000d7c <__aeabi_dmul+0x17c>
 8001084:	46ca      	mov	sl, r9
 8001086:	e750      	b.n	8000f2a <__aeabi_dmul+0x32a>
 8001088:	201f      	movs	r0, #31
 800108a:	001e      	movs	r6, r3
 800108c:	4240      	negs	r0, r0
 800108e:	1b04      	subs	r4, r0, r4
 8001090:	40e6      	lsrs	r6, r4
 8001092:	2d20      	cmp	r5, #32
 8001094:	d003      	beq.n	800109e <__aeabi_dmul+0x49e>
 8001096:	4c12      	ldr	r4, [pc, #72]	; (80010e0 <__aeabi_dmul+0x4e0>)
 8001098:	4454      	add	r4, sl
 800109a:	40a3      	lsls	r3, r4
 800109c:	431a      	orrs	r2, r3
 800109e:	1e50      	subs	r0, r2, #1
 80010a0:	4182      	sbcs	r2, r0
 80010a2:	4332      	orrs	r2, r6
 80010a4:	2607      	movs	r6, #7
 80010a6:	2700      	movs	r7, #0
 80010a8:	4016      	ands	r6, r2
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dmul+0x4c0>
 80010ac:	200f      	movs	r0, #15
 80010ae:	2300      	movs	r3, #0
 80010b0:	4010      	ands	r0, r2
 80010b2:	0014      	movs	r4, r2
 80010b4:	2804      	cmp	r0, #4
 80010b6:	d1b9      	bne.n	800102c <__aeabi_dmul+0x42c>
 80010b8:	0022      	movs	r2, r4
 80010ba:	075e      	lsls	r6, r3, #29
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	0b1f      	lsrs	r7, r3, #12
 80010c0:	08d2      	lsrs	r2, r2, #3
 80010c2:	4316      	orrs	r6, r2
 80010c4:	2300      	movs	r3, #0
 80010c6:	e606      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 80010c8:	2780      	movs	r7, #128	; 0x80
 80010ca:	033f      	lsls	r7, r7, #12
 80010cc:	431f      	orrs	r7, r3
 80010ce:	033f      	lsls	r7, r7, #12
 80010d0:	0b3f      	lsrs	r7, r7, #12
 80010d2:	0016      	movs	r6, r2
 80010d4:	4b00      	ldr	r3, [pc, #0]	; (80010d8 <__aeabi_dmul+0x4d8>)
 80010d6:	e5fe      	b.n	8000cd6 <__aeabi_dmul+0xd6>
 80010d8:	000007ff 	.word	0x000007ff
 80010dc:	0000041e 	.word	0x0000041e
 80010e0:	0000043e 	.word	0x0000043e

080010e4 <__aeabi_d2iz>:
 80010e4:	b530      	push	{r4, r5, lr}
 80010e6:	4d14      	ldr	r5, [pc, #80]	; (8001138 <__aeabi_d2iz+0x54>)
 80010e8:	030a      	lsls	r2, r1, #12
 80010ea:	004b      	lsls	r3, r1, #1
 80010ec:	0b12      	lsrs	r2, r2, #12
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	0fc9      	lsrs	r1, r1, #31
 80010f2:	2400      	movs	r4, #0
 80010f4:	42ab      	cmp	r3, r5
 80010f6:	dd11      	ble.n	800111c <__aeabi_d2iz+0x38>
 80010f8:	4c10      	ldr	r4, [pc, #64]	; (800113c <__aeabi_d2iz+0x58>)
 80010fa:	42a3      	cmp	r3, r4
 80010fc:	dc10      	bgt.n	8001120 <__aeabi_d2iz+0x3c>
 80010fe:	2480      	movs	r4, #128	; 0x80
 8001100:	0364      	lsls	r4, r4, #13
 8001102:	4322      	orrs	r2, r4
 8001104:	4c0e      	ldr	r4, [pc, #56]	; (8001140 <__aeabi_d2iz+0x5c>)
 8001106:	1ae4      	subs	r4, r4, r3
 8001108:	2c1f      	cmp	r4, #31
 800110a:	dd0c      	ble.n	8001126 <__aeabi_d2iz+0x42>
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <__aeabi_d2iz+0x60>)
 800110e:	1ac3      	subs	r3, r0, r3
 8001110:	40da      	lsrs	r2, r3
 8001112:	0013      	movs	r3, r2
 8001114:	425c      	negs	r4, r3
 8001116:	2900      	cmp	r1, #0
 8001118:	d100      	bne.n	800111c <__aeabi_d2iz+0x38>
 800111a:	001c      	movs	r4, r3
 800111c:	0020      	movs	r0, r4
 800111e:	bd30      	pop	{r4, r5, pc}
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <__aeabi_d2iz+0x64>)
 8001122:	18cc      	adds	r4, r1, r3
 8001124:	e7fa      	b.n	800111c <__aeabi_d2iz+0x38>
 8001126:	4d09      	ldr	r5, [pc, #36]	; (800114c <__aeabi_d2iz+0x68>)
 8001128:	40e0      	lsrs	r0, r4
 800112a:	46ac      	mov	ip, r5
 800112c:	4463      	add	r3, ip
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	4303      	orrs	r3, r0
 8001134:	e7ee      	b.n	8001114 <__aeabi_d2iz+0x30>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000003fe 	.word	0x000003fe
 800113c:	0000041d 	.word	0x0000041d
 8001140:	00000433 	.word	0x00000433
 8001144:	00000413 	.word	0x00000413
 8001148:	7fffffff 	.word	0x7fffffff
 800114c:	fffffbed 	.word	0xfffffbed

08001150 <__aeabi_i2d>:
 8001150:	b570      	push	{r4, r5, r6, lr}
 8001152:	2800      	cmp	r0, #0
 8001154:	d02d      	beq.n	80011b2 <__aeabi_i2d+0x62>
 8001156:	17c3      	asrs	r3, r0, #31
 8001158:	18c5      	adds	r5, r0, r3
 800115a:	405d      	eors	r5, r3
 800115c:	0fc4      	lsrs	r4, r0, #31
 800115e:	0028      	movs	r0, r5
 8001160:	f000 f830 	bl	80011c4 <__clzsi2>
 8001164:	4b15      	ldr	r3, [pc, #84]	; (80011bc <__aeabi_i2d+0x6c>)
 8001166:	1a1b      	subs	r3, r3, r0
 8001168:	055b      	lsls	r3, r3, #21
 800116a:	0d5b      	lsrs	r3, r3, #21
 800116c:	280a      	cmp	r0, #10
 800116e:	dd15      	ble.n	800119c <__aeabi_i2d+0x4c>
 8001170:	380b      	subs	r0, #11
 8001172:	4085      	lsls	r5, r0
 8001174:	2200      	movs	r2, #0
 8001176:	032d      	lsls	r5, r5, #12
 8001178:	0b2d      	lsrs	r5, r5, #12
 800117a:	2100      	movs	r1, #0
 800117c:	0010      	movs	r0, r2
 800117e:	032d      	lsls	r5, r5, #12
 8001180:	0d0a      	lsrs	r2, r1, #20
 8001182:	0b2d      	lsrs	r5, r5, #12
 8001184:	0512      	lsls	r2, r2, #20
 8001186:	432a      	orrs	r2, r5
 8001188:	4d0d      	ldr	r5, [pc, #52]	; (80011c0 <__aeabi_i2d+0x70>)
 800118a:	051b      	lsls	r3, r3, #20
 800118c:	402a      	ands	r2, r5
 800118e:	4313      	orrs	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	07e4      	lsls	r4, r4, #31
 8001194:	085b      	lsrs	r3, r3, #1
 8001196:	4323      	orrs	r3, r4
 8001198:	0019      	movs	r1, r3
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	0002      	movs	r2, r0
 800119e:	0029      	movs	r1, r5
 80011a0:	3215      	adds	r2, #21
 80011a2:	4091      	lsls	r1, r2
 80011a4:	000a      	movs	r2, r1
 80011a6:	210b      	movs	r1, #11
 80011a8:	1a08      	subs	r0, r1, r0
 80011aa:	40c5      	lsrs	r5, r0
 80011ac:	032d      	lsls	r5, r5, #12
 80011ae:	0b2d      	lsrs	r5, r5, #12
 80011b0:	e7e3      	b.n	800117a <__aeabi_i2d+0x2a>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2300      	movs	r3, #0
 80011b6:	2500      	movs	r5, #0
 80011b8:	2200      	movs	r2, #0
 80011ba:	e7de      	b.n	800117a <__aeabi_i2d+0x2a>
 80011bc:	0000041e 	.word	0x0000041e
 80011c0:	800fffff 	.word	0x800fffff

080011c4 <__clzsi2>:
 80011c4:	211c      	movs	r1, #28
 80011c6:	2301      	movs	r3, #1
 80011c8:	041b      	lsls	r3, r3, #16
 80011ca:	4298      	cmp	r0, r3
 80011cc:	d301      	bcc.n	80011d2 <__clzsi2+0xe>
 80011ce:	0c00      	lsrs	r0, r0, #16
 80011d0:	3910      	subs	r1, #16
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	4298      	cmp	r0, r3
 80011d6:	d301      	bcc.n	80011dc <__clzsi2+0x18>
 80011d8:	0a00      	lsrs	r0, r0, #8
 80011da:	3908      	subs	r1, #8
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	4298      	cmp	r0, r3
 80011e0:	d301      	bcc.n	80011e6 <__clzsi2+0x22>
 80011e2:	0900      	lsrs	r0, r0, #4
 80011e4:	3904      	subs	r1, #4
 80011e6:	a202      	add	r2, pc, #8	; (adr r2, 80011f0 <__clzsi2+0x2c>)
 80011e8:	5c10      	ldrb	r0, [r2, r0]
 80011ea:	1840      	adds	r0, r0, r1
 80011ec:	4770      	bx	lr
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	02020304 	.word	0x02020304
 80011f4:	01010101 	.word	0x01010101
	...

08001200 <__clzdi2>:
 8001200:	b510      	push	{r4, lr}
 8001202:	2900      	cmp	r1, #0
 8001204:	d103      	bne.n	800120e <__clzdi2+0xe>
 8001206:	f7ff ffdd 	bl	80011c4 <__clzsi2>
 800120a:	3020      	adds	r0, #32
 800120c:	e002      	b.n	8001214 <__clzdi2+0x14>
 800120e:	1c08      	adds	r0, r1, #0
 8001210:	f7ff ffd8 	bl	80011c4 <__clzsi2>
 8001214:	bd10      	pop	{r4, pc}
 8001216:	46c0      	nop			; (mov r8, r8)

08001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>:
// Created by Jason Kaufmann on 1/26/2021.
//

#define HANDSHAKE_DIGITALOUT_H

DigitalPin::DigitalPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	1dbb      	adds	r3, r7, #6
 8001224:	801a      	strh	r2, [r3, #0]
	_channel = GPIOx;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	601a      	str	r2, [r3, #0]
	_pinNumber = GPIO_Pin;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	1dba      	adds	r2, r7, #6
 8001230:	8812      	ldrh	r2, [r2, #0]
 8001232:	809a      	strh	r2, [r3, #4]
}
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZN10DigitalPin5writeEi>:

void DigitalPin::write(int setOrReset) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
        if (setOrReset) {
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <_ZN10DigitalPin5writeEi+0x22>
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_SET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	0019      	movs	r1, r3
 800125a:	f002 fa6a 	bl	8003732 <HAL_GPIO_WritePin>
        } else {
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_RESET);
        }
    }
 800125e:	e007      	b.n	8001270 <_ZN10DigitalPin5writeEi+0x32>
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_RESET);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	0019      	movs	r1, r3
 800126c:	f002 fa61 	bl	8003732 <HAL_GPIO_WritePin>
    }
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN10DigitalPin4readEv>:
GPIO_PinState DigitalPin::read(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
        return HAL_GPIO_ReadPin(_channel, _pinNumber);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	0019      	movs	r1, r3
 800128a:	0010      	movs	r0, r2
 800128c:	f002 fa34 	bl	80036f8 <HAL_GPIO_ReadPin>
 8001290:	0003      	movs	r3, r0
    }
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt>:
#include "LCDController.h"
#include "main.h"
#include "string.h"
#include <string>

LCDController::LCDController(GPIO_TypeDef *GPIOx, uint16_t rsPin, uint16_t rwPin, uint16_t ePin,
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	0019      	movs	r1, r3
 80012a8:	1dbb      	adds	r3, r7, #6
 80012aa:	801a      	strh	r2, [r3, #0]
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	1c0a      	adds	r2, r1, #0
 80012b0:	801a      	strh	r2, [r3, #0]
        uint16_t db0Pin, uint16_t db1Pin, uint16_t db2Pin, uint16_t db3Pin,
        uint16_t db4Pin, uint16_t db5Pin, uint16_t db6Pin, uint16_t db7Pin) :
        LCDMapping{{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13},
                   {0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53},
                   {0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27},
                   {0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67}}
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	222e      	movs	r2, #46	; 0x2e
 80012b6:	495c      	ldr	r1, [pc, #368]	; (8001428 <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt+0x18c>)
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	2250      	movs	r2, #80	; 0x50
 80012bc:	0018      	movs	r0, r3
 80012be:	f004 fad2 	bl	8005866 <memcpy>
{
	rs = new DigitalPin(GPIOx, rsPin);
 80012c2:	2008      	movs	r0, #8
 80012c4:	f004 f9c8 	bl	8005658 <_Znwj>
 80012c8:	0003      	movs	r3, r0
 80012ca:	001c      	movs	r4, r3
 80012cc:	1dbb      	adds	r3, r7, #6
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	0019      	movs	r1, r3
 80012d4:	0020      	movs	r0, r4
 80012d6:	f7ff ff9f 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	601c      	str	r4, [r3, #0]
	rw = new DigitalPin(GPIOx, rwPin);
 80012de:	2008      	movs	r0, #8
 80012e0:	f004 f9ba 	bl	8005658 <_Znwj>
 80012e4:	0003      	movs	r3, r0
 80012e6:	001c      	movs	r4, r3
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	881a      	ldrh	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	0019      	movs	r1, r3
 80012f0:	0020      	movs	r0, r4
 80012f2:	f7ff ff91 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	605c      	str	r4, [r3, #4]
	e = new DigitalPin(GPIOx, ePin);
 80012fa:	2008      	movs	r0, #8
 80012fc:	f004 f9ac 	bl	8005658 <_Znwj>
 8001300:	0003      	movs	r3, r0
 8001302:	001c      	movs	r4, r3
 8001304:	2320      	movs	r3, #32
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	0019      	movs	r1, r3
 800130e:	0020      	movs	r0, r4
 8001310:	f7ff ff82 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	609c      	str	r4, [r3, #8]
	db0 = new DigitalPin(GPIOx, db0Pin);
 8001318:	2008      	movs	r0, #8
 800131a:	f004 f99d 	bl	8005658 <_Znwj>
 800131e:	0003      	movs	r3, r0
 8001320:	001c      	movs	r4, r3
 8001322:	2324      	movs	r3, #36	; 0x24
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0019      	movs	r1, r3
 800132c:	0020      	movs	r0, r4
 800132e:	f7ff ff73 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	60dc      	str	r4, [r3, #12]
	db1 = new DigitalPin(GPIOx, db1Pin);
 8001336:	2008      	movs	r0, #8
 8001338:	f004 f98e 	bl	8005658 <_Znwj>
 800133c:	0003      	movs	r3, r0
 800133e:	001c      	movs	r4, r3
 8001340:	2328      	movs	r3, #40	; 0x28
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	881a      	ldrh	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	0019      	movs	r1, r3
 800134a:	0020      	movs	r0, r4
 800134c:	f7ff ff64 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	611c      	str	r4, [r3, #16]
	db2 = new DigitalPin(GPIOx, db2Pin);
 8001354:	2008      	movs	r0, #8
 8001356:	f004 f97f 	bl	8005658 <_Znwj>
 800135a:	0003      	movs	r3, r0
 800135c:	001c      	movs	r4, r3
 800135e:	232c      	movs	r3, #44	; 0x2c
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	881a      	ldrh	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	0019      	movs	r1, r3
 8001368:	0020      	movs	r0, r4
 800136a:	f7ff ff55 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	615c      	str	r4, [r3, #20]
	db3 = new DigitalPin(GPIOx, db3Pin);
 8001372:	2008      	movs	r0, #8
 8001374:	f004 f970 	bl	8005658 <_Znwj>
 8001378:	0003      	movs	r3, r0
 800137a:	001c      	movs	r4, r3
 800137c:	2330      	movs	r3, #48	; 0x30
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	0019      	movs	r1, r3
 8001386:	0020      	movs	r0, r4
 8001388:	f7ff ff46 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	619c      	str	r4, [r3, #24]
	db4 = new DigitalPin(GPIOx, db4Pin);
 8001390:	2008      	movs	r0, #8
 8001392:	f004 f961 	bl	8005658 <_Znwj>
 8001396:	0003      	movs	r3, r0
 8001398:	001c      	movs	r4, r3
 800139a:	2334      	movs	r3, #52	; 0x34
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	0019      	movs	r1, r3
 80013a4:	0020      	movs	r0, r4
 80013a6:	f7ff ff37 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	61dc      	str	r4, [r3, #28]
	db5 = new DigitalPin(GPIOx, db5Pin);
 80013ae:	2008      	movs	r0, #8
 80013b0:	f004 f952 	bl	8005658 <_Znwj>
 80013b4:	0003      	movs	r3, r0
 80013b6:	001c      	movs	r4, r3
 80013b8:	2338      	movs	r3, #56	; 0x38
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	0019      	movs	r1, r3
 80013c2:	0020      	movs	r0, r4
 80013c4:	f7ff ff28 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	621c      	str	r4, [r3, #32]
	db6 = new DigitalPin(GPIOx, db6Pin);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f004 f943 	bl	8005658 <_Znwj>
 80013d2:	0003      	movs	r3, r0
 80013d4:	001c      	movs	r4, r3
 80013d6:	233c      	movs	r3, #60	; 0x3c
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	0019      	movs	r1, r3
 80013e0:	0020      	movs	r0, r4
 80013e2:	f7ff ff19 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	625c      	str	r4, [r3, #36]	; 0x24
	db7 = new DigitalPin(GPIOx, db7Pin);
 80013ea:	2008      	movs	r0, #8
 80013ec:	f004 f934 	bl	8005658 <_Znwj>
 80013f0:	0003      	movs	r3, r0
 80013f2:	001c      	movs	r4, r3
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	18fb      	adds	r3, r7, r3
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	0019      	movs	r1, r3
 80013fe:	0020      	movs	r0, r4
 8001400:	f7ff ff0a 	bl	8001218 <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	629c      	str	r4, [r3, #40]	; 0x28

	font_bit = 0;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	222d      	movs	r2, #45	; 0x2d
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]
	lines_bit = 0;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	222c      	movs	r2, #44	; 0x2c
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]

	HAL_Delay(50);          // LCD initialisation takes 40ms, be a little conservative.
 8001418:	2032      	movs	r0, #50	; 0x32
 800141a:	f001 fa1d 	bl	8002858 <HAL_Delay>

}
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b005      	add	sp, #20
 8001426:	bd90      	pop	{r4, r7, pc}
 8001428:	0800614c 	.word	0x0800614c

0800142c <_ZN13LCDController4initEv>:

void LCDController::init(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	e->write(0);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2100      	movs	r1, #0
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff feff 	bl	800123e <_ZN10DigitalPin5writeEi>
	instruction(0x30);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2130      	movs	r1, #48	; 0x30
 8001444:	0018      	movs	r0, r3
 8001446:	f000 f90e 	bl	8001666 <_ZN13LCDController11instructionEh>
	HAL_Delay(30);
 800144a:	201e      	movs	r0, #30
 800144c:	f001 fa04 	bl	8002858 <HAL_Delay>
	instruction(0x30);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2130      	movs	r1, #48	; 0x30
 8001454:	0018      	movs	r0, r3
 8001456:	f000 f906 	bl	8001666 <_ZN13LCDController11instructionEh>
	HAL_Delay(10);
 800145a:	200a      	movs	r0, #10
 800145c:	f001 f9fc 	bl	8002858 <HAL_Delay>
	instruction(0x30);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2130      	movs	r1, #48	; 0x30
 8001464:	0018      	movs	r0, r3
 8001466:	f000 f8fe 	bl	8001666 <_ZN13LCDController11instructionEh>
	HAL_Delay(10);
 800146a:	200a      	movs	r0, #10
 800146c:	f001 f9f4 	bl	8002858 <HAL_Delay>
	instruction(0x38);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2138      	movs	r1, #56	; 0x38
 8001474:	0018      	movs	r0, r3
 8001476:	f000 f8f6 	bl	8001666 <_ZN13LCDController11instructionEh>
	instruction(0x10);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2110      	movs	r1, #16
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f8f1 	bl	8001666 <_ZN13LCDController11instructionEh>
	instruction(0x0c);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	210c      	movs	r1, #12
 8001488:	0018      	movs	r0, r3
 800148a:	f000 f8ec 	bl	8001666 <_ZN13LCDController11instructionEh>
	instruction(0x06);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2106      	movs	r1, #6
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f8e7 	bl	8001666 <_ZN13LCDController11instructionEh>
	data(0x00); //need to burn one for some reason
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2100      	movs	r1, #0
 800149c:	0018      	movs	r0, r3
 800149e:	f000 f8d0 	bl	8001642 <_ZN13LCDController4dataEh>
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_ZN13LCDController9setCursorEii>:

void LCDController::setCursor(int x, int y) {
 80014aa:	b5b0      	push	{r4, r5, r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
    uint8_t index = LCDMapping[y][x];
 80014b6:	2517      	movs	r5, #23
 80014b8:	1979      	adds	r1, r7, r5
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	242e      	movs	r4, #46	; 0x2e
 80014c0:	0013      	movs	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	189b      	adds	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	18c2      	adds	r2, r0, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	18d3      	adds	r3, r2, r3
 80014ce:	191b      	adds	r3, r3, r4
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	700b      	strb	r3, [r1, #0]
    instruction(0x80 | index);
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2280      	movs	r2, #128	; 0x80
 80014da:	4252      	negs	r2, r2
 80014dc:	4313      	orrs	r3, r2
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0011      	movs	r1, r2
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f8be 	bl	8001666 <_ZN13LCDController11instructionEh>
}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b006      	add	sp, #24
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}

080014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void LCDController::print(std::string sentence) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
	for(int i=0; i < sentence.length(); i++) {
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	0018      	movs	r0, r3
 8001504:	f004 f91a 	bl	800573c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001508:	0002      	movs	r2, r0
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4293      	cmp	r3, r2
 800150e:	419b      	sbcs	r3, r3
 8001510:	425b      	negs	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d015      	beq.n	8001544 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
		char letter = sentence[i];
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f004 f90e 	bl	8005740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001524:	0002      	movs	r2, r0
 8001526:	210b      	movs	r1, #11
 8001528:	187b      	adds	r3, r7, r1
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	701a      	strb	r2, [r3, #0]
		data((uint8_t)letter);
 800152e:	187b      	adds	r3, r7, r1
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f883 	bl	8001642 <_ZN13LCDController4dataEh>
	for(int i=0; i < sentence.length(); i++) {
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e7dd      	b.n	8001500 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
	}
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bd80      	pop	{r7, pc}

0800154c <_ZN13LCDController5writeEii>:

    instruction(32 | 16 | lines_bit | font_bit);
}


void LCDController::write(int c, int nrs) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
    int old_rs = rs->read();
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff fe8b 	bl	8001278 <_ZN10DigitalPin4readEv>
 8001562:	0003      	movs	r3, r0
 8001564:	617b      	str	r3, [r7, #20]

    db0->write(c & 1);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68d8      	ldr	r0, [r3, #12]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	f7ff fe64 	bl	800123e <_ZN10DigitalPin5writeEi>
	db1->write(c>>1 & 1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6918      	ldr	r0, [r3, #16]
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	105b      	asrs	r3, r3, #1
 800157e:	2201      	movs	r2, #1
 8001580:	4013      	ands	r3, r2
 8001582:	0019      	movs	r1, r3
 8001584:	f7ff fe5b 	bl	800123e <_ZN10DigitalPin5writeEi>
	db2->write(c>>2 & 1);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6958      	ldr	r0, [r3, #20]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	109b      	asrs	r3, r3, #2
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	0019      	movs	r1, r3
 8001596:	f7ff fe52 	bl	800123e <_ZN10DigitalPin5writeEi>
	db3->write(c>>3 & 1);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6998      	ldr	r0, [r3, #24]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	10db      	asrs	r3, r3, #3
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	f7ff fe49 	bl	800123e <_ZN10DigitalPin5writeEi>
	db4->write(c>>4 & 1);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	69d8      	ldr	r0, [r3, #28]
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	111b      	asrs	r3, r3, #4
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	0019      	movs	r1, r3
 80015ba:	f7ff fe40 	bl	800123e <_ZN10DigitalPin5writeEi>
	db5->write(c>>5 & 1);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a18      	ldr	r0, [r3, #32]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	115b      	asrs	r3, r3, #5
 80015c6:	2201      	movs	r2, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	f7ff fe37 	bl	800123e <_ZN10DigitalPin5writeEi>
	db6->write(c>>6 & 1);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	119b      	asrs	r3, r3, #6
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	f7ff fe2e 	bl	800123e <_ZN10DigitalPin5writeEi>
	db7->write(c>>7 & 1);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	11db      	asrs	r3, r3, #7
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	f7ff fe25 	bl	800123e <_ZN10DigitalPin5writeEi>

    // Should check Busy Flag here.
    rs->write(nrs);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fe1e 	bl	800123e <_ZN10DigitalPin5writeEi>
    rw->write(0);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2100      	movs	r1, #0
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fe18 	bl	800123e <_ZN10DigitalPin5writeEi>

    e->write(1);  // E must be on for min 480ns then drop to zero.  Trigger is on falling signal.
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2101      	movs	r1, #1
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fe12 	bl	800123e <_ZN10DigitalPin5writeEi>

    // added extra wait state
    HAL_Delay(1);  // Needed the equivalent of this on the Raspberry Pi.
 800161a:	2001      	movs	r0, #1
 800161c:	f001 f91c 	bl	8002858 <HAL_Delay>

    // Tdsw Data Setup Width time at least 80ns.  No need for delay on slow processor.
    e->write(0); //
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2100      	movs	r1, #0
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff fe09 	bl	800123e <_ZN10DigitalPin5writeEi>
    rs->write(old_rs);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	0011      	movs	r1, r2
 8001634:	0018      	movs	r0, r3
 8001636:	f7ff fe02 	bl	800123e <_ZN10DigitalPin5writeEi>
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b006      	add	sp, #24
 8001640:	bd80      	pop	{r7, pc}

08001642 <_ZN13LCDController4dataEh>:

void LCDController::data(uint8_t c) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	000a      	movs	r2, r1
 800164c:	1cfb      	adds	r3, r7, #3
 800164e:	701a      	strb	r2, [r3, #0]
    write(c, 1);
 8001650:	1cfb      	adds	r3, r7, #3
 8001652:	7819      	ldrb	r1, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff ff77 	bl	800154c <_ZN13LCDController5writeEii>
}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b002      	add	sp, #8
 8001664:	bd80      	pop	{r7, pc}

08001666 <_ZN13LCDController11instructionEh>:
void LCDController::instruction(uint8_t c) {
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
 800166e:	000a      	movs	r2, r1
 8001670:	1cfb      	adds	r3, r7, #3
 8001672:	701a      	strb	r2, [r3, #0]
    write(c, 0);
 8001674:	1cfb      	adds	r3, r7, #3
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff ff65 	bl	800154c <_ZN13LCDController5writeEii>
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}

0800168a <_ZN13LCDController5clearEv>:

void LCDController::clear(void) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
    instruction(1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2101      	movs	r1, #1
 8001696:	0018      	movs	r0, r3
 8001698:	f7ff ffe5 	bl	8001666 <_ZN13LCDController11instructionEh>
    delayMicroseconds(1520); // clear takes 1.52 ms.
 800169c:	23be      	movs	r3, #190	; 0xbe
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	0018      	movs	r0, r3
 80016a2:	f000 fd03 	bl	80020ac <delayMicroseconds>
}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_ZN13LCDController4homeEv>:
void LCDController::home(void) {
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    instruction(2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2102      	movs	r1, #2
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff ffd3 	bl	8001666 <_ZN13LCDController11instructionEh>
    delayMicroseconds(1520); // home takes 1.52 ms.
 80016c0:	23be      	movs	r3, #190	; 0xbe
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 fcf1 	bl	80020ac <delayMicroseconds>
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <_ZNSt7__cxx119to_stringEi+0x24>)
 80016e2:	4906      	ldr	r1, [pc, #24]	; (80016fc <_ZNSt7__cxx119to_stringEi+0x28>)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	0013      	movs	r3, r2
 80016ea:	2210      	movs	r2, #16
 80016ec:	f000 fbc4 	bl	8001e78 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	0800619c 	.word	0x0800619c
 80016fc:	08005b11 	.word	0x08005b11

08001700 <CppMain>:
	STARTUP,
	RUNNING_TEST,
	SHUTTING_DOWN
};

void CppMain() {
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	4cb8      	ldr	r4, [pc, #736]	; (80019e4 <CppMain+0x2e4>)
 8001704:	44a5      	add	sp, r4
 8001706:	af1c      	add	r7, sp, #112	; 0x70

	LCDController myLCD(GPIOB, GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13,
	                GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9,
	                GPIO_PIN_8, GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_5);
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	01d9      	lsls	r1, r3, #7
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	021a      	lsls	r2, r3, #8
 8001710:	4cb5      	ldr	r4, [pc, #724]	; (80019e8 <CppMain+0x2e8>)
 8001712:	2508      	movs	r5, #8
 8001714:	1978      	adds	r0, r7, r5
 8001716:	2320      	movs	r3, #32
 8001718:	9308      	str	r3, [sp, #32]
 800171a:	2340      	movs	r3, #64	; 0x40
 800171c:	9307      	str	r3, [sp, #28]
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	9306      	str	r3, [sp, #24]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	9305      	str	r3, [sp, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	9304      	str	r3, [sp, #16]
 800172e:	2380      	movs	r3, #128	; 0x80
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	9303      	str	r3, [sp, #12]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	9302      	str	r3, [sp, #8]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	015b      	lsls	r3, r3, #5
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	000b      	movs	r3, r1
 8001748:	0021      	movs	r1, r4
 800174a:	f7ff fda7 	bl	800129c <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt>

    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_SET); //keep alive. Do not write low or it will turn off
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <CppMain+0x2e8>)
 8001750:	2201      	movs	r2, #1
 8001752:	2110      	movs	r1, #16
 8001754:	0018      	movs	r0, r3
 8001756:	f001 ffec 	bl	8003732 <HAL_GPIO_WritePin>

    startUpLCD(myLCD);
 800175a:	4ba4      	ldr	r3, [pc, #656]	; (80019ec <CppMain+0x2ec>)
 800175c:	22c4      	movs	r2, #196	; 0xc4
 800175e:	0052      	lsls	r2, r2, #1
 8001760:	2108      	movs	r1, #8
 8001762:	468c      	mov	ip, r1
 8001764:	44bc      	add	ip, r7
 8001766:	4462      	add	r2, ip
 8001768:	18d4      	adds	r4, r2, r3
 800176a:	466b      	mov	r3, sp
 800176c:	0018      	movs	r0, r3
 800176e:	0023      	movs	r3, r4
 8001770:	3310      	adds	r3, #16
 8001772:	2270      	movs	r2, #112	; 0x70
 8001774:	0019      	movs	r1, r3
 8001776:	f004 f876 	bl	8005866 <memcpy>
 800177a:	6820      	ldr	r0, [r4, #0]
 800177c:	6861      	ldr	r1, [r4, #4]
 800177e:	68a2      	ldr	r2, [r4, #8]
 8001780:	68e3      	ldr	r3, [r4, #12]
 8001782:	f000 fb15 	bl	8001db0 <_Z10startUpLCD13LCDController>

    calibrateSensors();
 8001786:	f000 fabd 	bl	8001d04 <_Z16calibrateSensorsv>

    myLCD.clear();
 800178a:	197b      	adds	r3, r7, r5
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff ff7c 	bl	800168a <_ZN13LCDController5clearEv>
    myLCD.setCursor(7,0);
 8001792:	197b      	adds	r3, r7, r5
 8001794:	2200      	movs	r2, #0
 8001796:	2107      	movs	r1, #7
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fe86 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print("READY");
 800179e:	2498      	movs	r4, #152	; 0x98
 80017a0:	197b      	adds	r3, r7, r5
 80017a2:	191b      	adds	r3, r3, r4
 80017a4:	0018      	movs	r0, r3
 80017a6:	f003 ff6f 	bl	8005688 <_ZNSaIcEC1Ev>
 80017aa:	002e      	movs	r6, r5
 80017ac:	19bb      	adds	r3, r7, r6
 80017ae:	191a      	adds	r2, r3, r4
 80017b0:	498f      	ldr	r1, [pc, #572]	; (80019f0 <CppMain+0x2f0>)
 80017b2:	2580      	movs	r5, #128	; 0x80
 80017b4:	19bb      	adds	r3, r7, r6
 80017b6:	195b      	adds	r3, r3, r5
 80017b8:	0018      	movs	r0, r3
 80017ba:	f003 ffeb 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80017be:	19bb      	adds	r3, r7, r6
 80017c0:	195a      	adds	r2, r3, r5
 80017c2:	19bb      	adds	r3, r7, r6
 80017c4:	0011      	movs	r1, r2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff fe93 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80017cc:	19bb      	adds	r3, r7, r6
 80017ce:	195b      	adds	r3, r3, r5
 80017d0:	0018      	movs	r0, r3
 80017d2:	f003 ffad 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d6:	19bb      	adds	r3, r7, r6
 80017d8:	191b      	adds	r3, r3, r4
 80017da:	0018      	movs	r0, r3
 80017dc:	f003 ff55 	bl	800568a <_ZNSaIcED1Ev>
    myLCD.setCursor(4,2);
 80017e0:	19bb      	adds	r3, r7, r6
 80017e2:	2202      	movs	r2, #2
 80017e4:	2104      	movs	r1, #4
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fe5f 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print("Aim at Target");
 80017ec:	24b4      	movs	r4, #180	; 0xb4
 80017ee:	19bb      	adds	r3, r7, r6
 80017f0:	191b      	adds	r3, r3, r4
 80017f2:	0018      	movs	r0, r3
 80017f4:	f003 ff48 	bl	8005688 <_ZNSaIcEC1Ev>
 80017f8:	19bb      	adds	r3, r7, r6
 80017fa:	191a      	adds	r2, r3, r4
 80017fc:	497d      	ldr	r1, [pc, #500]	; (80019f4 <CppMain+0x2f4>)
 80017fe:	259c      	movs	r5, #156	; 0x9c
 8001800:	19bb      	adds	r3, r7, r6
 8001802:	195b      	adds	r3, r3, r5
 8001804:	0018      	movs	r0, r3
 8001806:	f003 ffc5 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800180a:	19bb      	adds	r3, r7, r6
 800180c:	195a      	adds	r2, r3, r5
 800180e:	19bb      	adds	r3, r7, r6
 8001810:	0011      	movs	r1, r2
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fe6d 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001818:	19bb      	adds	r3, r7, r6
 800181a:	195b      	adds	r3, r3, r5
 800181c:	0018      	movs	r0, r3
 800181e:	f003 ff87 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001822:	19bb      	adds	r3, r7, r6
 8001824:	191b      	adds	r3, r3, r4
 8001826:	0018      	movs	r0, r3
 8001828:	f003 ff2f 	bl	800568a <_ZNSaIcED1Ev>
    myLCD.setCursor(3,3);
 800182c:	19bb      	adds	r3, r7, r6
 800182e:	2203      	movs	r2, #3
 8001830:	2103      	movs	r1, #3
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff fe39 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print("for 10 seconds");
 8001838:	24d0      	movs	r4, #208	; 0xd0
 800183a:	19bb      	adds	r3, r7, r6
 800183c:	191b      	adds	r3, r3, r4
 800183e:	0018      	movs	r0, r3
 8001840:	f003 ff22 	bl	8005688 <_ZNSaIcEC1Ev>
 8001844:	19bb      	adds	r3, r7, r6
 8001846:	191a      	adds	r2, r3, r4
 8001848:	496b      	ldr	r1, [pc, #428]	; (80019f8 <CppMain+0x2f8>)
 800184a:	25b8      	movs	r5, #184	; 0xb8
 800184c:	19bb      	adds	r3, r7, r6
 800184e:	195b      	adds	r3, r3, r5
 8001850:	0018      	movs	r0, r3
 8001852:	f003 ff9f 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001856:	19bb      	adds	r3, r7, r6
 8001858:	195a      	adds	r2, r3, r5
 800185a:	19bb      	adds	r3, r7, r6
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff fe47 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001864:	19bb      	adds	r3, r7, r6
 8001866:	195b      	adds	r3, r3, r5
 8001868:	0018      	movs	r0, r3
 800186a:	f003 ff61 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800186e:	0035      	movs	r5, r6
 8001870:	197b      	adds	r3, r7, r5
 8001872:	191b      	adds	r3, r3, r4
 8001874:	0018      	movs	r0, r3
 8001876:	f003 ff08 	bl	800568a <_ZNSaIcED1Ev>

    HAL_Delay(4000);
 800187a:	23fa      	movs	r3, #250	; 0xfa
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	0018      	movs	r0, r3
 8001880:	f000 ffea 	bl	8002858 <HAL_Delay>

    myLCD.clear();
 8001884:	197b      	adds	r3, r7, r5
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff feff 	bl	800168a <_ZN13LCDController5clearEv>
    myLCD.setCursor(0,0);
 800188c:	197b      	adds	r3, r7, r5
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff fe09 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print("HOLD STEADY");
 8001898:	24ec      	movs	r4, #236	; 0xec
 800189a:	197b      	adds	r3, r7, r5
 800189c:	191b      	adds	r3, r3, r4
 800189e:	0018      	movs	r0, r3
 80018a0:	f003 fef2 	bl	8005688 <_ZNSaIcEC1Ev>
 80018a4:	002e      	movs	r6, r5
 80018a6:	19bb      	adds	r3, r7, r6
 80018a8:	191a      	adds	r2, r3, r4
 80018aa:	4954      	ldr	r1, [pc, #336]	; (80019fc <CppMain+0x2fc>)
 80018ac:	25d4      	movs	r5, #212	; 0xd4
 80018ae:	19bb      	adds	r3, r7, r6
 80018b0:	195b      	adds	r3, r3, r5
 80018b2:	0018      	movs	r0, r3
 80018b4:	f003 ff6e 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018b8:	19bb      	adds	r3, r7, r6
 80018ba:	195a      	adds	r2, r3, r5
 80018bc:	19bb      	adds	r3, r7, r6
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fe16 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80018c6:	19bb      	adds	r3, r7, r6
 80018c8:	195b      	adds	r3, r3, r5
 80018ca:	0018      	movs	r0, r3
 80018cc:	f003 ff30 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018d0:	19bb      	adds	r3, r7, r6
 80018d2:	191b      	adds	r3, r3, r4
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 fed8 	bl	800568a <_ZNSaIcED1Ev>

    int period = 1000/sampleFrequency; //This is the amount of time, in ms, to wait before doing next sample.
 80018da:	234e      	movs	r3, #78	; 0x4e
 80018dc:	33ff      	adds	r3, #255	; 0xff
 80018de:	22ba      	movs	r2, #186	; 0xba
 80018e0:	0052      	lsls	r2, r2, #1
 80018e2:	2108      	movs	r1, #8
 80018e4:	468c      	mov	ip, r1
 80018e6:	44bc      	add	ip, r7
 80018e8:	4462      	add	r2, ip
 80018ea:	6013      	str	r3, [r2, #0]

    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 80018ec:	2300      	movs	r3, #0
 80018ee:	22c2      	movs	r2, #194	; 0xc2
 80018f0:	0052      	lsls	r2, r2, #1
 80018f2:	2108      	movs	r1, #8
 80018f4:	468c      	mov	ip, r1
 80018f6:	44bc      	add	ip, r7
 80018f8:	4462      	add	r2, ip
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	23c2      	movs	r3, #194	; 0xc2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2208      	movs	r2, #8
 8001902:	4694      	mov	ip, r2
 8001904:	44bc      	add	ip, r7
 8001906:	4463      	add	r3, ip
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b1e      	cmp	r3, #30
 800190c:	dd00      	ble.n	8001910 <CppMain+0x210>
 800190e:	e10e      	b.n	8001b2e <CppMain+0x42e>
        timeRemaining = testDuration - ((period*(j+1))/1000); //Time remaings in seconds
 8001910:	23c2      	movs	r3, #194	; 0xc2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2208      	movs	r2, #8
 8001916:	4694      	mov	ip, r2
 8001918:	44bc      	add	ip, r7
 800191a:	4463      	add	r3, ip
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	3301      	adds	r3, #1
 8001920:	22ba      	movs	r2, #186	; 0xba
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	2108      	movs	r1, #8
 8001926:	468c      	mov	ip, r1
 8001928:	44bc      	add	ip, r7
 800192a:	4462      	add	r2, ip
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	4353      	muls	r3, r2
 8001930:	4933      	ldr	r1, [pc, #204]	; (8001a00 <CppMain+0x300>)
 8001932:	0018      	movs	r0, r3
 8001934:	f7fe fc7a 	bl	800022c <__divsi3>
 8001938:	0003      	movs	r3, r0
 800193a:	330a      	adds	r3, #10
 800193c:	001a      	movs	r2, r3
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <CppMain+0x304>)
 8001940:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 8001942:	2300      	movs	r3, #0
 8001944:	22c0      	movs	r2, #192	; 0xc0
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	2108      	movs	r1, #8
 800194a:	468c      	mov	ip, r1
 800194c:	44bc      	add	ip, r7
 800194e:	4462      	add	r2, ip
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	23c0      	movs	r3, #192	; 0xc0
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2208      	movs	r2, #8
 8001958:	4694      	mov	ip, r2
 800195a:	44bc      	add	ip, r7
 800195c:	4463      	add	r3, ip
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	dc5b      	bgt.n	8001a1c <CppMain+0x31c>
            sensorValues[j][i] = (readADC(hadc,analogReadPins[i]) / norm) - calibration; //Reading and recording sensor value
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <CppMain+0x308>)
 8001966:	25c0      	movs	r5, #192	; 0xc0
 8001968:	006d      	lsls	r5, r5, #1
 800196a:	2608      	movs	r6, #8
 800196c:	19ba      	adds	r2, r7, r6
 800196e:	1952      	adds	r2, r2, r5
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	58d3      	ldr	r3, [r2, r3]
 8001976:	4c25      	ldr	r4, [pc, #148]	; (8001a0c <CppMain+0x30c>)
 8001978:	9313      	str	r3, [sp, #76]	; 0x4c
 800197a:	466b      	mov	r3, sp
 800197c:	0018      	movs	r0, r3
 800197e:	0023      	movs	r3, r4
 8001980:	3310      	adds	r3, #16
 8001982:	224c      	movs	r2, #76	; 0x4c
 8001984:	0019      	movs	r1, r3
 8001986:	f003 ff6e 	bl	8005866 <memcpy>
 800198a:	6820      	ldr	r0, [r4, #0]
 800198c:	6861      	ldr	r1, [r4, #4]
 800198e:	68a2      	ldr	r2, [r4, #8]
 8001990:	68e3      	ldr	r3, [r4, #12]
 8001992:	f000 fa2b 	bl	8001dec <_Z7readADC19__ADC_HandleTypeDefm>
 8001996:	0002      	movs	r2, r0
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <CppMain+0x310>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0019      	movs	r1, r3
 800199e:	0010      	movs	r0, r2
 80019a0:	f7fe fbba 	bl	8000118 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	001a      	movs	r2, r3
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <CppMain+0x314>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	0018      	movs	r0, r3
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <CppMain+0x318>)
 80019b2:	22c2      	movs	r2, #194	; 0xc2
 80019b4:	0052      	lsls	r2, r2, #1
 80019b6:	2108      	movs	r1, #8
 80019b8:	468c      	mov	ip, r1
 80019ba:	44bc      	add	ip, r7
 80019bc:	4462      	add	r2, ip
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	0091      	lsls	r1, r2, #2
 80019c2:	19ba      	adds	r2, r7, r6
 80019c4:	1952      	adds	r2, r2, r5
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	188a      	adds	r2, r1, r2
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	50d0      	str	r0, [r2, r3]
            HAL_Delay(3); //Wait 3 ms in between sensor readings
 80019ce:	2003      	movs	r0, #3
 80019d0:	f000 ff42 	bl	8002858 <HAL_Delay>
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 80019d4:	19bb      	adds	r3, r7, r6
 80019d6:	195b      	adds	r3, r3, r5
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	19ba      	adds	r2, r7, r6
 80019de:	1952      	adds	r2, r2, r5
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e7b6      	b.n	8001952 <CppMain+0x252>
 80019e4:	fffffdfc 	.word	0xfffffdfc
 80019e8:	50000400 	.word	0x50000400
 80019ec:	fffffe78 	.word	0xfffffe78
 80019f0:	080061a0 	.word	0x080061a0
 80019f4:	080061a8 	.word	0x080061a8
 80019f8:	080061b8 	.word	0x080061b8
 80019fc:	080061c8 	.word	0x080061c8
 8001a00:	fffffc18 	.word	0xfffffc18
 8001a04:	200002a4 	.word	0x200002a4
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000680 	.word	0x20000680
 8001a10:	20000034 	.word	0x20000034
 8001a14:	200002a8 	.word	0x200002a8
 8001a18:	200000c4 	.word	0x200000c4
        }
        if  (timeRemaining > 0) {
 8001a1c:	4baf      	ldr	r3, [pc, #700]	; (8001cdc <CppMain+0x5dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dd6d      	ble.n	8001b00 <CppMain+0x400>

            myLCD.setCursor(0,2);
 8001a24:	2608      	movs	r6, #8
 8001a26:	19bb      	adds	r3, r7, r6
 8001a28:	2202      	movs	r2, #2
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fd3c 	bl	80014aa <_ZN13LCDController9setCursorEii>
            myLCD.print("  ");
 8001a32:	2484      	movs	r4, #132	; 0x84
 8001a34:	0064      	lsls	r4, r4, #1
 8001a36:	19bb      	adds	r3, r7, r6
 8001a38:	191b      	adds	r3, r3, r4
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f003 fe24 	bl	8005688 <_ZNSaIcEC1Ev>
 8001a40:	19bb      	adds	r3, r7, r6
 8001a42:	191a      	adds	r2, r3, r4
 8001a44:	49a6      	ldr	r1, [pc, #664]	; (8001ce0 <CppMain+0x5e0>)
 8001a46:	25f0      	movs	r5, #240	; 0xf0
 8001a48:	19bb      	adds	r3, r7, r6
 8001a4a:	195b      	adds	r3, r3, r5
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f003 fea1 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a52:	19bb      	adds	r3, r7, r6
 8001a54:	195a      	adds	r2, r3, r5
 8001a56:	19bb      	adds	r3, r7, r6
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fd49 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a60:	19bb      	adds	r3, r7, r6
 8001a62:	195b      	adds	r3, r3, r5
 8001a64:	0018      	movs	r0, r3
 8001a66:	f003 fe63 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a6a:	0035      	movs	r5, r6
 8001a6c:	197b      	adds	r3, r7, r5
 8001a6e:	191b      	adds	r3, r3, r4
 8001a70:	0018      	movs	r0, r3
 8001a72:	f003 fe0a 	bl	800568a <_ZNSaIcED1Ev>
            myLCD.setCursor(0,2);
 8001a76:	197b      	adds	r3, r7, r5
 8001a78:	2202      	movs	r2, #2
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fd14 	bl	80014aa <_ZN13LCDController9setCursorEii>
            myLCD.print(std::to_string(timeRemaining));
 8001a82:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <CppMain+0x5dc>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2486      	movs	r4, #134	; 0x86
 8001a88:	0064      	lsls	r4, r4, #1
 8001a8a:	197b      	adds	r3, r7, r5
 8001a8c:	191b      	adds	r3, r3, r4
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fe1f 	bl	80016d4 <_ZNSt7__cxx119to_stringEi>
 8001a96:	002e      	movs	r6, r5
 8001a98:	19bb      	adds	r3, r7, r6
 8001a9a:	191a      	adds	r2, r3, r4
 8001a9c:	19bb      	adds	r3, r7, r6
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff fd26 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001aa6:	19bb      	adds	r3, r7, r6
 8001aa8:	191b      	adds	r3, r3, r4
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f003 fe40 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            myLCD.setCursor(2,2);
 8001ab0:	19bb      	adds	r3, r7, r6
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	2102      	movs	r1, #2
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f7ff fcf7 	bl	80014aa <_ZN13LCDController9setCursorEii>
            myLCD.print(" seconds remaining");
 8001abc:	249e      	movs	r4, #158	; 0x9e
 8001abe:	0064      	lsls	r4, r4, #1
 8001ac0:	19bb      	adds	r3, r7, r6
 8001ac2:	191b      	adds	r3, r3, r4
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f003 fddf 	bl	8005688 <_ZNSaIcEC1Ev>
 8001aca:	19bb      	adds	r3, r7, r6
 8001acc:	191a      	adds	r2, r3, r4
 8001ace:	4985      	ldr	r1, [pc, #532]	; (8001ce4 <CppMain+0x5e4>)
 8001ad0:	2592      	movs	r5, #146	; 0x92
 8001ad2:	006d      	lsls	r5, r5, #1
 8001ad4:	19bb      	adds	r3, r7, r6
 8001ad6:	195b      	adds	r3, r3, r5
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f003 fe5b 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ade:	19bb      	adds	r3, r7, r6
 8001ae0:	195a      	adds	r2, r3, r5
 8001ae2:	19bb      	adds	r3, r7, r6
 8001ae4:	0011      	movs	r1, r2
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f7ff fd03 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001aec:	19bb      	adds	r3, r7, r6
 8001aee:	195b      	adds	r3, r3, r5
 8001af0:	0018      	movs	r0, r3
 8001af2:	f003 fe1d 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001af6:	19bb      	adds	r3, r7, r6
 8001af8:	191b      	adds	r3, r3, r4
 8001afa:	0018      	movs	r0, r3
 8001afc:	f003 fdc5 	bl	800568a <_ZNSaIcED1Ev>
        }
        HAL_Delay(period); //Wait
 8001b00:	23ba      	movs	r3, #186	; 0xba
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	2208      	movs	r2, #8
 8001b06:	4694      	mov	ip, r2
 8001b08:	44bc      	add	ip, r7
 8001b0a:	4463      	add	r3, ip
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fea2 	bl	8002858 <HAL_Delay>
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 8001b14:	22c2      	movs	r2, #194	; 0xc2
 8001b16:	0052      	lsls	r2, r2, #1
 8001b18:	2308      	movs	r3, #8
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	189b      	adds	r3, r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	2108      	movs	r1, #8
 8001b24:	468c      	mov	ip, r1
 8001b26:	44bc      	add	ip, r7
 8001b28:	4462      	add	r2, ip
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e6e6      	b.n	80018fc <CppMain+0x1fc>
    }

    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	22be      	movs	r2, #190	; 0xbe
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	2108      	movs	r1, #8
 8001b36:	468c      	mov	ip, r1
 8001b38:	44bc      	add	ip, r7
 8001b3a:	4462      	add	r2, ip
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	23be      	movs	r3, #190	; 0xbe
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2208      	movs	r2, #8
 8001b44:	4694      	mov	ip, r2
 8001b46:	44bc      	add	ip, r7
 8001b48:	4463      	add	r3, ip
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b1e      	cmp	r3, #30
 8001b4e:	dc61      	bgt.n	8001c14 <CppMain+0x514>
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 8001b50:	2300      	movs	r3, #0
 8001b52:	22bc      	movs	r2, #188	; 0xbc
 8001b54:	0052      	lsls	r2, r2, #1
 8001b56:	2108      	movs	r1, #8
 8001b58:	468c      	mov	ip, r1
 8001b5a:	44bc      	add	ip, r7
 8001b5c:	4462      	add	r2, ip
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	23bc      	movs	r3, #188	; 0xbc
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2208      	movs	r2, #8
 8001b66:	4694      	mov	ip, r2
 8001b68:	44bc      	add	ip, r7
 8001b6a:	4463      	add	r3, ip
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	dc43      	bgt.n	8001bfa <CppMain+0x4fa>
            score = score + w[i]*sensorValues[j][i]; //muliple by appropriate weighting factor for each ring
 8001b72:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <CppMain+0x5e8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff faea 	bl	8001150 <__aeabi_i2d>
 8001b7c:	6038      	str	r0, [r7, #0]
 8001b7e:	6079      	str	r1, [r7, #4]
 8001b80:	4a5a      	ldr	r2, [pc, #360]	; (8001cec <CppMain+0x5ec>)
 8001b82:	26bc      	movs	r6, #188	; 0xbc
 8001b84:	0076      	lsls	r6, r6, #1
 8001b86:	2008      	movs	r0, #8
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	199b      	adds	r3, r3, r6
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	681c      	ldr	r4, [r3, #0]
 8001b94:	685d      	ldr	r5, [r3, #4]
 8001b96:	4b56      	ldr	r3, [pc, #344]	; (8001cf0 <CppMain+0x5f0>)
 8001b98:	22be      	movs	r2, #190	; 0xbe
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	468c      	mov	ip, r1
 8001ba0:	44bc      	add	ip, r7
 8001ba2:	4462      	add	r2, ip
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	0091      	lsls	r1, r2, #2
 8001ba8:	183a      	adds	r2, r7, r0
 8001baa:	1992      	adds	r2, r2, r6
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	188a      	adds	r2, r1, r2
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	58d3      	ldr	r3, [r2, r3]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7ff facb 	bl	8001150 <__aeabi_i2d>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	000b      	movs	r3, r1
 8001bbe:	0020      	movs	r0, r4
 8001bc0:	0029      	movs	r1, r5
 8001bc2:	f7ff f81d 	bl	8000c00 <__aeabi_dmul>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	000c      	movs	r4, r1
 8001bca:	001a      	movs	r2, r3
 8001bcc:	0023      	movs	r3, r4
 8001bce:	6838      	ldr	r0, [r7, #0]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	f7fe fcf9 	bl	80005c8 <__aeabi_dadd>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	000c      	movs	r4, r1
 8001bda:	0018      	movs	r0, r3
 8001bdc:	0021      	movs	r1, r4
 8001bde:	f7ff fa81 	bl	80010e4 <__aeabi_d2iz>
 8001be2:	0002      	movs	r2, r0
 8001be4:	4b40      	ldr	r3, [pc, #256]	; (8001ce8 <CppMain+0x5e8>)
 8001be6:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 8001be8:	2008      	movs	r0, #8
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	199b      	adds	r3, r3, r6
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	183a      	adds	r2, r7, r0
 8001bf4:	1992      	adds	r2, r2, r6
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e7b2      	b.n	8001b60 <CppMain+0x460>
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 8001bfa:	22be      	movs	r2, #190	; 0xbe
 8001bfc:	0052      	lsls	r2, r2, #1
 8001bfe:	2308      	movs	r3, #8
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	2108      	movs	r1, #8
 8001c0a:	468c      	mov	ip, r1
 8001c0c:	44bc      	add	ip, r7
 8001c0e:	4462      	add	r2, ip
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e794      	b.n	8001b3e <CppMain+0x43e>
        }
    }

    score = score/max_score; //Normalzing score to make it a percent from 1% to 100%
 8001c14:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <CppMain+0x5e8>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <CppMain+0x5f4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	0010      	movs	r0, r2
 8001c20:	f7fe fb04 	bl	800022c <__divsi3>
 8001c24:	0003      	movs	r3, r0
 8001c26:	001a      	movs	r2, r3
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <CppMain+0x5e8>)
 8001c2a:	601a      	str	r2, [r3, #0]

    myLCD.clear();
 8001c2c:	2608      	movs	r6, #8
 8001c2e:	19bb      	adds	r3, r7, r6
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fd2a 	bl	800168a <_ZN13LCDController5clearEv>
    myLCD.setCursor(0,0);
 8001c36:	19bb      	adds	r3, r7, r6
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fc34 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print("Score: ");
 8001c42:	24ac      	movs	r4, #172	; 0xac
 8001c44:	0064      	lsls	r4, r4, #1
 8001c46:	19bb      	adds	r3, r7, r6
 8001c48:	191b      	adds	r3, r3, r4
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f003 fd1c 	bl	8005688 <_ZNSaIcEC1Ev>
 8001c50:	19bb      	adds	r3, r7, r6
 8001c52:	191a      	adds	r2, r3, r4
 8001c54:	4928      	ldr	r1, [pc, #160]	; (8001cf8 <CppMain+0x5f8>)
 8001c56:	25a0      	movs	r5, #160	; 0xa0
 8001c58:	006d      	lsls	r5, r5, #1
 8001c5a:	19bb      	adds	r3, r7, r6
 8001c5c:	195b      	adds	r3, r3, r5
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f003 fd98 	bl	8005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c64:	19bb      	adds	r3, r7, r6
 8001c66:	195a      	adds	r2, r3, r5
 8001c68:	19bb      	adds	r3, r7, r6
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fc40 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c72:	19bb      	adds	r3, r7, r6
 8001c74:	195b      	adds	r3, r3, r5
 8001c76:	0018      	movs	r0, r3
 8001c78:	f003 fd5a 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c7c:	0035      	movs	r5, r6
 8001c7e:	197b      	adds	r3, r7, r5
 8001c80:	191b      	adds	r3, r3, r4
 8001c82:	0018      	movs	r0, r3
 8001c84:	f003 fd01 	bl	800568a <_ZNSaIcED1Ev>
    myLCD.setCursor(0,3);
 8001c88:	197b      	adds	r3, r7, r5
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fc0b 	bl	80014aa <_ZN13LCDController9setCursorEii>
    myLCD.print(std::to_string(score));
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <CppMain+0x5e8>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	24ae      	movs	r4, #174	; 0xae
 8001c9a:	0064      	lsls	r4, r4, #1
 8001c9c:	197b      	adds	r3, r7, r5
 8001c9e:	191b      	adds	r3, r3, r4
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fd16 	bl	80016d4 <_ZNSt7__cxx119to_stringEi>
 8001ca8:	197b      	adds	r3, r7, r5
 8001caa:	191a      	adds	r2, r3, r4
 8001cac:	197b      	adds	r3, r7, r5
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fc1e 	bl	80014f2 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001cb6:	197b      	adds	r3, r7, r5
 8001cb8:	191b      	adds	r3, r3, r4
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 fd38 	bl	8005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    HAL_Delay(5000);
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <CppMain+0x5fc>)
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 fdc8 	bl	8002858 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <CppMain+0x600>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2110      	movs	r1, #16
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f001 fd2f 	bl	8003732 <HAL_GPIO_WritePin>
}
 8001cd4:	46c0      	nop			; (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b065      	add	sp, #404	; 0x194
 8001cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cdc:	200002a4 	.word	0x200002a4
 8001ce0:	080061d4 	.word	0x080061d4
 8001ce4:	080061d8 	.word	0x080061d8
 8001ce8:	200002ac 	.word	0x200002ac
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	200000c4 	.word	0x200000c4
 8001cf4:	20000030 	.word	0x20000030
 8001cf8:	080061ec 	.word	0x080061ec
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	50000400 	.word	0x50000400

08001d04 <_Z16calibrateSensorsv>:

void calibrateSensors() {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b097      	sub	sp, #92	; 0x5c
 8001d08:	af14      	add	r7, sp, #80	; 0x50

    // Doing calibration read
    calibration = 0;
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <_Z16calibrateSensorsv+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    HAL_Delay(500); //Wait half a second
 8001d10:	23fa      	movs	r3, #250	; 0xfa
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fd9f 	bl	8002858 <HAL_Delay>
    for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	dc36      	bgt.n	8001d92 <_Z16calibrateSensorsv+0x8e>
        uint32_t initialValue = (readADC(hadc, analogReadPins[i])) / norm; //Read each sensor
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <_Z16calibrateSensorsv+0x9c>)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	58d3      	ldr	r3, [r2, r3]
 8001d2c:	4c1d      	ldr	r4, [pc, #116]	; (8001da4 <_Z16calibrateSensorsv+0xa0>)
 8001d2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d30:	466b      	mov	r3, sp
 8001d32:	0018      	movs	r0, r3
 8001d34:	0023      	movs	r3, r4
 8001d36:	3310      	adds	r3, #16
 8001d38:	224c      	movs	r2, #76	; 0x4c
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	f003 fd93 	bl	8005866 <memcpy>
 8001d40:	6820      	ldr	r0, [r4, #0]
 8001d42:	6861      	ldr	r1, [r4, #4]
 8001d44:	68a2      	ldr	r2, [r4, #8]
 8001d46:	68e3      	ldr	r3, [r4, #12]
 8001d48:	f000 f850 	bl	8001dec <_Z7readADC19__ADC_HandleTypeDefm>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <_Z16calibrateSensorsv+0xa4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0019      	movs	r1, r3
 8001d54:	0010      	movs	r0, r2
 8001d56:	f7fe f9df 	bl	8000118 <__udivsi3>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	603b      	str	r3, [r7, #0]
        sensorValues[0][i] = (int)initialValue;
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <_Z16calibrateSensorsv+0xa8>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	50d1      	str	r1, [r2, r3]
        HAL_Delay(5); //Wait 5 ms
 8001d68:	2005      	movs	r0, #5
 8001d6a:	f000 fd75 	bl	8002858 <HAL_Delay>
        calibration = calibration + ((sensorValues[0][i]) / numRings); //Taking the average value for the calibration base.
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <_Z16calibrateSensorsv+0xa8>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	58d3      	ldr	r3, [r2, r3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da00      	bge.n	8001d7c <_Z16calibrateSensorsv+0x78>
 8001d7a:	3303      	adds	r3, #3
 8001d7c:	109b      	asrs	r3, r3, #2
 8001d7e:	001a      	movs	r2, r3
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <_Z16calibrateSensorsv+0x98>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	18d2      	adds	r2, r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <_Z16calibrateSensorsv+0x98>)
 8001d88:	601a      	str	r2, [r3, #0]
    for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	e7c5      	b.n	8001d1e <_Z16calibrateSensorsv+0x1a>

    }
}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b003      	add	sp, #12
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	200002a8 	.word	0x200002a8
 8001da0:	20000000 	.word	0x20000000
 8001da4:	20000680 	.word	0x20000680
 8001da8:	20000034 	.word	0x20000034
 8001dac:	200000c4 	.word	0x200000c4

08001db0 <_Z10startUpLCD13LCDController>:

void startUpLCD(LCDController myLCD) {
 8001db0:	b084      	sub	sp, #16
 8001db2:	b5b0      	push	{r4, r5, r7, lr}
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	2410      	movs	r4, #16
 8001db8:	0025      	movs	r5, r4
 8001dba:	193c      	adds	r4, r7, r4
 8001dbc:	6020      	str	r0, [r4, #0]
 8001dbe:	6061      	str	r1, [r4, #4]
 8001dc0:	60a2      	str	r2, [r4, #8]
 8001dc2:	60e3      	str	r3, [r4, #12]
    myLCD.init(); //initiate the LCD
 8001dc4:	002c      	movs	r4, r5
 8001dc6:	193b      	adds	r3, r7, r4
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff fb2f 	bl	800142c <_ZN13LCDController4initEv>
    myLCD.clear(); //get rid of any remaining text on the screen
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fc5a 	bl	800168a <_ZN13LCDController5clearEv>
    myLCD.home(); //set the cursor to home
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fc68 	bl	80016ae <_ZN13LCDController4homeEv>
}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bcb0      	pop	{r4, r5, r7}
 8001de4:	bc08      	pop	{r3}
 8001de6:	b004      	add	sp, #16
 8001de8:	4718      	bx	r3
	...

08001dec <_Z7readADC19__ADC_HandleTypeDefm>:


uint32_t readADC(ADC_HandleTypeDef hadc, uint32_t channel) {
 8001dec:	b084      	sub	sp, #16
 8001dee:	b5b0      	push	{r4, r5, r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	2520      	movs	r5, #32
 8001df6:	197c      	adds	r4, r7, r5
 8001df8:	6020      	str	r0, [r4, #0]
 8001dfa:	6061      	str	r1, [r4, #4]
 8001dfc:	60a2      	str	r2, [r4, #8]
 8001dfe:	60e3      	str	r3, [r4, #12]
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = channel;
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001e04:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	0152      	lsls	r2, r2, #5
 8001e0c:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	002c      	movs	r4, r5
 8001e12:	193a      	adds	r2, r7, r4
 8001e14:	0019      	movs	r1, r3
 8001e16:	0010      	movs	r0, r2
 8001e18:	f000 ffea 	bl	8002df0 <HAL_ADC_ConfigChannel>

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	2100      	movs	r1, #0
 8001e20:	0018      	movs	r0, r3
 8001e22:	f001 f9a9 	bl	8003178 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start(&hadc);
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 feab 	bl	8002b84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001e2e:	2301      	movs	r3, #1
 8001e30:	425b      	negs	r3, r3
 8001e32:	193a      	adds	r2, r7, r4
 8001e34:	0019      	movs	r1, r3
 8001e36:	0010      	movs	r0, r2
 8001e38:	f000 ff38 	bl	8002cac <HAL_ADC_PollForConversion>
	uint32_t raw = HAL_ADC_GetValue(&hadc);
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f000 ffca 	bl	8002dd8 <HAL_ADC_GetValue>
 8001e44:	0003      	movs	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(&hadc);
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f000 feee 	bl	8002c2c <HAL_ADC_Stop>

	sConfig.Rank = ADC_RANK_NONE;
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <_Z7readADC19__ADC_HandleTypeDefm+0x88>)
 8001e54:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	193a      	adds	r2, r7, r4
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	0010      	movs	r0, r2
 8001e5e:	f000 ffc7 	bl	8002df0 <HAL_ADC_ConfigChannel>
	return raw;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b004      	add	sp, #16
 8001e6a:	bcb0      	pop	{r4, r5, r7}
 8001e6c:	bc08      	pop	{r3}
 8001e6e:	b004      	add	sp, #16
 8001e70:	4718      	bx	r3
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	00001001 	.word	0x00001001

08001e78 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8001e78:	b408      	push	{r3}
 8001e7a:	b5b0      	push	{r4, r5, r7, lr}
 8001e7c:	b089      	sub	sp, #36	; 0x24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3307      	adds	r3, #7
 8001e8a:	3307      	adds	r3, #7
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	466a      	mov	r2, sp
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	469d      	mov	sp, r3
 8001e96:	466b      	mov	r3, sp
 8001e98:	3307      	adds	r3, #7
 8001e9a:	08db      	lsrs	r3, r3, #3
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8001ea0:	2330      	movs	r3, #48	; 0x30
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	4694      	mov	ip, r2
 8001ea6:	44bc      	add	ip, r7
 8001ea8:	4463      	add	r3, ip
 8001eaa:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	69f8      	ldr	r0, [r7, #28]
 8001eb4:	68bc      	ldr	r4, [r7, #8]
 8001eb6:	47a0      	blx	r4
 8001eb8:	0003      	movs	r3, r0
 8001eba:	61bb      	str	r3, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	18d4      	adds	r4, r2, r3
 8001ec2:	2514      	movs	r5, #20
 8001ec4:	197b      	adds	r3, r7, r5
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f003 fbde 	bl	8005688 <_ZNSaIcEC1Ev>
 8001ecc:	197b      	adds	r3, r7, r5
 8001ece:	69f9      	ldr	r1, [r7, #28]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	0022      	movs	r2, r4
 8001ed4:	f000 f80b 	bl	8001eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8001ed8:	197b      	adds	r3, r7, r5
 8001eda:	0018      	movs	r0, r3
 8001edc:	f003 fbd5 	bl	800568a <_ZNSaIcED1Ev>
    }
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b009      	add	sp, #36	; 0x24
 8001ee6:	bcb0      	pop	{r4, r5, r7}
 8001ee8:	bc08      	pop	{r3}
 8001eea:	b001      	add	sp, #4
 8001eec:	4718      	bx	r3

08001eee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 8001efc:	68fc      	ldr	r4, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0018      	movs	r0, r3
 8001f02:	f003 fbd3 	bl	80056ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001f06:	0001      	movs	r1, r0
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	0020      	movs	r0, r4
 8001f0e:	f003 fc1a 	bl	8005746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f000 f805 	bl	8001f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b005      	add	sp, #20
 8001f26:	bd90      	pop	{r4, r7, pc}

08001f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f804 	bl	8001f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b006      	add	sp, #24
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	003a      	movs	r2, r7
 8001f54:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	1c23      	adds	r3, r4, #0
 8001f5e:	f000 f805 	bl	8001f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b007      	add	sp, #28
 8001f68:	bd90      	pop	{r4, r7, pc}
	...

08001f6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	003a      	movs	r2, r7
 8001f7a:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 f842 	bl	8002008 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d005      	beq.n	8001f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f003 fb75 	bl	800568c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	0011      	movs	r1, r2
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f841 	bl	8002030 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d912      	bls.n	8001fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8001fb8:	2314      	movs	r3, #20
 8001fba:	18f9      	adds	r1, r7, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f003 fb7d 	bl	80056c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0011      	movs	r1, r2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f003 fb69 	bl	80056a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f003 fb69 	bl	80056b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f003 fb61 	bl	80056a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	0019      	movs	r1, r3
 8001fec:	f003 fb96 	bl	800571c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f003 fb5c 	bl	80056b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b006      	add	sp, #24
 8002002:	bd80      	pop	{r7, pc}
 8002004:	080061f4 	.word	0x080061f4

08002008 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	425a      	negs	r2, r3
 8002014:	4153      	adcs	r3, r2
 8002016:	b2db      	uxtb	r3, r3
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002028:	1c18      	adds	r0, r3, #0
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800203a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	0018      	movs	r0, r3
 8002040:	f7ff ffee 	bl	8002020 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	1c2a      	adds	r2, r5, #0
 8002048:	0019      	movs	r1, r3
 800204a:	0020      	movs	r0, r4
 800204c:	f000 f805 	bl	800205a <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002050:	0003      	movs	r3, r0
    }
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bdb0      	pop	{r4, r5, r7, pc}

0800205a <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
    }
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b004      	add	sp, #16
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207c:	f000 fb7c 	bl	8002778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002080:	f000 f82c 	bl	80020dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002084:	f000 f98c 	bl	80023a0 <MX_GPIO_Init>
  MX_ADC_Init();
 8002088:	f000 f896 	bl	80021b8 <MX_ADC_Init>
  MX_TIM2_Init();
 800208c:	f000 f8de 	bl	800224c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002090:	f000 f930 	bl	80022f4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002094:	f000 f95e 	bl	8002354 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <main+0x30>)
 800209a:	0018      	movs	r0, r3
 800209c:	f002 fbd4 	bl	8004848 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CppMain();
 80020a0:	f7ff fb2e 	bl	8001700 <CppMain>
 80020a4:	e7fc      	b.n	80020a0 <main+0x28>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20000350 	.word	0x20000350

080020ac <delayMicroseconds>:
/**
 * Delays the program for a given value in microseconds and then returns to operaiton
 * @param us
 */
 void delayMicroseconds (uint16_t us)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	0002      	movs	r2, r0
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <delayMicroseconds+0x2c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <delayMicroseconds+0x2c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3f8      	bcc.n	80020c2 <delayMicroseconds+0x16>
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000350 	.word	0x20000350

080020dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b09d      	sub	sp, #116	; 0x74
 80020e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	2438      	movs	r4, #56	; 0x38
 80020e4:	193b      	adds	r3, r7, r4
 80020e6:	0018      	movs	r0, r3
 80020e8:	2338      	movs	r3, #56	; 0x38
 80020ea:	001a      	movs	r2, r3
 80020ec:	2100      	movs	r1, #0
 80020ee:	f003 fbd6 	bl	800589e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f2:	2324      	movs	r3, #36	; 0x24
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	0018      	movs	r0, r3
 80020f8:	2314      	movs	r3, #20
 80020fa:	001a      	movs	r2, r3
 80020fc:	2100      	movs	r1, #0
 80020fe:	f003 fbce 	bl	800589e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002102:	003b      	movs	r3, r7
 8002104:	0018      	movs	r0, r3
 8002106:	2324      	movs	r3, #36	; 0x24
 8002108:	001a      	movs	r2, r3
 800210a:	2100      	movs	r1, #0
 800210c:	f003 fbc7 	bl	800589e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <SystemClock_Config+0xd4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <SystemClock_Config+0xd8>)
 8002116:	401a      	ands	r2, r3
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <SystemClock_Config+0xd4>)
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	0109      	lsls	r1, r1, #4
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002122:	0021      	movs	r1, r4
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2222      	movs	r2, #34	; 0x22
 8002128:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2201      	movs	r2, #1
 800212e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002130:	187b      	adds	r3, r7, r1
 8002132:	2210      	movs	r2, #16
 8002134:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2201      	movs	r2, #1
 800213a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002142:	187b      	adds	r3, r7, r1
 8002144:	0018      	movs	r0, r3
 8002146:	f001 fc4b 	bl	80039e0 <HAL_RCC_OscConfig>
 800214a:	1e03      	subs	r3, r0, #0
 800214c:	d001      	beq.n	8002152 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800214e:	f000 f979 	bl	8002444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002152:	2124      	movs	r1, #36	; 0x24
 8002154:	187b      	adds	r3, r7, r1
 8002156:	220f      	movs	r2, #15
 8002158:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800215a:	187b      	adds	r3, r7, r1
 800215c:	2201      	movs	r2, #1
 800215e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216c:	187b      	adds	r3, r7, r1
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002172:	187b      	adds	r3, r7, r1
 8002174:	2100      	movs	r1, #0
 8002176:	0018      	movs	r0, r3
 8002178:	f001 fff2 	bl	8004160 <HAL_RCC_ClockConfig>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002180:	f000 f960 	bl	8002444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8002184:	003b      	movs	r3, r7
 8002186:	2241      	movs	r2, #65	; 0x41
 8002188:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800218a:	003b      	movs	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002190:	003b      	movs	r3, r7
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	04d2      	lsls	r2, r2, #19
 8002196:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002198:	003b      	movs	r3, r7
 800219a:	0018      	movs	r0, r3
 800219c:	f002 f9c4 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80021a4:	f000 f94e 	bl	8002444 <Error_Handler>
  }
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b01d      	add	sp, #116	; 0x74
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	40007000 	.word	0x40007000
 80021b4:	ffffe7ff 	.word	0xffffe7ff

080021b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80021bc:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MX_ADC_Init+0x8c>)
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <MX_ADC_Init+0x90>)
 80021c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <MX_ADC_Init+0x8c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <MX_ADC_Init+0x8c>)
 80021ca:	22c0      	movs	r2, #192	; 0xc0
 80021cc:	0612      	lsls	r2, r2, #24
 80021ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_ADC_Init+0x8c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <MX_ADC_Init+0x8c>)
 80021d8:	2203      	movs	r2, #3
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_ADC_Init+0x8c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021e2:	4b18      	ldr	r3, [pc, #96]	; (8002244 <MX_ADC_Init+0x8c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <MX_ADC_Init+0x8c>)
 80021ea:	2220      	movs	r2, #32
 80021ec:	2100      	movs	r1, #0
 80021ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021f0:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_ADC_Init+0x8c>)
 80021f2:	2221      	movs	r2, #33	; 0x21
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_ADC_Init+0x8c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_ADC_Init+0x8c>)
 8002200:	22c2      	movs	r2, #194	; 0xc2
 8002202:	32ff      	adds	r2, #255	; 0xff
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_ADC_Init+0x8c>)
 8002208:	222c      	movs	r2, #44	; 0x2c
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <MX_ADC_Init+0x8c>)
 8002210:	2204      	movs	r2, #4
 8002212:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_ADC_Init+0x8c>)
 8002216:	2200      	movs	r2, #0
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <MX_ADC_Init+0x8c>)
 800221c:	2200      	movs	r2, #0
 800221e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_ADC_Init+0x8c>)
 8002222:	2200      	movs	r2, #0
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <MX_ADC_Init+0x8c>)
 8002228:	2200      	movs	r2, #0
 800222a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <MX_ADC_Init+0x8c>)
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fb34 	bl	800289c <HAL_ADC_Init>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8002238:	f000 f904 	bl	8002444 <Error_Handler>
  }
}
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	20000680 	.word	0x20000680
 8002248:	40012400 	.word	0x40012400

0800224c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002252:	2308      	movs	r3, #8
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	0018      	movs	r0, r3
 8002258:	2310      	movs	r3, #16
 800225a:	001a      	movs	r2, r3
 800225c:	2100      	movs	r1, #0
 800225e:	f003 fb1e 	bl	800589e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002262:	003b      	movs	r3, r7
 8002264:	0018      	movs	r0, r3
 8002266:	2308      	movs	r3, #8
 8002268:	001a      	movs	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f003 fb17 	bl	800589e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <MX_TIM2_Init+0xa0>)
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	05d2      	lsls	r2, r2, #23
 8002276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <MX_TIM2_Init+0xa0>)
 800227a:	220f      	movs	r2, #15
 800227c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <MX_TIM2_Init+0xa0>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002284:	4b19      	ldr	r3, [pc, #100]	; (80022ec <MX_TIM2_Init+0xa0>)
 8002286:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <MX_TIM2_Init+0xa4>)
 8002288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <MX_TIM2_Init+0xa0>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002290:	4b16      	ldr	r3, [pc, #88]	; (80022ec <MX_TIM2_Init+0xa0>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <MX_TIM2_Init+0xa0>)
 8002298:	0018      	movs	r0, r3
 800229a:	f002 faa9 	bl	80047f0 <HAL_TIM_Base_Init>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80022a2:	f000 f8cf 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a6:	2108      	movs	r1, #8
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	2280      	movs	r2, #128	; 0x80
 80022ac:	0152      	lsls	r2, r2, #5
 80022ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b0:	187a      	adds	r2, r7, r1
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_TIM2_Init+0xa0>)
 80022b4:	0011      	movs	r1, r2
 80022b6:	0018      	movs	r0, r3
 80022b8:	f002 fae8 	bl	800488c <HAL_TIM_ConfigClockSource>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80022c0:	f000 f8c0 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c4:	003b      	movs	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	003b      	movs	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d0:	003a      	movs	r2, r7
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_TIM2_Init+0xa0>)
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f002 fc84 	bl	8004be4 <HAL_TIMEx_MasterConfigSynchronization>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80022e0:	f000 f8b0 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000350 	.word	0x20000350
 80022f0:	0000fffe 	.word	0x0000fffe

080022f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_USART1_UART_Init+0x58>)
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <MX_USART1_UART_Init+0x5c>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002300:	22e1      	movs	r2, #225	; 0xe1
 8002302:	0252      	lsls	r2, r2, #9
 8002304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <MX_USART1_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART1_UART_Init+0x58>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART1_UART_Init+0x58>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <MX_USART1_UART_Init+0x58>)
 8002338:	0018      	movs	r0, r3
 800233a:	f002 fc97 	bl	8004c6c <HAL_UART_Init>
 800233e:	1e03      	subs	r3, r0, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002342:	f000 f87f 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200002c0 	.word	0x200002c0
 8002350:	40013800 	.word	0x40013800

08002354 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_USB_PCD_Init+0x44>)
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <MX_USB_PCD_Init+0x48>)
 800235c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USB_PCD_Init+0x44>)
 8002360:	2208      	movs	r2, #8
 8002362:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USB_PCD_Init+0x44>)
 8002366:	2202      	movs	r2, #2
 8002368:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USB_PCD_Init+0x44>)
 800236c:	2202      	movs	r2, #2
 800236e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USB_PCD_Init+0x44>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USB_PCD_Init+0x44>)
 8002378:	2200      	movs	r2, #0
 800237a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USB_PCD_Init+0x44>)
 800237e:	2200      	movs	r2, #0
 8002380:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <MX_USB_PCD_Init+0x44>)
 8002384:	0018      	movs	r0, r3
 8002386:	f001 f9f1 	bl	800376c <HAL_PCD_Init>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800238e:	f000 f859 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	2000038c 	.word	0x2000038c
 800239c:	40005c00 	.word	0x40005c00

080023a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	240c      	movs	r4, #12
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	0018      	movs	r0, r3
 80023ac:	2314      	movs	r3, #20
 80023ae:	001a      	movs	r2, r3
 80023b0:	2100      	movs	r1, #0
 80023b2:	f003 fa74 	bl	800589e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <MX_GPIO_Init+0x98>)
 80023b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <MX_GPIO_Init+0x98>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	430a      	orrs	r2, r1
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_GPIO_Init+0x98>)
 80023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_GPIO_Init+0x98>)
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <MX_GPIO_Init+0x98>)
 80023d4:	2101      	movs	r1, #1
 80023d6:	430a      	orrs	r2, r1
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_GPIO_Init+0x98>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_GPIO_Init+0x98>)
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_GPIO_Init+0x98>)
 80023ec:	2102      	movs	r1, #2
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80023f2:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_GPIO_Init+0x98>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	2202      	movs	r2, #2
 80023f8:	4013      	ands	r3, r2
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80023fe:	490f      	ldr	r1, [pc, #60]	; (800243c <MX_GPIO_Init+0x9c>)
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_GPIO_Init+0xa0>)
 8002402:	2200      	movs	r2, #0
 8002404:	0018      	movs	r0, r3
 8002406:	f001 f994 	bl	8003732 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 800240a:	0021      	movs	r1, r4
 800240c:	187b      	adds	r3, r7, r1
 800240e:	4a0b      	ldr	r2, [pc, #44]	; (800243c <MX_GPIO_Init+0x9c>)
 8002410:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	187b      	adds	r3, r7, r1
 8002414:	2201      	movs	r2, #1
 8002416:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	187b      	adds	r3, r7, r1
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	187b      	adds	r3, r7, r1
 8002420:	2200      	movs	r2, #0
 8002422:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	187b      	adds	r3, r7, r1
 8002426:	4a06      	ldr	r2, [pc, #24]	; (8002440 <MX_GPIO_Init+0xa0>)
 8002428:	0019      	movs	r1, r3
 800242a:	0010      	movs	r0, r2
 800242c:	f000 ffee 	bl	800340c <HAL_GPIO_Init>

}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b009      	add	sp, #36	; 0x24
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	0000fff0 	.word	0x0000fff0
 8002440:	50000400 	.word	0x50000400

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <HAL_MspInit+0x24>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_MspInit+0x24>)
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_MspInit+0x24>)
 8002462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_MspInit+0x24>)
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	0549      	lsls	r1, r1, #21
 800246a:	430a      	orrs	r2, r1
 800246c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	230c      	movs	r3, #12
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	0018      	movs	r0, r3
 8002486:	2314      	movs	r3, #20
 8002488:	001a      	movs	r2, r3
 800248a:	2100      	movs	r1, #0
 800248c:	f003 fa07 	bl	800589e <memset>
  if(hadc->Instance==ADC1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_ADC_MspInit+0x74>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d123      	bne.n	80024e2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_ADC_MspInit+0x78>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_ADC_MspInit+0x78>)
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0089      	lsls	r1, r1, #2
 80024a4:	430a      	orrs	r2, r1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_ADC_MspInit+0x78>)
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <HAL_ADC_MspInit+0x78>)
 80024ae:	2101      	movs	r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_ADC_MspInit+0x78>)
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024c0:	210c      	movs	r1, #12
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	220f      	movs	r2, #15
 80024c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	2203      	movs	r2, #3
 80024cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	187a      	adds	r2, r7, r1
 80024d6:	23a0      	movs	r3, #160	; 0xa0
 80024d8:	05db      	lsls	r3, r3, #23
 80024da:	0011      	movs	r1, r2
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 ff95 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b008      	add	sp, #32
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40012400 	.word	0x40012400
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	05db      	lsls	r3, r3, #23
 8002504:	429a      	cmp	r2, r3
 8002506:	d105      	bne.n	8002514 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <HAL_TIM_Base_MspInit+0x28>)
 800250a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_TIM_Base_MspInit+0x28>)
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	230c      	movs	r3, #12
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	0018      	movs	r0, r3
 800252e:	2314      	movs	r3, #20
 8002530:	001a      	movs	r2, r3
 8002532:	2100      	movs	r1, #0
 8002534:	f003 f9b3 	bl	800589e <memset>
  if(huart->Instance==USART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_UART_MspInit+0x80>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12a      	bne.n	8002598 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <HAL_UART_MspInit+0x84>)
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_UART_MspInit+0x84>)
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	01c9      	lsls	r1, r1, #7
 800254c:	430a      	orrs	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_UART_MspInit+0x84>)
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_UART_MspInit+0x84>)
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_UART_MspInit+0x84>)
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	2201      	movs	r2, #1
 8002562:	4013      	ands	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002568:	210c      	movs	r1, #12
 800256a:	187b      	adds	r3, r7, r1
 800256c:	22c0      	movs	r2, #192	; 0xc0
 800256e:	00d2      	lsls	r2, r2, #3
 8002570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2202      	movs	r2, #2
 8002576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2203      	movs	r2, #3
 8002582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2204      	movs	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258a:	187a      	adds	r2, r7, r1
 800258c:	23a0      	movs	r3, #160	; 0xa0
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 ff3a 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b008      	add	sp, #32
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40021000 	.word	0x40021000

080025a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <HAL_PCD_MspInit+0x28>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d106      	bne.n	80025c8 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_PCD_MspInit+0x2c>)
 80025bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_PCD_MspInit+0x2c>)
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0409      	lsls	r1, r1, #16
 80025c4:	430a      	orrs	r2, r1
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40005c00 	.word	0x40005c00
 80025d4:	40021000 	.word	0x40021000

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 f90e 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
	return 1;
 800260e:	2301      	movs	r3, #1
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_kill>:

int _kill(int pid, int sig)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002620:	f003 f8d8 	bl	80057d4 <__errno>
 8002624:	0003      	movs	r3, r0
 8002626:	2216      	movs	r2, #22
 8002628:	601a      	str	r2, [r3, #0]
	return -1;
 800262a:	2301      	movs	r3, #1
 800262c:	425b      	negs	r3, r3
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}

08002636 <_exit>:

void _exit (int status)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800263e:	2301      	movs	r3, #1
 8002640:	425a      	negs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0011      	movs	r1, r2
 8002646:	0018      	movs	r0, r3
 8002648:	f7ff ffe5 	bl	8002616 <_kill>
	while (1) {}		/* Make sure we hang here */
 800264c:	e7fe      	b.n	800264c <_exit+0x16>
	...

08002650 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <_sbrk+0x50>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <_sbrk+0x16>
		heap_end = &end;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <_sbrk+0x50>)
 8002662:	4a10      	ldr	r2, [pc, #64]	; (80026a4 <_sbrk+0x54>)
 8002664:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <_sbrk+0x50>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <_sbrk+0x50>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	466a      	mov	r2, sp
 8002676:	4293      	cmp	r3, r2
 8002678:	d907      	bls.n	800268a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800267a:	f003 f8ab 	bl	80057d4 <__errno>
 800267e:	0003      	movs	r3, r0
 8002680:	220c      	movs	r2, #12
 8002682:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002684:	2301      	movs	r3, #1
 8002686:	425b      	negs	r3, r3
 8002688:	e006      	b.n	8002698 <_sbrk+0x48>
	}

	heap_end += incr;
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <_sbrk+0x50>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	18d2      	adds	r2, r2, r3
 8002692:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <_sbrk+0x50>)
 8002694:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b004      	add	sp, #16
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	200002b0 	.word	0x200002b0
 80026a4:	200006e8 	.word	0x200006e8

080026a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <SystemInit+0x64>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <SystemInit+0x64>)
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0049      	lsls	r1, r1, #1
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <SystemInit+0x64>)
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <SystemInit+0x64>)
 80026c0:	4913      	ldr	r1, [pc, #76]	; (8002710 <SystemInit+0x68>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <SystemInit+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <SystemInit+0x64>)
 80026cc:	4911      	ldr	r1, [pc, #68]	; (8002714 <SystemInit+0x6c>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <SystemInit+0x64>)
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <SystemInit+0x64>)
 80026d8:	2101      	movs	r1, #1
 80026da:	438a      	bics	r2, r1
 80026dc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <SystemInit+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <SystemInit+0x64>)
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <SystemInit+0x70>)
 80026e6:	400a      	ands	r2, r1
 80026e8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <SystemInit+0x64>)
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <SystemInit+0x64>)
 80026f0:	490a      	ldr	r1, [pc, #40]	; (800271c <SystemInit+0x74>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <SystemInit+0x64>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <SystemInit+0x78>)
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	0512      	lsls	r2, r2, #20
 8002702:	609a      	str	r2, [r3, #8]
#endif
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	40021000 	.word	0x40021000
 8002710:	88ff400c 	.word	0x88ff400c
 8002714:	fef6fff6 	.word	0xfef6fff6
 8002718:	fffbffff 	.word	0xfffbffff
 800271c:	ff02ffff 	.word	0xff02ffff
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002726:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800272a:	e003      	b.n	8002734 <LoopCopyDataInit>

0800272c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800272e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002732:	3104      	adds	r1, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002734:	480b      	ldr	r0, [pc, #44]	; (8002764 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800273a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800273c:	d3f6      	bcc.n	800272c <CopyDataInit>
  ldr  r2, =_sbss
 800273e:	4a0b      	ldr	r2, [pc, #44]	; (800276c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002740:	e002      	b.n	8002748 <LoopFillZerobss>

08002742 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002742:	2300      	movs	r3, #0
  str  r3, [r2]
 8002744:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002746:	3204      	adds	r2, #4

08002748 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <LoopForever+0x16>)
  cmp  r2, r3
 800274a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800274c:	d3f9      	bcc.n	8002742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800274e:	f7ff ffab 	bl	80026a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002752:	f003 f845 	bl	80057e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002756:	f7ff fc8f 	bl	8002078 <main>

0800275a <LoopForever>:

LoopForever:
    b LoopForever
 800275a:	e7fe      	b.n	800275a <LoopForever>
  ldr   r0, =_estack
 800275c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002760:	08006354 	.word	0x08006354
  ldr  r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002768:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 800276c:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8002770:	200006e4 	.word	0x200006e4

08002774 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002774:	e7fe      	b.n	8002774 <ADC1_COMP_IRQHandler>
	...

08002778 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_Init+0x3c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Init+0x3c>)
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002790:	2000      	movs	r0, #0
 8002792:	f000 f811 	bl	80027b8 <HAL_InitTick>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d003      	beq.n	80027a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e001      	b.n	80027a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a2:	f7ff fe55 	bl	8002450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	40022000 	.word	0x40022000

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_InitTick+0x5c>)
 80027c2:	681c      	ldr	r4, [r3, #0]
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_InitTick+0x60>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	0019      	movs	r1, r3
 80027ca:	23fa      	movs	r3, #250	; 0xfa
 80027cc:	0098      	lsls	r0, r3, #2
 80027ce:	f7fd fca3 	bl	8000118 <__udivsi3>
 80027d2:	0003      	movs	r3, r0
 80027d4:	0019      	movs	r1, r3
 80027d6:	0020      	movs	r0, r4
 80027d8:	f7fd fc9e 	bl	8000118 <__udivsi3>
 80027dc:	0003      	movs	r3, r0
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fe07 	bl	80033f2 <HAL_SYSTICK_Config>
 80027e4:	1e03      	subs	r3, r0, #0
 80027e6:	d001      	beq.n	80027ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e00f      	b.n	800280c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d80b      	bhi.n	800280a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	2301      	movs	r3, #1
 80027f6:	425b      	negs	r3, r3
 80027f8:	2200      	movs	r2, #0
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fde4 	bl	80033c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_InitTick+0x64>)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b003      	add	sp, #12
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	20000038 	.word	0x20000038
 8002818:	20000040 	.word	0x20000040
 800281c:	2000003c 	.word	0x2000003c

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_IncTick+0x1c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	001a      	movs	r2, r3
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_IncTick+0x20>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	18d2      	adds	r2, r2, r3
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_IncTick+0x20>)
 8002832:	601a      	str	r2, [r3, #0]
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	20000040 	.word	0x20000040
 8002840:	200006dc 	.word	0x200006dc

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <HAL_GetTick+0x10>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	200006dc 	.word	0x200006dc

08002858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002860:	f7ff fff0 	bl	8002844 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3301      	adds	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_Delay+0x40>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	001a      	movs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	189b      	adds	r3, r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	f7ff ffe0 	bl	8002844 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	429a      	cmp	r2, r3
 800288e:	d8f7      	bhi.n	8002880 <HAL_Delay+0x28>
  {
  }
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000040 	.word	0x20000040

0800289c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e159      	b.n	8002b62 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2250      	movs	r2, #80	; 0x50
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff fdd6 	bl	8002478 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d005      	beq.n	80028e4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2204      	movs	r2, #4
 80028e0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80028e2:	d00b      	beq.n	80028fc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	2210      	movs	r2, #16
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2250      	movs	r2, #80	; 0x50
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e132      	b.n	8002b62 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	4a9a      	ldr	r2, [pc, #616]	; (8002b6c <HAL_ADC_Init+0x2d0>)
 8002902:	4013      	ands	r3, r2
 8002904:	2202      	movs	r2, #2
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2203      	movs	r2, #3
 8002914:	4013      	ands	r3, r2
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_ADC_Init+0x90>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_ADC_Init+0x90>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_ADC_Init+0x92>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d149      	bne.n	80029c6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	429a      	cmp	r2, r3
 800293c:	d00b      	beq.n	8002956 <HAL_ADC_Init+0xba>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	05db      	lsls	r3, r3, #23
 8002946:	429a      	cmp	r2, r3
 8002948:	d005      	beq.n	8002956 <HAL_ADC_Init+0xba>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	061b      	lsls	r3, r3, #24
 8002952:	429a      	cmp	r2, r3
 8002954:	d111      	bne.n	800297a <HAL_ADC_Init+0xde>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0092      	lsls	r2, r2, #2
 8002962:	0892      	lsrs	r2, r2, #2
 8002964:	611a      	str	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	e014      	b.n	80029a4 <HAL_ADC_Init+0x108>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0092      	lsls	r2, r2, #2
 8002986:	0892      	lsrs	r2, r2, #2
 8002988:	611a      	str	r2, [r3, #16]
 800298a:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b78      	ldr	r3, [pc, #480]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 8002990:	4978      	ldr	r1, [pc, #480]	; (8002b74 <HAL_ADC_Init+0x2d8>)
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4b74      	ldr	r3, [pc, #464]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2118      	movs	r1, #24
 80029b0:	438a      	bics	r2, r1
 80029b2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68d9      	ldr	r1, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b69      	ldr	r3, [pc, #420]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 80029cc:	496a      	ldr	r1, [pc, #424]	; (8002b78 <HAL_ADC_Init+0x2dc>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	065a      	lsls	r2, r3, #25
 80029dc:	4b64      	ldr	r3, [pc, #400]	; (8002b70 <HAL_ADC_Init+0x2d4>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	055b      	lsls	r3, r3, #21
 80029ec:	4013      	ands	r3, r2
 80029ee:	d108      	bne.n	8002a02 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0549      	lsls	r1, r1, #21
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	495b      	ldr	r1, [pc, #364]	; (8002b7c <HAL_ADC_Init+0x2e0>)
 8002a0e:	400a      	ands	r2, r1
 8002a10:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68d9      	ldr	r1, [r3, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d101      	bne.n	8002a28 <HAL_ADC_Init+0x18c>
 8002a24:	2304      	movs	r3, #4
 8002a26:	e000      	b.n	8002a2a <HAL_ADC_Init+0x18e>
 8002a28:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a2a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2020      	movs	r0, #32
 8002a30:	5c1b      	ldrb	r3, [r3, r0]
 8002a32:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002a34:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	202c      	movs	r0, #44	; 0x2c
 8002a3a:	5c1b      	ldrb	r3, [r3, r0]
 8002a3c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a3e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002a4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002a54:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a62:	23c2      	movs	r3, #194	; 0xc2
 8002a64:	33ff      	adds	r3, #255	; 0xff
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d00b      	beq.n	8002a82 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2221      	movs	r2, #33	; 0x21
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d11a      	bne.n	8002ac2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	5c9b      	ldrb	r3, [r3, r2]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0249      	lsls	r1, r1, #9
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	e00b      	b.n	8002ac2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	2220      	movs	r2, #32
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	2201      	movs	r2, #1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d11f      	bne.n	8002b0a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	492a      	ldr	r1, [pc, #168]	; (8002b80 <HAL_ADC_Init+0x2e4>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6919      	ldr	r1, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002ae8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002aee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	e00e      	b.n	8002b28 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2201      	movs	r2, #1
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d107      	bne.n	8002b28 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2101      	movs	r1, #1
 8002b24:	438a      	bics	r2, r1
 8002b26:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2107      	movs	r1, #7
 8002b34:	438a      	bics	r2, r1
 8002b36:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6959      	ldr	r1, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	2203      	movs	r2, #3
 8002b56:	4393      	bics	r3, r2
 8002b58:	2201      	movs	r2, #1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b002      	add	sp, #8
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	fffffefd 	.word	0xfffffefd
 8002b70:	40012708 	.word	0x40012708
 8002b74:	ffc3ffff 	.word	0xffc3ffff
 8002b78:	fdffffff 	.word	0xfdffffff
 8002b7c:	fffe0219 	.word	0xfffe0219
 8002b80:	fffffc03 	.word	0xfffffc03

08002b84 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	230f      	movs	r3, #15
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2204      	movs	r2, #4
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d138      	bne.n	8002c12 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2250      	movs	r2, #80	; 0x50
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_Start+0x2a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e038      	b.n	8002c20 <HAL_ADC_Start+0x9c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2250      	movs	r2, #80	; 0x50
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d007      	beq.n	8002bce <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002bbe:	230f      	movs	r3, #15
 8002bc0:	18fc      	adds	r4, r7, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f9b3 	bl	8002f30 <ADC_Enable>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002bce:	230f      	movs	r3, #15
 8002bd0:	18fb      	adds	r3, r7, r3
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d120      	bne.n	8002c1a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	4a12      	ldr	r2, [pc, #72]	; (8002c28 <HAL_ADC_Start+0xa4>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2250      	movs	r2, #80	; 0x50
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	221c      	movs	r2, #28
 8002bfe:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	e003      	b.n	8002c1a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c12:	230f      	movs	r3, #15
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	781b      	ldrb	r3, [r3, #0]
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b005      	add	sp, #20
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	fffff0fe 	.word	0xfffff0fe

08002c2c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b5b0      	push	{r4, r5, r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2250      	movs	r2, #80	; 0x50
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_Stop+0x1e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e02a      	b.n	8002ca0 <HAL_ADC_Stop+0x74>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2250      	movs	r2, #80	; 0x50
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c52:	250f      	movs	r5, #15
 8002c54:	197c      	adds	r4, r7, r5
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f000 fa29 	bl	80030b0 <ADC_ConversionStop>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c62:	197b      	adds	r3, r7, r5
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d113      	bne.n	8002c92 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c6a:	250f      	movs	r5, #15
 8002c6c:	197c      	adds	r4, r7, r5
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f9bd 	bl	8002ff0 <ADC_Disable>
 8002c76:	0003      	movs	r3, r0
 8002c78:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c7a:	197b      	adds	r3, r7, r5
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_ADC_Stop+0x7c>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2250      	movs	r2, #80	; 0x50
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b004      	add	sp, #16
 8002ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca8:	fffffefe 	.word	0xfffffefe

08002cac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d102      	bne.n	8002ccc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e014      	b.n	8002cf6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	2220      	movs	r2, #32
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2250      	movs	r2, #80	; 0x50
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06c      	b.n	8002dcc <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cf6:	f7ff fda5 	bl	8002844 <HAL_GetTick>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002cfe:	e019      	b.n	8002d34 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	d016      	beq.n	8002d34 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_ADC_PollForConversion+0x70>
 8002d0c:	f7ff fd9a 	bl	8002844 <HAL_GetTick>
 8002d10:	0002      	movs	r2, r0
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d20b      	bcs.n	8002d34 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	2204      	movs	r2, #4
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2250      	movs	r2, #80	; 0x50
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e04b      	b.n	8002dcc <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d0df      	beq.n	8002d00 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	23c0      	movs	r3, #192	; 0xc0
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d12e      	bne.n	8002dba <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d129      	bne.n	8002dba <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d122      	bne.n	8002dba <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d110      	bne.n	8002da2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	210c      	movs	r1, #12
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <HAL_ADC_PollForConversion+0x128>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	2201      	movs	r2, #1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8002da0:	e00b      	b.n	8002dba <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	2220      	movs	r2, #32
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db2:	2201      	movs	r2, #1
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	fffffefe 	.word	0xfffffefe

08002dd8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2250      	movs	r2, #80	; 0x50
 8002dfe:	5c9b      	ldrb	r3, [r3, r2]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x18>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e085      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x124>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2250      	movs	r2, #80	; 0x50
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2204      	movs	r2, #4
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d00b      	beq.n	8002e34 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e20:	2220      	movs	r2, #32
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2250      	movs	r2, #80	; 0x50
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06f      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a38      	ldr	r2, [pc, #224]	; (8002f1c <HAL_ADC_ConfigChannel+0x12c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d035      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	035b      	lsls	r3, r3, #13
 8002e4a:	0b5a      	lsrs	r2, r3, #13
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	02db      	lsls	r3, r3, #11
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	0409      	lsls	r1, r1, #16
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002e6e:	200a      	movs	r0, #10
 8002e70:	f000 f964 	bl	800313c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d006      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	03c9      	lsls	r1, r1, #15
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	4013      	ands	r3, r2
 8002e98:	d037      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002ea0:	2180      	movs	r1, #128	; 0x80
 8002ea2:	0449      	lsls	r1, r1, #17
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e02f      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	035b      	lsls	r3, r3, #13
 8002eb6:	0b5b      	lsrs	r3, r3, #13
 8002eb8:	43d9      	mvns	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	02db      	lsls	r3, r3, #11
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d005      	beq.n	8002eda <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002ece:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002ed4:	4913      	ldr	r1, [pc, #76]	; (8002f24 <HAL_ADC_ConfigChannel+0x134>)
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	029b      	lsls	r3, r3, #10
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d005      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_ADC_ConfigChannel+0x138>)
 8002eee:	400a      	ands	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	025b      	lsls	r3, r3, #9
 8002efa:	4013      	ands	r3, r2
 8002efc:	d005      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <HAL_ADC_ConfigChannel+0x130>)
 8002f04:	4909      	ldr	r1, [pc, #36]	; (8002f2c <HAL_ADC_ConfigChannel+0x13c>)
 8002f06:	400a      	ands	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2250      	movs	r2, #80	; 0x50
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00001001 	.word	0x00001001
 8002f20:	40012708 	.word	0x40012708
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	ffbfffff 	.word	0xffbfffff
 8002f2c:	feffffff 	.word	0xfeffffff

08002f30 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2203      	movs	r2, #3
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d108      	bne.n	8002f5c <ADC_Enable+0x2c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <ADC_Enable+0x2c>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <ADC_Enable+0x2e>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13f      	bne.n	8002fe2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <ADC_Enable+0xbc>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	2210      	movs	r2, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	2201      	movs	r2, #1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e02c      	b.n	8002fe4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f000 f8ce 	bl	800313c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fa0:	f7ff fc50 	bl	8002844 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fa8:	e014      	b.n	8002fd4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002faa:	f7ff fc4b 	bl	8002844 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b0a      	cmp	r3, #10
 8002fb6:	d90d      	bls.n	8002fd4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	2201      	movs	r2, #1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e007      	b.n	8002fe4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d1e3      	bne.n	8002faa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	80000017 	.word	0x80000017

08002ff0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2203      	movs	r2, #3
 8003004:	4013      	ands	r3, r2
 8003006:	2b01      	cmp	r3, #1
 8003008:	d108      	bne.n	800301c <ADC_Disable+0x2c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <ADC_Disable+0x2c>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <ADC_Disable+0x2e>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d041      	beq.n	80030a6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2205      	movs	r2, #5
 800302a:	4013      	ands	r3, r2
 800302c:	2b01      	cmp	r3, #1
 800302e:	d110      	bne.n	8003052 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2102      	movs	r1, #2
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2203      	movs	r2, #3
 8003046:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003048:	f7ff fbfc 	bl	8002844 <HAL_GetTick>
 800304c:	0003      	movs	r3, r0
 800304e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003050:	e022      	b.n	8003098 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	2210      	movs	r2, #16
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003062:	2201      	movs	r2, #1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01c      	b.n	80030a8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800306e:	f7ff fbe9 	bl	8002844 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b0a      	cmp	r3, #10
 800307a:	d90d      	bls.n	8003098 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	2210      	movs	r2, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	2201      	movs	r2, #1
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d0e3      	beq.n	800306e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	0018      	movs	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d034      	beq.n	8003132 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2204      	movs	r2, #4
 80030d0:	4013      	ands	r3, r2
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d10d      	bne.n	80030f2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80030e0:	d107      	bne.n	80030f2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2110      	movs	r1, #16
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030f2:	f7ff fba7 	bl	8002844 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80030fa:	e014      	b.n	8003126 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030fc:	f7ff fba2 	bl	8002844 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b0a      	cmp	r3, #10
 8003108:	d90d      	bls.n	8003126 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	2210      	movs	r2, #16
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	2201      	movs	r2, #1
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e006      	b.n	8003134 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2204      	movs	r2, #4
 800312e:	4013      	ands	r3, r2
 8003130:	d1e4      	bne.n	80030fc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}

0800313c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <ADC_DelayMicroSecond+0x34>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	490a      	ldr	r1, [pc, #40]	; (8003174 <ADC_DelayMicroSecond+0x38>)
 800314a:	0018      	movs	r0, r3
 800314c:	f7fc ffe4 	bl	8000118 <__udivsi3>
 8003150:	0003      	movs	r3, r0
 8003152:	001a      	movs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4353      	muls	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800315a:	e002      	b.n	8003162 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f9      	bne.n	800315c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000038 	.word	0x20000038
 8003174:	000f4240 	.word	0x000f4240

08003178 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003182:	2317      	movs	r3, #23
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2250      	movs	r2, #80	; 0x50
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_ADCEx_Calibration_Start+0x28>
 800319c:	2302      	movs	r3, #2
 800319e:	e07a      	b.n	8003296 <HAL_ADCEx_Calibration_Start+0x11e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2250      	movs	r2, #80	; 0x50
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2203      	movs	r2, #3
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <HAL_ADCEx_Calibration_Start+0x50>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2201      	movs	r2, #1
 80031be:	4013      	ands	r3, r2
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_ADCEx_Calibration_Start+0x50>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_ADCEx_Calibration_Start+0x52>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d152      	bne.n	8003274 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_ADCEx_Calibration_Start+0x128>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	2202      	movs	r2, #2
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2203      	movs	r2, #3
 80031e6:	4013      	ands	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2103      	movs	r1, #3
 80031f6:	438a      	bics	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	0609      	lsls	r1, r1, #24
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800320c:	f7ff fb1a 	bl	8002844 <HAL_GetTick>
 8003210:	0003      	movs	r3, r0
 8003212:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003214:	e014      	b.n	8003240 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003216:	f7ff fb15 	bl	8002844 <HAL_GetTick>
 800321a:	0002      	movs	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b0a      	cmp	r3, #10
 8003222:	d90d      	bls.n	8003240 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003228:	2212      	movs	r2, #18
 800322a:	4393      	bics	r3, r2
 800322c:	2210      	movs	r2, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2250      	movs	r2, #80	; 0x50
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e02a      	b.n	8003296 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0fdb      	lsrs	r3, r3, #31
 8003248:	07da      	lsls	r2, r3, #31
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	429a      	cmp	r2, r3
 8003250:	d0e1      	beq.n	8003216 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68d9      	ldr	r1, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	430a      	orrs	r2, r1
 8003260:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	2203      	movs	r2, #3
 8003268:	4393      	bics	r3, r2
 800326a:	2201      	movs	r2, #1
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
 8003272:	e009      	b.n	8003288 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	2220      	movs	r2, #32
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003280:	2317      	movs	r3, #23
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2250      	movs	r2, #80	; 0x50
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003290:	2317      	movs	r3, #23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	781b      	ldrb	r3, [r3, #0]
}
 8003296:	0018      	movs	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	b006      	add	sp, #24
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	fffffefd 	.word	0xfffffefd

080032a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	0002      	movs	r2, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80032b2:	1dfb      	adds	r3, r7, #7
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b7f      	cmp	r3, #127	; 0x7f
 80032b8:	d932      	bls.n	8003320 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032ba:	4a2f      	ldr	r2, [pc, #188]	; (8003378 <NVIC_SetPriority+0xd4>)
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	0019      	movs	r1, r3
 80032c2:	230f      	movs	r3, #15
 80032c4:	400b      	ands	r3, r1
 80032c6:	3b08      	subs	r3, #8
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3306      	adds	r3, #6
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	18d3      	adds	r3, r2, r3
 80032d0:	3304      	adds	r3, #4
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1dfa      	adds	r2, r7, #7
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	0011      	movs	r1, r2
 80032da:	2203      	movs	r2, #3
 80032dc:	400a      	ands	r2, r1
 80032de:	00d2      	lsls	r2, r2, #3
 80032e0:	21ff      	movs	r1, #255	; 0xff
 80032e2:	4091      	lsls	r1, r2
 80032e4:	000a      	movs	r2, r1
 80032e6:	43d2      	mvns	r2, r2
 80032e8:	401a      	ands	r2, r3
 80032ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	401a      	ands	r2, r3
 80032f4:	1dfb      	adds	r3, r7, #7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	0018      	movs	r0, r3
 80032fa:	2303      	movs	r3, #3
 80032fc:	4003      	ands	r3, r0
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003302:	481d      	ldr	r0, [pc, #116]	; (8003378 <NVIC_SetPriority+0xd4>)
 8003304:	1dfb      	adds	r3, r7, #7
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	001c      	movs	r4, r3
 800330a:	230f      	movs	r3, #15
 800330c:	4023      	ands	r3, r4
 800330e:	3b08      	subs	r3, #8
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	430a      	orrs	r2, r1
 8003314:	3306      	adds	r3, #6
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	18c3      	adds	r3, r0, r3
 800331a:	3304      	adds	r3, #4
 800331c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800331e:	e027      	b.n	8003370 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003320:	4a16      	ldr	r2, [pc, #88]	; (800337c <NVIC_SetPriority+0xd8>)
 8003322:	1dfb      	adds	r3, r7, #7
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b25b      	sxtb	r3, r3
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	33c0      	adds	r3, #192	; 0xc0
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	589b      	ldr	r3, [r3, r2]
 8003330:	1dfa      	adds	r2, r7, #7
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	0011      	movs	r1, r2
 8003336:	2203      	movs	r2, #3
 8003338:	400a      	ands	r2, r1
 800333a:	00d2      	lsls	r2, r2, #3
 800333c:	21ff      	movs	r1, #255	; 0xff
 800333e:	4091      	lsls	r1, r2
 8003340:	000a      	movs	r2, r1
 8003342:	43d2      	mvns	r2, r2
 8003344:	401a      	ands	r2, r3
 8003346:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	401a      	ands	r2, r3
 8003350:	1dfb      	adds	r3, r7, #7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	0018      	movs	r0, r3
 8003356:	2303      	movs	r3, #3
 8003358:	4003      	ands	r3, r0
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800335e:	4807      	ldr	r0, [pc, #28]	; (800337c <NVIC_SetPriority+0xd8>)
 8003360:	1dfb      	adds	r3, r7, #7
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	b25b      	sxtb	r3, r3
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	430a      	orrs	r2, r1
 800336a:	33c0      	adds	r3, #192	; 0xc0
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	501a      	str	r2, [r3, r0]
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b003      	add	sp, #12
 8003376:	bd90      	pop	{r4, r7, pc}
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	e000e100 	.word	0xe000e100

08003380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	4a0c      	ldr	r2, [pc, #48]	; (80033c0 <SysTick_Config+0x40>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003392:	2301      	movs	r3, #1
 8003394:	e010      	b.n	80033b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <SysTick_Config+0x44>)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	3a01      	subs	r2, #1
 800339c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339e:	2301      	movs	r3, #1
 80033a0:	425b      	negs	r3, r3
 80033a2:	2103      	movs	r1, #3
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff ff7d 	bl	80032a4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <SysTick_Config+0x44>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b0:	4b04      	ldr	r3, [pc, #16]	; (80033c4 <SysTick_Config+0x44>)
 80033b2:	2207      	movs	r2, #7
 80033b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00ffffff 	.word	0x00ffffff
 80033c4:	e000e010 	.word	0xe000e010

080033c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	210f      	movs	r1, #15
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	1c02      	adds	r2, r0, #0
 80033d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b25b      	sxtb	r3, r3
 80033e2:	0011      	movs	r1, r2
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <NVIC_SetPriority>
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff ffbf 	bl	8003380 <SysTick_Config>
 8003402:	0003      	movs	r3, r0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003422:	e14f      	b.n	80036c4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2101      	movs	r1, #1
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4091      	lsls	r1, r2
 800342e:	000a      	movs	r2, r1
 8003430:	4013      	ands	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d100      	bne.n	800343c <HAL_GPIO_Init+0x30>
 800343a:	e140      	b.n	80036be <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d00b      	beq.n	800345c <HAL_GPIO_Init+0x50>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d007      	beq.n	800345c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003450:	2b11      	cmp	r3, #17
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d130      	bne.n	80034be <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	409a      	lsls	r2, r3
 800346a:	0013      	movs	r3, r2
 800346c:	43da      	mvns	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4013      	ands	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	0013      	movs	r3, r2
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003492:	2201      	movs	r2, #1
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
 8003498:	0013      	movs	r3, r2
 800349a:	43da      	mvns	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	091b      	lsrs	r3, r3, #4
 80034a8:	2201      	movs	r2, #1
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
 80034b0:	0013      	movs	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	409a      	lsls	r2, r3
 80034cc:	0013      	movs	r3, r2
 80034ce:	43da      	mvns	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	0013      	movs	r3, r2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0xf2>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d123      	bne.n	8003546 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	58d3      	ldr	r3, [r2, r3]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2207      	movs	r2, #7
 8003510:	4013      	ands	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	409a      	lsls	r2, r3
 8003518:	0013      	movs	r3, r2
 800351a:	43da      	mvns	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2107      	movs	r1, #7
 800352a:	400b      	ands	r3, r1
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	409a      	lsls	r2, r3
 8003530:	0013      	movs	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	08da      	lsrs	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3208      	adds	r2, #8
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	6939      	ldr	r1, [r7, #16]
 8003544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	409a      	lsls	r2, r3
 8003554:	0013      	movs	r3, r2
 8003556:	43da      	mvns	r2, r3
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	401a      	ands	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	409a      	lsls	r2, r3
 800356c:	0013      	movs	r3, r2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	055b      	lsls	r3, r3, #21
 8003582:	4013      	ands	r3, r2
 8003584:	d100      	bne.n	8003588 <HAL_GPIO_Init+0x17c>
 8003586:	e09a      	b.n	80036be <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003588:	4b54      	ldr	r3, [pc, #336]	; (80036dc <HAL_GPIO_Init+0x2d0>)
 800358a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <HAL_GPIO_Init+0x2d0>)
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003594:	4a52      	ldr	r2, [pc, #328]	; (80036e0 <HAL_GPIO_Init+0x2d4>)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	589b      	ldr	r3, [r3, r2]
 80035a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2203      	movs	r2, #3
 80035a6:	4013      	ands	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	220f      	movs	r2, #15
 80035ac:	409a      	lsls	r2, r3
 80035ae:	0013      	movs	r3, r2
 80035b0:	43da      	mvns	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	23a0      	movs	r3, #160	; 0xa0
 80035bc:	05db      	lsls	r3, r3, #23
 80035be:	429a      	cmp	r2, r3
 80035c0:	d019      	beq.n	80035f6 <HAL_GPIO_Init+0x1ea>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a47      	ldr	r2, [pc, #284]	; (80036e4 <HAL_GPIO_Init+0x2d8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x1e6>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <HAL_GPIO_Init+0x2dc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_GPIO_Init+0x1e2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a45      	ldr	r2, [pc, #276]	; (80036ec <HAL_GPIO_Init+0x2e0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <HAL_GPIO_Init+0x1de>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a44      	ldr	r2, [pc, #272]	; (80036f0 <HAL_GPIO_Init+0x2e4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_GPIO_Init+0x1da>
 80035e2:	2305      	movs	r3, #5
 80035e4:	e008      	b.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e006      	b.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035ea:	2303      	movs	r3, #3
 80035ec:	e004      	b.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e002      	b.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035f6:	2300      	movs	r3, #0
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	2103      	movs	r1, #3
 80035fc:	400a      	ands	r2, r1
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	4093      	lsls	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003608:	4935      	ldr	r1, [pc, #212]	; (80036e0 <HAL_GPIO_Init+0x2d4>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	3302      	adds	r3, #2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003616:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	025b      	lsls	r3, r3, #9
 800362e:	4013      	ands	r3, r2
 8003630:	d003      	beq.n	800363a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800363a:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	43da      	mvns	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	029b      	lsls	r3, r3, #10
 8003658:	4013      	ands	r3, r2
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	43da      	mvns	r2, r3
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	035b      	lsls	r3, r3, #13
 8003682:	4013      	ands	r3, r2
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800368e:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	039b      	lsls	r3, r3, #14
 80036ac:	4013      	ands	r3, r2
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3301      	adds	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	40da      	lsrs	r2, r3
 80036cc:	1e13      	subs	r3, r2, #0
 80036ce:	d000      	beq.n	80036d2 <HAL_GPIO_Init+0x2c6>
 80036d0:	e6a8      	b.n	8003424 <HAL_GPIO_Init+0x18>
  }
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b006      	add	sp, #24
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	50000400 	.word	0x50000400
 80036e8:	50000800 	.word	0x50000800
 80036ec:	50000c00 	.word	0x50000c00
 80036f0:	50001c00 	.word	0x50001c00
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	000a      	movs	r2, r1
 8003702:	1cbb      	adds	r3, r7, #2
 8003704:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	1cba      	adds	r2, r7, #2
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	4013      	ands	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003712:	230f      	movs	r3, #15
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	e003      	b.n	8003724 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371c:	230f      	movs	r3, #15
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003724:	230f      	movs	r3, #15
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	781b      	ldrb	r3, [r3, #0]
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	0008      	movs	r0, r1
 800373c:	0011      	movs	r1, r2
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	1c02      	adds	r2, r0, #0
 8003742:	801a      	strh	r2, [r3, #0]
 8003744:	1c7b      	adds	r3, r7, #1
 8003746:	1c0a      	adds	r2, r1, #0
 8003748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800374a:	1c7b      	adds	r3, r7, #1
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d004      	beq.n	800375c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003752:	1cbb      	adds	r3, r7, #2
 8003754:	881a      	ldrh	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800375a:	e003      	b.n	8003764 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800375c:	1cbb      	adds	r3, r7, #2
 800375e:	881a      	ldrh	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800376c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376e:	b08b      	sub	sp, #44	; 0x2c
 8003770:	af06      	add	r7, sp, #24
 8003772:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e100      	b.n	8003980 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a81      	ldr	r2, [pc, #516]	; (8003988 <HAL_PCD_Init+0x21c>)
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d108      	bne.n	800379c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	23aa      	movs	r3, #170	; 0xaa
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	2100      	movs	r1, #0
 8003792:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f7fe ff06 	bl	80025a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a7a      	ldr	r2, [pc, #488]	; (8003988 <HAL_PCD_Init+0x21c>)
 80037a0:	2103      	movs	r1, #3
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f001 ff0f 	bl	80055cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	230f      	movs	r3, #15
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e058      	b.n	800386a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037b8:	200f      	movs	r0, #15
 80037ba:	183b      	adds	r3, r7, r0
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	0013      	movs	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	18cb      	adds	r3, r1, r3
 80037cc:	3301      	adds	r3, #1
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037d2:	183b      	adds	r3, r7, r0
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	0013      	movs	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	183a      	adds	r2, r7, r0
 80037e4:	7812      	ldrb	r2, [r2, #0]
 80037e6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037e8:	183b      	adds	r3, r7, r0
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	0004      	movs	r4, r0
 80037ee:	183b      	adds	r3, r7, r0
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b298      	uxth	r0, r3
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	0013      	movs	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	18cb      	adds	r3, r1, r3
 8003800:	3336      	adds	r3, #54	; 0x36
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003806:	193b      	adds	r3, r7, r4
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	0013      	movs	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	189b      	adds	r3, r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	18cb      	adds	r3, r1, r3
 8003818:	3303      	adds	r3, #3
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800381e:	193b      	adds	r3, r7, r4
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	0013      	movs	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	189b      	adds	r3, r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	18cb      	adds	r3, r1, r3
 800382e:	3338      	adds	r3, #56	; 0x38
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003834:	193b      	adds	r3, r7, r4
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	0013      	movs	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	189b      	adds	r3, r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	18cb      	adds	r3, r1, r3
 8003844:	333c      	adds	r3, #60	; 0x3c
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800384a:	193b      	adds	r3, r7, r4
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	0013      	movs	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	189b      	adds	r3, r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	18cb      	adds	r3, r1, r3
 800385a:	3340      	adds	r3, #64	; 0x40
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003860:	193b      	adds	r3, r7, r4
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	193b      	adds	r3, r7, r4
 8003866:	3201      	adds	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	230f      	movs	r3, #15
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d39f      	bcc.n	80037b8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e056      	b.n	8003930 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003882:	240f      	movs	r4, #15
 8003884:	193b      	adds	r3, r7, r4
 8003886:	781a      	ldrb	r2, [r3, #0]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	236a      	movs	r3, #106	; 0x6a
 800388c:	33ff      	adds	r3, #255	; 0xff
 800388e:	0019      	movs	r1, r3
 8003890:	0013      	movs	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	189b      	adds	r3, r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	18c3      	adds	r3, r0, r3
 800389a:	185b      	adds	r3, r3, r1
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	23b4      	movs	r3, #180	; 0xb4
 80038a8:	0059      	lsls	r1, r3, #1
 80038aa:	0013      	movs	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	18c3      	adds	r3, r0, r3
 80038b4:	185b      	adds	r3, r3, r1
 80038b6:	193a      	adds	r2, r7, r4
 80038b8:	7812      	ldrb	r2, [r2, #0]
 80038ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	781a      	ldrb	r2, [r3, #0]
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	236c      	movs	r3, #108	; 0x6c
 80038c4:	33ff      	adds	r3, #255	; 0xff
 80038c6:	0019      	movs	r1, r3
 80038c8:	0013      	movs	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	18c3      	adds	r3, r0, r3
 80038d2:	185b      	adds	r3, r3, r1
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	23bc      	movs	r3, #188	; 0xbc
 80038e0:	0059      	lsls	r1, r3, #1
 80038e2:	0013      	movs	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	18c3      	adds	r3, r0, r3
 80038ec:	185b      	adds	r3, r3, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f2:	193b      	adds	r3, r7, r4
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	23be      	movs	r3, #190	; 0xbe
 80038fa:	0059      	lsls	r1, r3, #1
 80038fc:	0013      	movs	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	189b      	adds	r3, r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	18c3      	adds	r3, r0, r3
 8003906:	185b      	adds	r3, r3, r1
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800390c:	193b      	adds	r3, r7, r4
 800390e:	781a      	ldrb	r2, [r3, #0]
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	23c0      	movs	r3, #192	; 0xc0
 8003914:	0059      	lsls	r1, r3, #1
 8003916:	0013      	movs	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	189b      	adds	r3, r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	18c3      	adds	r3, r0, r3
 8003920:	185b      	adds	r3, r3, r1
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003926:	193b      	adds	r3, r7, r4
 8003928:	781a      	ldrb	r2, [r3, #0]
 800392a:	193b      	adds	r3, r7, r4
 800392c:	3201      	adds	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d3a1      	bcc.n	8003882 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	466a      	mov	r2, sp
 8003946:	0011      	movs	r1, r2
 8003948:	001a      	movs	r2, r3
 800394a:	3210      	adds	r2, #16
 800394c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800394e:	c170      	stmia	r1!, {r4, r5, r6}
 8003950:	ca30      	ldmia	r2!, {r4, r5}
 8003952:	c130      	stmia	r1!, {r4, r5}
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f001 fe51 	bl	8005600 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <HAL_PCD_Init+0x21c>)
 800396a:	2101      	movs	r1, #1
 800396c:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d103      	bne.n	800397e <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	0018      	movs	r0, r3
 800397a:	f000 f807 	bl	800398c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b005      	add	sp, #20
 8003986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003988:	000002a9 	.word	0x000002a9

0800398c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	23ba      	movs	r3, #186	; 0xba
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	2101      	movs	r1, #1
 80039a2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	23b8      	movs	r3, #184	; 0xb8
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	2100      	movs	r1, #0
 80039ac:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2254      	movs	r2, #84	; 0x54
 80039b2:	5a9b      	ldrh	r3, [r3, r2]
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2201      	movs	r2, #1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	b299      	uxth	r1, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2254      	movs	r2, #84	; 0x54
 80039c0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2254      	movs	r2, #84	; 0x54
 80039c6:	5a9b      	ldrh	r3, [r3, r2]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2202      	movs	r2, #2
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b299      	uxth	r1, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2254      	movs	r2, #84	; 0x54
 80039d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b004      	add	sp, #16
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b08a      	sub	sp, #40	; 0x28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f000 fbab 	bl	800414a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f4:	4bce      	ldr	r3, [pc, #824]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	220c      	movs	r2, #12
 80039fa:	4013      	ands	r3, r2
 80039fc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fe:	4bcc      	ldr	r3, [pc, #816]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	025b      	lsls	r3, r3, #9
 8003a06:	4013      	ands	r3, r2
 8003a08:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d100      	bne.n	8003a16 <HAL_RCC_OscConfig+0x36>
 8003a14:	e07e      	b.n	8003b14 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d007      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d112      	bne.n	8003a48 <HAL_RCC_OscConfig+0x68>
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	025b      	lsls	r3, r3, #9
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a2c:	4bc0      	ldr	r3, [pc, #768]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	4013      	ands	r3, r2
 8003a36:	d100      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5a>
 8003a38:	e06b      	b.n	8003b12 <HAL_RCC_OscConfig+0x132>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d167      	bne.n	8003b12 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f000 fb81 	bl	800414a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	025b      	lsls	r3, r3, #9
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x84>
 8003a54:	4bb6      	ldr	r3, [pc, #728]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4bb5      	ldr	r3, [pc, #724]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0249      	lsls	r1, r1, #9
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e027      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	23a0      	movs	r3, #160	; 0xa0
 8003a6a:	02db      	lsls	r3, r3, #11
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10e      	bne.n	8003a8e <HAL_RCC_OscConfig+0xae>
 8003a70:	4baf      	ldr	r3, [pc, #700]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4bae      	ldr	r3, [pc, #696]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	02c9      	lsls	r1, r1, #11
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	4bac      	ldr	r3, [pc, #688]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4bab      	ldr	r3, [pc, #684]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0249      	lsls	r1, r1, #9
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e012      	b.n	8003ab4 <HAL_RCC_OscConfig+0xd4>
 8003a8e:	4ba8      	ldr	r3, [pc, #672]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4ba7      	ldr	r3, [pc, #668]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a94:	49a7      	ldr	r1, [pc, #668]	; (8003d34 <HAL_RCC_OscConfig+0x354>)
 8003a96:	400a      	ands	r2, r1
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	4ba5      	ldr	r3, [pc, #660]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	025b      	lsls	r3, r3, #9
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4ba1      	ldr	r3, [pc, #644]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4ba0      	ldr	r3, [pc, #640]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003aae:	49a2      	ldr	r1, [pc, #648]	; (8003d38 <HAL_RCC_OscConfig+0x358>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fe fec2 	bl	8002844 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac4:	e009      	b.n	8003ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac6:	f7fe febd 	bl	8002844 <HAL_GetTick>
 8003aca:	0002      	movs	r2, r0
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b64      	cmp	r3, #100	; 0x64
 8003ad2:	d902      	bls.n	8003ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f000 fb38 	bl	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ada:	4b95      	ldr	r3, [pc, #596]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d0ef      	beq.n	8003ac6 <HAL_RCC_OscConfig+0xe6>
 8003ae6:	e015      	b.n	8003b14 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fe feac 	bl	8002844 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af2:	f7fe fea7 	bl	8002844 <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e322      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b04:	4b8a      	ldr	r3, [pc, #552]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	029b      	lsls	r3, r3, #10
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x112>
 8003b10:	e000      	b.n	8003b14 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d100      	bne.n	8003b20 <HAL_RCC_OscConfig+0x140>
 8003b1e:	e08a      	b.n	8003c36 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d13d      	bne.n	8003bae <HAL_RCC_OscConfig+0x1ce>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d13a      	bne.n	8003bae <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b38:	4b7d      	ldr	r3, [pc, #500]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_RCC_OscConfig+0x16c>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e2fe      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4a7a      	ldr	r2, [pc, #488]	; (8003d3c <HAL_RCC_OscConfig+0x35c>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b62:	4b73      	ldr	r3, [pc, #460]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2209      	movs	r2, #9
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	4b70      	ldr	r3, [pc, #448]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b74:	f000 fc1e 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8003b78:	0001      	movs	r1, r0
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	220f      	movs	r2, #15
 8003b82:	4013      	ands	r3, r2
 8003b84:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_RCC_OscConfig+0x360>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	000a      	movs	r2, r1
 8003b8a:	40da      	lsrs	r2, r3
 8003b8c:	4b6d      	ldr	r3, [pc, #436]	; (8003d44 <HAL_RCC_OscConfig+0x364>)
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b90:	2513      	movs	r5, #19
 8003b92:	197c      	adds	r4, r7, r5
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7fe fe0f 	bl	80027b8 <HAL_InitTick>
 8003b9a:	0003      	movs	r3, r0
 8003b9c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b9e:	197b      	adds	r3, r7, r5
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d047      	beq.n	8003c36 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8003ba6:	2313      	movs	r3, #19
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	e2cd      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d027      	beq.n	8003c04 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bb4:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2209      	movs	r2, #9
 8003bba:	4393      	bics	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe fe3d 	bl	8002844 <HAL_GetTick>
 8003bca:	0003      	movs	r3, r0
 8003bcc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd0:	f7fe fe38 	bl	8002844 <HAL_GetTick>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e2b3      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003be2:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2204      	movs	r2, #4
 8003be8:	4013      	ands	r3, r2
 8003bea:	d0f1      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_RCC_OscConfig+0x35c>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	e018      	b.n	8003c36 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe fe18 	bl	8002844 <HAL_GetTick>
 8003c14:	0003      	movs	r3, r0
 8003c16:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe fe13 	bl	8002844 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e28e      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c2c:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2204      	movs	r2, #4
 8003c32:	4013      	ands	r3, r2
 8003c34:	d1f1      	bne.n	8003c1a <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <HAL_RCC_OscConfig+0x262>
 8003c40:	e09e      	b.n	8003d80 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d13f      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4013      	ands	r3, r2
 8003c52:	d005      	beq.n	8003c60 <HAL_RCC_OscConfig+0x280>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e274      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a38      	ldr	r2, [pc, #224]	; (8003d48 <HAL_RCC_OscConfig+0x368>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	0a19      	lsrs	r1, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	061a      	lsls	r2, r3, #24
 8003c82:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	0b5b      	lsrs	r3, r3, #13
 8003c8e:	3301      	adds	r3, #1
 8003c90:	2280      	movs	r2, #128	; 0x80
 8003c92:	0212      	lsls	r2, r2, #8
 8003c94:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c96:	4b26      	ldr	r3, [pc, #152]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	210f      	movs	r1, #15
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	4927      	ldr	r1, [pc, #156]	; (8003d40 <HAL_RCC_OscConfig+0x360>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ca6:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <HAL_RCC_OscConfig+0x364>)
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003caa:	2513      	movs	r5, #19
 8003cac:	197c      	adds	r4, r7, r5
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f7fe fd82 	bl	80027b8 <HAL_InitTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003cb8:	197b      	adds	r3, r7, r5
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05f      	beq.n	8003d80 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8003cc0:	2313      	movs	r3, #19
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	e240      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d03d      	beq.n	8003d4c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b16      	ldr	r3, [pc, #88]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	0049      	lsls	r1, r1, #1
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fe fdb1 	bl	8002844 <HAL_GetTick>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fdac 	bl	8002844 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e227      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d06:	4b0a      	ldr	r3, [pc, #40]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a0f      	ldr	r2, [pc, #60]	; (8003d48 <HAL_RCC_OscConfig+0x368>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	0a19      	lsrs	r1, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	061a      	lsls	r2, r3, #24
 8003d28:	4b01      	ldr	r3, [pc, #4]	; (8003d30 <HAL_RCC_OscConfig+0x350>)
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e027      	b.n	8003d80 <HAL_RCC_OscConfig+0x3a0>
 8003d30:	40021000 	.word	0x40021000
 8003d34:	fffeffff 	.word	0xfffeffff
 8003d38:	fffbffff 	.word	0xfffbffff
 8003d3c:	ffffe0ff 	.word	0xffffe0ff
 8003d40:	08006260 	.word	0x08006260
 8003d44:	20000038 	.word	0x20000038
 8003d48:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d4c:	4bbd      	ldr	r3, [pc, #756]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4bbc      	ldr	r3, [pc, #752]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003d52:	49bd      	ldr	r1, [pc, #756]	; (8004048 <HAL_RCC_OscConfig+0x668>)
 8003d54:	400a      	ands	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fd74 	bl	8002844 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d62:	f7fe fd6f 	bl	8002844 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1ea      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d74:	4bb3      	ldr	r3, [pc, #716]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	4013      	ands	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d019      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4bac      	ldr	r3, [pc, #688]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d96:	4bab      	ldr	r3, [pc, #684]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003d98:	2101      	movs	r1, #1
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fd51 	bl	8002844 <HAL_GetTick>
 8003da2:	0003      	movs	r3, r0
 8003da4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da8:	f7fe fd4c 	bl	8002844 <HAL_GetTick>
 8003dac:	0002      	movs	r2, r0
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1c7      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dba:	4ba2      	ldr	r3, [pc, #648]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d0f1      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3c8>
 8003dc4:	e018      	b.n	8003df8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc6:	4b9f      	ldr	r3, [pc, #636]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dca:	4b9e      	ldr	r3, [pc, #632]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fd37 	bl	8002844 <HAL_GetTick>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fd32 	bl	8002844 <HAL_GetTick>
 8003de0:	0002      	movs	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1ad      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dee:	4b95      	ldr	r3, [pc, #596]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df2:	2202      	movs	r2, #2
 8003df4:	4013      	ands	r3, r2
 8003df6:	d1f1      	bne.n	8003ddc <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d100      	bne.n	8003e04 <HAL_RCC_OscConfig+0x424>
 8003e02:	e0af      	b.n	8003f64 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e04:	2327      	movs	r3, #39	; 0x27
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0c:	4b8d      	ldr	r3, [pc, #564]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	055b      	lsls	r3, r3, #21
 8003e14:	4013      	ands	r3, r2
 8003e16:	d10a      	bne.n	8003e2e <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b8a      	ldr	r3, [pc, #552]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1c:	4b89      	ldr	r3, [pc, #548]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	0549      	lsls	r1, r1, #21
 8003e22:	430a      	orrs	r2, r1
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003e26:	2327      	movs	r3, #39	; 0x27
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b87      	ldr	r3, [pc, #540]	; (800404c <HAL_RCC_OscConfig+0x66c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4013      	ands	r3, r2
 8003e38:	d11a      	bne.n	8003e70 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b84      	ldr	r3, [pc, #528]	; (800404c <HAL_RCC_OscConfig+0x66c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b83      	ldr	r3, [pc, #524]	; (800404c <HAL_RCC_OscConfig+0x66c>)
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	0049      	lsls	r1, r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e48:	f7fe fcfc 	bl	8002844 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e52:	f7fe fcf7 	bl	8002844 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b64      	cmp	r3, #100	; 0x64
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e172      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e64:	4b79      	ldr	r3, [pc, #484]	; (800404c <HAL_RCC_OscConfig+0x66c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4ac>
 8003e7c:	4b71      	ldr	r3, [pc, #452]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e80:	4b70      	ldr	r3, [pc, #448]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	0049      	lsls	r1, r1, #1
 8003e86:	430a      	orrs	r2, r1
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
 8003e8a:	e031      	b.n	8003ef0 <HAL_RCC_OscConfig+0x510>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x4ce>
 8003e94:	4b6b      	ldr	r3, [pc, #428]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e98:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003e9a:	496b      	ldr	r1, [pc, #428]	; (8004048 <HAL_RCC_OscConfig+0x668>)
 8003e9c:	400a      	ands	r2, r1
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea4:	4b67      	ldr	r3, [pc, #412]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ea6:	496a      	ldr	r1, [pc, #424]	; (8004050 <HAL_RCC_OscConfig+0x670>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	651a      	str	r2, [r3, #80]	; 0x50
 8003eac:	e020      	b.n	8003ef0 <HAL_RCC_OscConfig+0x510>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	23a0      	movs	r3, #160	; 0xa0
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4f8>
 8003eba:	4b62      	ldr	r3, [pc, #392]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ebe:	4b61      	ldr	r3, [pc, #388]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	00c9      	lsls	r1, r1, #3
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec8:	4b5e      	ldr	r3, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ecc:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	0049      	lsls	r1, r1, #1
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	651a      	str	r2, [r3, #80]	; 0x50
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0x510>
 8003ed8:	4b5a      	ldr	r3, [pc, #360]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003eda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ede:	495a      	ldr	r1, [pc, #360]	; (8004048 <HAL_RCC_OscConfig+0x668>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ee4:	4b57      	ldr	r3, [pc, #348]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee8:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003eea:	4959      	ldr	r1, [pc, #356]	; (8004050 <HAL_RCC_OscConfig+0x670>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef8:	f7fe fca4 	bl	8002844 <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f00:	e009      	b.n	8003f16 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe fc9f 	bl	8002844 <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_RCC_OscConfig+0x674>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e119      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f16:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0ef      	beq.n	8003f02 <HAL_RCC_OscConfig+0x522>
 8003f22:	e014      	b.n	8003f4e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7fe fc8e 	bl	8002844 <HAL_GetTick>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f2c:	e009      	b.n	8003f42 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe fc89 	bl	8002844 <HAL_GetTick>
 8003f32:	0002      	movs	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	4a46      	ldr	r2, [pc, #280]	; (8004054 <HAL_RCC_OscConfig+0x674>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e103      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f42:	4b40      	ldr	r3, [pc, #256]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d1ef      	bne.n	8003f2e <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f4e:	2327      	movs	r3, #39	; 0x27
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f5e:	493e      	ldr	r1, [pc, #248]	; (8004058 <HAL_RCC_OscConfig+0x678>)
 8003f60:	400a      	ands	r2, r1
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d049      	beq.n	8004002 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d026      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f76:	4b33      	ldr	r3, [pc, #204]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	4b32      	ldr	r3, [pc, #200]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003f88:	2101      	movs	r1, #1
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_RCC_OscConfig+0x67c>)
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCC_OscConfig+0x67c>)
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	0189      	lsls	r1, r1, #6
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fc52 	bl	8002844 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fa6:	f7fe fc4d 	bl	8002844 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e0c8      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d0f1      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x5c6>
 8003fc2:	e01e      	b.n	8004002 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	438a      	bics	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_OscConfig+0x67c>)
 8003fd2:	6a1a      	ldr	r2, [r3, #32]
 8003fd4:	4b21      	ldr	r3, [pc, #132]	; (800405c <HAL_RCC_OscConfig+0x67c>)
 8003fd6:	4922      	ldr	r1, [pc, #136]	; (8004060 <HAL_RCC_OscConfig+0x680>)
 8003fd8:	400a      	ands	r2, r1
 8003fda:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fc32 	bl	8002844 <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fe6:	f7fe fc2d 	bl	8002844 <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0a8      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	4013      	ands	r3, r2
 8004000:	d1f1      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d100      	bne.n	800400c <HAL_RCC_OscConfig+0x62c>
 800400a:	e09d      	b.n	8004148 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d100      	bne.n	8004014 <HAL_RCC_OscConfig+0x634>
 8004012:	e076      	b.n	8004102 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	2b02      	cmp	r3, #2
 800401a:	d157      	bne.n	80040cc <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_OscConfig+0x664>)
 8004022:	4910      	ldr	r1, [pc, #64]	; (8004064 <HAL_RCC_OscConfig+0x684>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fc0c 	bl	8002844 <HAL_GetTick>
 800402c:	0003      	movs	r3, r0
 800402e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004030:	e01a      	b.n	8004068 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe fc07 	bl	8002844 <HAL_GetTick>
 8004036:	0002      	movs	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d913      	bls.n	8004068 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e082      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
 8004044:	40021000 	.word	0x40021000
 8004048:	fffffeff 	.word	0xfffffeff
 800404c:	40007000 	.word	0x40007000
 8004050:	fffffbff 	.word	0xfffffbff
 8004054:	00001388 	.word	0x00001388
 8004058:	efffffff 	.word	0xefffffff
 800405c:	40010000 	.word	0x40010000
 8004060:	ffffdfff 	.word	0xffffdfff
 8004064:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	049b      	lsls	r3, r3, #18
 8004070:	4013      	ands	r3, r2
 8004072:	d1de      	bne.n	8004032 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b37      	ldr	r3, [pc, #220]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	4a37      	ldr	r2, [pc, #220]	; (8004158 <HAL_RCC_OscConfig+0x778>)
 800407a:	4013      	ands	r3, r2
 800407c:	0019      	movs	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	431a      	orrs	r2, r3
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	0449      	lsls	r1, r1, #17
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fe fbcf 	bl	8002844 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe fbca 	bl	8002844 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e045      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80040be:	4b25      	ldr	r3, [pc, #148]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	049b      	lsls	r3, r3, #18
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x6cc>
 80040ca:	e03d      	b.n	8004148 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040cc:	4b21      	ldr	r3, [pc, #132]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 80040d2:	4922      	ldr	r1, [pc, #136]	; (800415c <HAL_RCC_OscConfig+0x77c>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe fbb4 	bl	8002844 <HAL_GetTick>
 80040dc:	0003      	movs	r3, r0
 80040de:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fe fbaf 	bl	8002844 <HAL_GetTick>
 80040e6:	0002      	movs	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e02a      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040f4:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	049b      	lsls	r3, r3, #18
 80040fc:	4013      	ands	r3, r2
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x702>
 8004100:	e022      	b.n	8004148 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e01d      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <HAL_RCC_OscConfig+0x774>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	025b      	lsls	r3, r3, #9
 800411a:	401a      	ands	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	429a      	cmp	r2, r3
 8004122:	d10f      	bne.n	8004144 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	23f0      	movs	r3, #240	; 0xf0
 8004128:	039b      	lsls	r3, r3, #14
 800412a:	401a      	ands	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	23c0      	movs	r3, #192	; 0xc0
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	401a      	ands	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	0018      	movs	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	b00a      	add	sp, #40	; 0x28
 8004150:	bdb0      	pop	{r4, r5, r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40021000 	.word	0x40021000
 8004158:	ff02ffff 	.word	0xff02ffff
 800415c:	feffffff 	.word	0xfeffffff

08004160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004160:	b5b0      	push	{r4, r5, r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e10d      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b88      	ldr	r3, [pc, #544]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d911      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b85      	ldr	r3, [pc, #532]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	4393      	bics	r3, r2
 800418a:	0019      	movs	r1, r3
 800418c:	4b82      	ldr	r3, [pc, #520]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004194:	4b80      	ldr	r3, [pc, #512]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	4013      	ands	r3, r2
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d001      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0f4      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2202      	movs	r2, #2
 80041ac:	4013      	ands	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b7a      	ldr	r3, [pc, #488]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	22f0      	movs	r2, #240	; 0xf0
 80041b6:	4393      	bics	r3, r2
 80041b8:	0019      	movs	r1, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	4b77      	ldr	r3, [pc, #476]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80041c0:	430a      	orrs	r2, r1
 80041c2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	4013      	ands	r3, r2
 80041cc:	d100      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x70>
 80041ce:	e089      	b.n	80042e4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d8:	4b70      	ldr	r3, [pc, #448]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	029b      	lsls	r3, r3, #10
 80041e0:	4013      	ands	r3, r2
 80041e2:	d120      	bne.n	8004226 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e0d3      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	049b      	lsls	r3, r3, #18
 80041f8:	4013      	ands	r3, r2
 80041fa:	d114      	bne.n	8004226 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0c7      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004208:	4b64      	ldr	r3, [pc, #400]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	4013      	ands	r3, r2
 8004210:	d109      	bne.n	8004226 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0bc      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004216:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4013      	ands	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0b4      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004226:	4b5d      	ldr	r3, [pc, #372]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2203      	movs	r2, #3
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	4b59      	ldr	r3, [pc, #356]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004236:	430a      	orrs	r2, r1
 8004238:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423a:	f7fe fb03 	bl	8002844 <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d111      	bne.n	800426e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800424a:	e009      	b.n	8004260 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424c:	f7fe fafa 	bl	8002844 <HAL_GetTick>
 8004250:	0002      	movs	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	4a52      	ldr	r2, [pc, #328]	; (80043a0 <HAL_RCC_ClockConfig+0x240>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e097      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004260:	4b4e      	ldr	r3, [pc, #312]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	220c      	movs	r2, #12
 8004266:	4013      	ands	r3, r2
 8004268:	2b08      	cmp	r3, #8
 800426a:	d1ef      	bne.n	800424c <HAL_RCC_ClockConfig+0xec>
 800426c:	e03a      	b.n	80042e4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d111      	bne.n	800429a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004276:	e009      	b.n	800428c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fe fae4 	bl	8002844 <HAL_GetTick>
 800427c:	0002      	movs	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	4a47      	ldr	r2, [pc, #284]	; (80043a0 <HAL_RCC_ClockConfig+0x240>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d901      	bls.n	800428c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e081      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	220c      	movs	r2, #12
 8004292:	4013      	ands	r3, r2
 8004294:	2b0c      	cmp	r3, #12
 8004296:	d1ef      	bne.n	8004278 <HAL_RCC_ClockConfig+0x118>
 8004298:	e024      	b.n	80042e4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d11b      	bne.n	80042da <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a2:	e009      	b.n	80042b8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fe face 	bl	8002844 <HAL_GetTick>
 80042a8:	0002      	movs	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <HAL_RCC_ClockConfig+0x240>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e06b      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b8:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	220c      	movs	r2, #12
 80042be:	4013      	ands	r3, r2
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d1ef      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x144>
 80042c4:	e00e      	b.n	80042e4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c6:	f7fe fabd 	bl	8002844 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a33      	ldr	r2, [pc, #204]	; (80043a0 <HAL_RCC_ClockConfig+0x240>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e05a      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	220c      	movs	r2, #12
 80042e0:	4013      	ands	r3, r2
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	4013      	ands	r3, r2
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d211      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2201      	movs	r2, #1
 80042f8:	4393      	bics	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	4b26      	ldr	r3, [pc, #152]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004304:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_ClockConfig+0x238>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	4013      	ands	r3, r2
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e03c      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2204      	movs	r2, #4
 800431c:	4013      	ands	r3, r2
 800431e:	d009      	beq.n	8004334 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1e      	ldr	r3, [pc, #120]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <HAL_RCC_ClockConfig+0x244>)
 8004326:	4013      	ands	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004330:	430a      	orrs	r2, r1
 8004332:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	4013      	ands	r3, r2
 800433c:	d00a      	beq.n	8004354 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_RCC_ClockConfig+0x248>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	00da      	lsls	r2, r3, #3
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 8004350:	430a      	orrs	r2, r1
 8004352:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004354:	f000 f82e 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004358:	0001      	movs	r1, r0
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <HAL_RCC_ClockConfig+0x23c>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	220f      	movs	r2, #15
 8004362:	4013      	ands	r3, r2
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_RCC_ClockConfig+0x24c>)
 8004366:	5cd3      	ldrb	r3, [r2, r3]
 8004368:	000a      	movs	r2, r1
 800436a:	40da      	lsrs	r2, r3
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <HAL_RCC_ClockConfig+0x250>)
 800436e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004370:	250b      	movs	r5, #11
 8004372:	197c      	adds	r4, r7, r5
 8004374:	2000      	movs	r0, #0
 8004376:	f7fe fa1f 	bl	80027b8 <HAL_InitTick>
 800437a:	0003      	movs	r3, r0
 800437c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800437e:	197b      	adds	r3, r7, r5
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004386:	230b      	movs	r3, #11
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	e000      	b.n	8004390 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bdb0      	pop	{r4, r5, r7, pc}
 8004398:	40022000 	.word	0x40022000
 800439c:	40021000 	.word	0x40021000
 80043a0:	00001388 	.word	0x00001388
 80043a4:	fffff8ff 	.word	0xfffff8ff
 80043a8:	ffffc7ff 	.word	0xffffc7ff
 80043ac:	08006260 	.word	0x08006260
 80043b0:	20000038 	.word	0x20000038

080043b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80043ba:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	220c      	movs	r2, #12
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d00e      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d00f      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x3a>
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d157      	bne.n	8004482 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2210      	movs	r2, #16
 80043d8:	4013      	ands	r3, r2
 80043da:	d002      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80043dc:	4b33      	ldr	r3, [pc, #204]	; (80044ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80043de:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043e0:	e05d      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80043e2:	4b33      	ldr	r3, [pc, #204]	; (80044b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043e4:	613b      	str	r3, [r7, #16]
      break;
 80043e6:	e05a      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80043ea:	613b      	str	r3, [r7, #16]
      break;
 80043ec:	e057      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	0c9b      	lsrs	r3, r3, #18
 80043f2:	220f      	movs	r2, #15
 80043f4:	4013      	ands	r3, r2
 80043f6:	4a30      	ldr	r2, [pc, #192]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	0d9b      	lsrs	r3, r3, #22
 8004400:	2203      	movs	r2, #3
 8004402:	4013      	ands	r3, r2
 8004404:	3301      	adds	r3, #1
 8004406:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	025b      	lsls	r3, r3, #9
 8004410:	4013      	ands	r3, r2
 8004412:	d00f      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	000a      	movs	r2, r1
 8004418:	0152      	lsls	r2, r2, #5
 800441a:	1a52      	subs	r2, r2, r1
 800441c:	0193      	lsls	r3, r2, #6
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	185b      	adds	r3, r3, r1
 8004424:	025b      	lsls	r3, r3, #9
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fb fe75 	bl	8000118 <__udivsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e023      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004434:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	4013      	ands	r3, r2
 800443c:	d00f      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	000a      	movs	r2, r1
 8004442:	0152      	lsls	r2, r2, #5
 8004444:	1a52      	subs	r2, r2, r1
 8004446:	0193      	lsls	r3, r2, #6
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	185b      	adds	r3, r3, r1
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	0018      	movs	r0, r3
 8004454:	f7fb fe60 	bl	8000118 <__udivsi3>
 8004458:	0003      	movs	r3, r0
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e00e      	b.n	800447c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	000a      	movs	r2, r1
 8004462:	0152      	lsls	r2, r2, #5
 8004464:	1a52      	subs	r2, r2, r1
 8004466:	0193      	lsls	r3, r2, #6
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	185b      	adds	r3, r3, r1
 800446e:	029b      	lsls	r3, r3, #10
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	0018      	movs	r0, r3
 8004474:	f7fb fe50 	bl	8000118 <__udivsi3>
 8004478:	0003      	movs	r3, r0
 800447a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	613b      	str	r3, [r7, #16]
      break;
 8004480:	e00d      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0b5b      	lsrs	r3, r3, #13
 8004488:	2207      	movs	r2, #7
 800448a:	4013      	ands	r3, r2
 800448c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	0212      	lsls	r2, r2, #8
 8004496:	409a      	lsls	r2, r3
 8004498:	0013      	movs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
      break;
 800449c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800449e:	693b      	ldr	r3, [r7, #16]
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b006      	add	sp, #24
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000
 80044ac:	003d0900 	.word	0x003d0900
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200
 80044b8:	08006278 	.word	0x08006278

080044bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c0:	4b02      	ldr	r3, [pc, #8]	; (80044cc <HAL_RCC_GetHCLKFreq+0x10>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000038 	.word	0x20000038

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044d4:	f7ff fff2 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 80044d8:	0001      	movs	r1, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	2207      	movs	r2, #7
 80044e2:	4013      	ands	r3, r2
 80044e4:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5cd3      	ldrb	r3, [r2, r3]
 80044e8:	40d9      	lsrs	r1, r3
 80044ea:	000b      	movs	r3, r1
}
 80044ec:	0018      	movs	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08006270 	.word	0x08006270

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004500:	f7ff ffdc 	bl	80044bc <HAL_RCC_GetHCLKFreq>
 8004504:	0001      	movs	r1, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	2207      	movs	r2, #7
 800450e:	4013      	ands	r3, r2
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5cd3      	ldrb	r3, [r2, r3]
 8004514:	40d9      	lsrs	r1, r3
 8004516:	000b      	movs	r3, r1
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40021000 	.word	0x40021000
 8004524:	08006270 	.word	0x08006270

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2220      	movs	r2, #32
 8004536:	4013      	ands	r3, r2
 8004538:	d106      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	4013      	ands	r3, r2
 8004544:	d100      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004546:	e0dd      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004548:	2317      	movs	r3, #23
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004550:	4b9c      	ldr	r3, [pc, #624]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	055b      	lsls	r3, r3, #21
 8004558:	4013      	ands	r3, r2
 800455a:	d10a      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	4b99      	ldr	r3, [pc, #612]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800455e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004560:	4b98      	ldr	r3, [pc, #608]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004562:	2180      	movs	r1, #128	; 0x80
 8004564:	0549      	lsls	r1, r1, #21
 8004566:	430a      	orrs	r2, r1
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800456a:	2317      	movs	r3, #23
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004572:	4b95      	ldr	r3, [pc, #596]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4013      	ands	r3, r2
 800457c:	d11a      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800457e:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b91      	ldr	r3, [pc, #580]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0049      	lsls	r1, r1, #1
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458c:	f7fe f95a 	bl	8002844 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fe f955 	bl	8002844 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b64      	cmp	r3, #100	; 0x64
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e108      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b87      	ldr	r3, [pc, #540]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80045b4:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	23c0      	movs	r3, #192	; 0xc0
 80045ba:	039b      	lsls	r3, r3, #14
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	23c0      	movs	r3, #192	; 0xc0
 80045c6:	039b      	lsls	r3, r3, #14
 80045c8:	4013      	ands	r3, r2
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d107      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	23c0      	movs	r3, #192	; 0xc0
 80045d6:	039b      	lsls	r3, r3, #14
 80045d8:	4013      	ands	r3, r2
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d013      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	23c0      	movs	r3, #192	; 0xc0
 80045e6:	029b      	lsls	r3, r3, #10
 80045e8:	401a      	ands	r2, r3
 80045ea:	23c0      	movs	r3, #192	; 0xc0
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10a      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80045f2:	4b74      	ldr	r3, [pc, #464]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	401a      	ands	r2, r3
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	429a      	cmp	r2, r3
 8004602:	d101      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0d8      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004608:	4b6e      	ldr	r3, [pc, #440]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800460a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800460c:	23c0      	movs	r3, #192	; 0xc0
 800460e:	029b      	lsls	r3, r3, #10
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d049      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x186>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	23c0      	movs	r3, #192	; 0xc0
 8004620:	029b      	lsls	r3, r3, #10
 8004622:	4013      	ands	r3, r2
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2220      	movs	r2, #32
 8004630:	4013      	ands	r3, r2
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	23c0      	movs	r3, #192	; 0xc0
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	4013      	ands	r3, r2
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d034      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4013      	ands	r3, r2
 800464e:	d02e      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004650:	4b5c      	ldr	r3, [pc, #368]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004654:	4a5d      	ldr	r2, [pc, #372]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004656:	4013      	ands	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800465a:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800465c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465e:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004660:	2180      	movs	r1, #128	; 0x80
 8004662:	0309      	lsls	r1, r1, #12
 8004664:	430a      	orrs	r2, r1
 8004666:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004668:	4b56      	ldr	r3, [pc, #344]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800466a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800466c:	4b55      	ldr	r3, [pc, #340]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800466e:	4958      	ldr	r1, [pc, #352]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004670:	400a      	ands	r2, r1
 8004672:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4013      	ands	r3, r2
 8004682:	d014      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fe f8de 	bl	8002844 <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800468c:	e009      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f8d9 	bl	8002844 <HAL_GetTick>
 8004692:	0002      	movs	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e08b      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a2:	4b48      	ldr	r3, [pc, #288]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	d0ef      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	23c0      	movs	r3, #192	; 0xc0
 80046b4:	029b      	lsls	r3, r3, #10
 80046b6:	401a      	ands	r2, r3
 80046b8:	23c0      	movs	r3, #192	; 0xc0
 80046ba:	029b      	lsls	r3, r3, #10
 80046bc:	429a      	cmp	r2, r3
 80046be:	d10c      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a44      	ldr	r2, [pc, #272]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	23c0      	movs	r3, #192	; 0xc0
 80046d0:	039b      	lsls	r3, r3, #14
 80046d2:	401a      	ands	r2, r3
 80046d4:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046dc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	23c0      	movs	r3, #192	; 0xc0
 80046e4:	029b      	lsls	r3, r3, #10
 80046e6:	401a      	ands	r2, r3
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046ea:	430a      	orrs	r2, r1
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046ee:	2317      	movs	r3, #23
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046fc:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046fe:	4937      	ldr	r1, [pc, #220]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004700:	400a      	ands	r2, r1
 8004702:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470e:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	2203      	movs	r2, #3
 8004714:	4393      	bics	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800471e:	430a      	orrs	r2, r1
 8004720:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2202      	movs	r2, #2
 8004728:	4013      	ands	r3, r2
 800472a:	d009      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004730:	220c      	movs	r2, #12
 8004732:	4393      	bics	r3, r2
 8004734:	0019      	movs	r1, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	4b22      	ldr	r3, [pc, #136]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800473c:	430a      	orrs	r2, r1
 800473e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2204      	movs	r2, #4
 8004746:	4013      	ands	r3, r2
 8004748:	d009      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800474a:	4b1e      	ldr	r3, [pc, #120]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474e:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004750:	4013      	ands	r3, r2
 8004752:	0019      	movs	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800475a:	430a      	orrs	r2, r1
 800475c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2208      	movs	r2, #8
 8004764:	4013      	ands	r3, r2
 8004766:	d009      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004768:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800476e:	4013      	ands	r3, r2
 8004770:	0019      	movs	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004778:	430a      	orrs	r2, r1
 800477a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2240      	movs	r2, #64	; 0x40
 8004782:	4013      	ands	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800478c:	4013      	ands	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004796:	430a      	orrs	r2, r1
 8004798:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2280      	movs	r2, #128	; 0x80
 80047a0:	4013      	ands	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80047a4:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80047a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a8:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69da      	ldr	r2, [r3, #28]
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80047b4:	430a      	orrs	r2, r1
 80047b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b006      	add	sp, #24
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	fffcffff 	.word	0xfffcffff
 80047d0:	fff7ffff 	.word	0xfff7ffff
 80047d4:	00001388 	.word	0x00001388
 80047d8:	ffcfffff 	.word	0xffcfffff
 80047dc:	efffffff 	.word	0xefffffff
 80047e0:	fffff3ff 	.word	0xfffff3ff
 80047e4:	ffffcfff 	.word	0xffffcfff
 80047e8:	fbffffff 	.word	0xfbffffff
 80047ec:	fff3ffff 	.word	0xfff3ffff

080047f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e01e      	b.n	8004840 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2239      	movs	r2, #57	; 0x39
 8004806:	5c9b      	ldrb	r3, [r3, r2]
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2238      	movs	r2, #56	; 0x38
 8004812:	2100      	movs	r1, #0
 8004814:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0018      	movs	r0, r3
 800481a:	f7fd fe6b 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2239      	movs	r2, #57	; 0x39
 8004822:	2102      	movs	r1, #2
 8004824:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	0019      	movs	r1, r3
 8004830:	0010      	movs	r0, r2
 8004832:	f000 f8e9 	bl	8004a08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2239      	movs	r2, #57	; 0x39
 800483a:	2101      	movs	r1, #1
 800483c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b002      	add	sp, #8
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2239      	movs	r2, #57	; 0x39
 8004854:	2102      	movs	r1, #2
 8004856:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2207      	movs	r2, #7
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b06      	cmp	r3, #6
 8004868:	d007      	beq.n	800487a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	430a      	orrs	r2, r1
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2239      	movs	r2, #57	; 0x39
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b004      	add	sp, #16
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2238      	movs	r2, #56	; 0x38
 800489a:	5c9b      	ldrb	r3, [r3, r2]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0ab      	b.n	80049fc <HAL_TIM_ConfigClockSource+0x170>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2238      	movs	r2, #56	; 0x38
 80048a8:	2101      	movs	r1, #1
 80048aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2239      	movs	r2, #57	; 0x39
 80048b0:	2102      	movs	r1, #2
 80048b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2277      	movs	r2, #119	; 0x77
 80048c0:	4393      	bics	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a4f      	ldr	r2, [pc, #316]	; (8004a04 <HAL_TIM_ConfigClockSource+0x178>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d100      	bne.n	80048de <HAL_TIM_ConfigClockSource+0x52>
 80048dc:	e06b      	b.n	80049b6 <HAL_TIM_ConfigClockSource+0x12a>
 80048de:	d80e      	bhi.n	80048fe <HAL_TIM_ConfigClockSource+0x72>
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d100      	bne.n	80048e6 <HAL_TIM_ConfigClockSource+0x5a>
 80048e4:	e077      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x14a>
 80048e6:	d803      	bhi.n	80048f0 <HAL_TIM_ConfigClockSource+0x64>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d100      	bne.n	80048ee <HAL_TIM_ConfigClockSource+0x62>
 80048ec:	e073      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048ee:	e07c      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d100      	bne.n	80048f6 <HAL_TIM_ConfigClockSource+0x6a>
 80048f4:	e06f      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x14a>
 80048f6:	2b30      	cmp	r3, #48	; 0x30
 80048f8:	d100      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x70>
 80048fa:	e06c      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80048fc:	e075      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80048fe:	2b70      	cmp	r3, #112	; 0x70
 8004900:	d00e      	beq.n	8004920 <HAL_TIM_ConfigClockSource+0x94>
 8004902:	d804      	bhi.n	800490e <HAL_TIM_ConfigClockSource+0x82>
 8004904:	2b50      	cmp	r3, #80	; 0x50
 8004906:	d036      	beq.n	8004976 <HAL_TIM_ConfigClockSource+0xea>
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d044      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800490c:	e06d      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800490e:	2280      	movs	r2, #128	; 0x80
 8004910:	0152      	lsls	r2, r2, #5
 8004912:	4293      	cmp	r3, r2
 8004914:	d068      	beq.n	80049e8 <HAL_TIM_ConfigClockSource+0x15c>
 8004916:	2280      	movs	r2, #128	; 0x80
 8004918:	0192      	lsls	r2, r2, #6
 800491a:	4293      	cmp	r3, r2
 800491c:	d017      	beq.n	800494e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800491e:	e064      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f000 f938 	bl	8004ba4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2277      	movs	r2, #119	; 0x77
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	609a      	str	r2, [r3, #8]
      break;
 800494c:	e04d      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6899      	ldr	r1, [r3, #8]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f000 f921 	bl	8004ba4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	01c9      	lsls	r1, r1, #7
 8004970:	430a      	orrs	r2, r1
 8004972:	609a      	str	r2, [r3, #8]
      break;
 8004974:	e039      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	001a      	movs	r2, r3
 8004984:	f000 f894 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2150      	movs	r1, #80	; 0x50
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f8ee 	bl	8004b70 <TIM_ITRx_SetConfig>
      break;
 8004994:	e029      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6859      	ldr	r1, [r3, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	001a      	movs	r2, r3
 80049a4:	f000 f8b2 	bl	8004b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2160      	movs	r1, #96	; 0x60
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 f8de 	bl	8004b70 <TIM_ITRx_SetConfig>
      break;
 80049b4:	e019      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6818      	ldr	r0, [r3, #0]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	001a      	movs	r2, r3
 80049c4:	f000 f874 	bl	8004ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2140      	movs	r1, #64	; 0x40
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 f8ce 	bl	8004b70 <TIM_ITRx_SetConfig>
      break;
 80049d4:	e009      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	0019      	movs	r1, r3
 80049e0:	0010      	movs	r0, r2
 80049e2:	f000 f8c5 	bl	8004b70 <TIM_ITRx_SetConfig>
      break;
 80049e6:	e000      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80049e8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2239      	movs	r2, #57	; 0x39
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2238      	movs	r2, #56	; 0x38
 80049f6:	2100      	movs	r1, #0
 80049f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b004      	add	sp, #16
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	ffff00ff 	.word	0xffff00ff

08004a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	05db      	lsls	r3, r3, #23
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d007      	beq.n	8004a32 <TIM_Base_SetConfig+0x2a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	; (8004aa4 <TIM_Base_SetConfig+0x9c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_Base_SetConfig+0x2a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <TIM_Base_SetConfig+0xa0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d108      	bne.n	8004a44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2270      	movs	r2, #112	; 0x70
 8004a36:	4393      	bics	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	05db      	lsls	r3, r3, #23
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d007      	beq.n	8004a5e <TIM_Base_SetConfig+0x56>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <TIM_Base_SetConfig+0x9c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d003      	beq.n	8004a5e <TIM_Base_SetConfig+0x56>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <TIM_Base_SetConfig+0xa0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d108      	bne.n	8004a70 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a12      	ldr	r2, [pc, #72]	; (8004aac <TIM_Base_SetConfig+0xa4>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2280      	movs	r2, #128	; 0x80
 8004a74:	4393      	bics	r3, r2
 8004a76:	001a      	movs	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	615a      	str	r2, [r3, #20]
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b004      	add	sp, #16
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40010800 	.word	0x40010800
 8004aa8:	40011400 	.word	0x40011400
 8004aac:	fffffcff 	.word	0xfffffcff

08004ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	4393      	bics	r3, r2
 8004aca:	001a      	movs	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	22f0      	movs	r2, #240	; 0xf0
 8004ada:	4393      	bics	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	220a      	movs	r2, #10
 8004aec:	4393      	bics	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	621a      	str	r2, [r3, #32]
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b006      	add	sp, #24
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	4393      	bics	r3, r2
 8004b20:	001a      	movs	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <TIM_TI2_ConfigInputStage+0x60>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	22a0      	movs	r2, #160	; 0xa0
 8004b48:	4393      	bics	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b006      	add	sp, #24
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	ffff0fff 	.word	0xffff0fff

08004b70 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2270      	movs	r2, #112	; 0x70
 8004b84:	4393      	bics	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	2207      	movs	r2, #7
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	609a      	str	r2, [r3, #8]
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <TIM_ETR_SetConfig+0x3c>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	021a      	lsls	r2, r3, #8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	609a      	str	r2, [r3, #8]
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	ffff00ff 	.word	0xffff00ff

08004be4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2238      	movs	r2, #56	; 0x38
 8004bf2:	5c9b      	ldrb	r3, [r3, r2]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e032      	b.n	8004c62 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2238      	movs	r2, #56	; 0x38
 8004c00:	2101      	movs	r1, #1
 8004c02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2239      	movs	r2, #57	; 0x39
 8004c08:	2102      	movs	r1, #2
 8004c0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2270      	movs	r2, #112	; 0x70
 8004c20:	4393      	bics	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	4393      	bics	r3, r2
 8004c34:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2239      	movs	r2, #57	; 0x39
 8004c54:	2101      	movs	r1, #1
 8004c56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2238      	movs	r2, #56	; 0x38
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b004      	add	sp, #16
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e044      	b.n	8004d08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2270      	movs	r2, #112	; 0x70
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7fd fc45 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	; 0x24
 8004c9a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	438a      	bics	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0018      	movs	r0, r3
 8004cb0:	f000 f830 	bl	8004d14 <UART_SetConfig>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e024      	b.n	8004d08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 fb3b 	bl	8005344 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	490d      	ldr	r1, [pc, #52]	; (8004d10 <HAL_UART_Init+0xa4>)
 8004cda:	400a      	ands	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	212a      	movs	r1, #42	; 0x2a
 8004cea:	438a      	bics	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 fbd3 	bl	80054ac <UART_CheckIdleState>
 8004d06:	0003      	movs	r3, r0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b002      	add	sp, #8
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	ffffb7ff 	.word	0xffffb7ff

08004d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b5b0      	push	{r4, r5, r7, lr}
 8004d16:	b08e      	sub	sp, #56	; 0x38
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004d1c:	231b      	movs	r3, #27
 8004d1e:	2218      	movs	r2, #24
 8004d20:	4694      	mov	ip, r2
 8004d22:	44bc      	add	ip, r7
 8004d24:	4463      	add	r3, ip
 8004d26:	2210      	movs	r2, #16
 8004d28:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d2e:	2313      	movs	r3, #19
 8004d30:	2218      	movs	r2, #24
 8004d32:	4694      	mov	ip, r2
 8004d34:	44bc      	add	ip, r7
 8004d36:	4463      	add	r3, ip
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4ac8      	ldr	r2, [pc, #800]	; (8005080 <UART_SetConfig+0x36c>)
 8004d60:	4013      	ands	r3, r2
 8004d62:	0019      	movs	r1, r3
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4ac3      	ldr	r2, [pc, #780]	; (8005084 <UART_SetConfig+0x370>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4abd      	ldr	r2, [pc, #756]	; (8005088 <UART_SetConfig+0x374>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4ab9      	ldr	r2, [pc, #740]	; (800508c <UART_SetConfig+0x378>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	0019      	movs	r1, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db2:	430a      	orrs	r2, r1
 8004db4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4ab5      	ldr	r2, [pc, #724]	; (8005090 <UART_SetConfig+0x37c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d134      	bne.n	8004e2a <UART_SetConfig+0x116>
 8004dc0:	4bb4      	ldr	r3, [pc, #720]	; (8005094 <UART_SetConfig+0x380>)
 8004dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d015      	beq.n	8004df8 <UART_SetConfig+0xe4>
 8004dcc:	d304      	bcc.n	8004dd8 <UART_SetConfig+0xc4>
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d00a      	beq.n	8004de8 <UART_SetConfig+0xd4>
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d018      	beq.n	8004e08 <UART_SetConfig+0xf4>
 8004dd6:	e01f      	b.n	8004e18 <UART_SetConfig+0x104>
 8004dd8:	231b      	movs	r3, #27
 8004dda:	2218      	movs	r2, #24
 8004ddc:	4694      	mov	ip, r2
 8004dde:	44bc      	add	ip, r7
 8004de0:	4463      	add	r3, ip
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e0ab      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004de8:	231b      	movs	r3, #27
 8004dea:	2218      	movs	r2, #24
 8004dec:	4694      	mov	ip, r2
 8004dee:	44bc      	add	ip, r7
 8004df0:	4463      	add	r3, ip
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e0a3      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004df8:	231b      	movs	r3, #27
 8004dfa:	2218      	movs	r2, #24
 8004dfc:	4694      	mov	ip, r2
 8004dfe:	44bc      	add	ip, r7
 8004e00:	4463      	add	r3, ip
 8004e02:	2204      	movs	r2, #4
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e09b      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e08:	231b      	movs	r3, #27
 8004e0a:	2218      	movs	r2, #24
 8004e0c:	4694      	mov	ip, r2
 8004e0e:	44bc      	add	ip, r7
 8004e10:	4463      	add	r3, ip
 8004e12:	2208      	movs	r2, #8
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e093      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e18:	231b      	movs	r3, #27
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	4694      	mov	ip, r2
 8004e1e:	44bc      	add	ip, r7
 8004e20:	4463      	add	r3, ip
 8004e22:	2210      	movs	r2, #16
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	e08a      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a9a      	ldr	r2, [pc, #616]	; (8005098 <UART_SetConfig+0x384>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d137      	bne.n	8004ea4 <UART_SetConfig+0x190>
 8004e34:	4b97      	ldr	r3, [pc, #604]	; (8005094 <UART_SetConfig+0x380>)
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	220c      	movs	r2, #12
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d018      	beq.n	8004e72 <UART_SetConfig+0x15e>
 8004e40:	d802      	bhi.n	8004e48 <UART_SetConfig+0x134>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <UART_SetConfig+0x13e>
 8004e46:	e024      	b.n	8004e92 <UART_SetConfig+0x17e>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d00a      	beq.n	8004e62 <UART_SetConfig+0x14e>
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	d018      	beq.n	8004e82 <UART_SetConfig+0x16e>
 8004e50:	e01f      	b.n	8004e92 <UART_SetConfig+0x17e>
 8004e52:	231b      	movs	r3, #27
 8004e54:	2218      	movs	r2, #24
 8004e56:	4694      	mov	ip, r2
 8004e58:	44bc      	add	ip, r7
 8004e5a:	4463      	add	r3, ip
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e06e      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e62:	231b      	movs	r3, #27
 8004e64:	2218      	movs	r2, #24
 8004e66:	4694      	mov	ip, r2
 8004e68:	44bc      	add	ip, r7
 8004e6a:	4463      	add	r3, ip
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	e066      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e72:	231b      	movs	r3, #27
 8004e74:	2218      	movs	r2, #24
 8004e76:	4694      	mov	ip, r2
 8004e78:	44bc      	add	ip, r7
 8004e7a:	4463      	add	r3, ip
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	e05e      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e82:	231b      	movs	r3, #27
 8004e84:	2218      	movs	r2, #24
 8004e86:	4694      	mov	ip, r2
 8004e88:	44bc      	add	ip, r7
 8004e8a:	4463      	add	r3, ip
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e056      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004e92:	231b      	movs	r3, #27
 8004e94:	2218      	movs	r2, #24
 8004e96:	4694      	mov	ip, r2
 8004e98:	44bc      	add	ip, r7
 8004e9a:	4463      	add	r3, ip
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	e04d      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a77      	ldr	r2, [pc, #476]	; (8005088 <UART_SetConfig+0x374>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d141      	bne.n	8004f32 <UART_SetConfig+0x21e>
 8004eae:	4b79      	ldr	r3, [pc, #484]	; (8005094 <UART_SetConfig+0x380>)
 8004eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eb2:	23c0      	movs	r3, #192	; 0xc0
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2280      	movs	r2, #128	; 0x80
 8004eba:	00d2      	lsls	r2, r2, #3
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01f      	beq.n	8004f00 <UART_SetConfig+0x1ec>
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	00d2      	lsls	r2, r2, #3
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d802      	bhi.n	8004ece <UART_SetConfig+0x1ba>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <UART_SetConfig+0x1cc>
 8004ecc:	e028      	b.n	8004f20 <UART_SetConfig+0x20c>
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	0112      	lsls	r2, r2, #4
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00c      	beq.n	8004ef0 <UART_SetConfig+0x1dc>
 8004ed6:	22c0      	movs	r2, #192	; 0xc0
 8004ed8:	0112      	lsls	r2, r2, #4
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <UART_SetConfig+0x1fc>
 8004ede:	e01f      	b.n	8004f20 <UART_SetConfig+0x20c>
 8004ee0:	231b      	movs	r3, #27
 8004ee2:	2218      	movs	r2, #24
 8004ee4:	4694      	mov	ip, r2
 8004ee6:	44bc      	add	ip, r7
 8004ee8:	4463      	add	r3, ip
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e027      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	2218      	movs	r2, #24
 8004ef4:	4694      	mov	ip, r2
 8004ef6:	44bc      	add	ip, r7
 8004ef8:	4463      	add	r3, ip
 8004efa:	2202      	movs	r2, #2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e01f      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004f00:	231b      	movs	r3, #27
 8004f02:	2218      	movs	r2, #24
 8004f04:	4694      	mov	ip, r2
 8004f06:	44bc      	add	ip, r7
 8004f08:	4463      	add	r3, ip
 8004f0a:	2204      	movs	r2, #4
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	e017      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004f10:	231b      	movs	r3, #27
 8004f12:	2218      	movs	r2, #24
 8004f14:	4694      	mov	ip, r2
 8004f16:	44bc      	add	ip, r7
 8004f18:	4463      	add	r3, ip
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e00f      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004f20:	231b      	movs	r3, #27
 8004f22:	2218      	movs	r2, #24
 8004f24:	4694      	mov	ip, r2
 8004f26:	44bc      	add	ip, r7
 8004f28:	4463      	add	r3, ip
 8004f2a:	2210      	movs	r2, #16
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	e006      	b.n	8004f40 <UART_SetConfig+0x22c>
 8004f32:	231b      	movs	r3, #27
 8004f34:	2218      	movs	r2, #24
 8004f36:	4694      	mov	ip, r2
 8004f38:	44bc      	add	ip, r7
 8004f3a:	4463      	add	r3, ip
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a50      	ldr	r2, [pc, #320]	; (8005088 <UART_SetConfig+0x374>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d000      	beq.n	8004f4c <UART_SetConfig+0x238>
 8004f4a:	e083      	b.n	8005054 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2218      	movs	r2, #24
 8004f50:	4694      	mov	ip, r2
 8004f52:	44bc      	add	ip, r7
 8004f54:	4463      	add	r3, ip
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d00d      	beq.n	8004f78 <UART_SetConfig+0x264>
 8004f5c:	dc02      	bgt.n	8004f64 <UART_SetConfig+0x250>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <UART_SetConfig+0x25a>
 8004f62:	e01d      	b.n	8004fa0 <UART_SetConfig+0x28c>
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d012      	beq.n	8004f8e <UART_SetConfig+0x27a>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d015      	beq.n	8004f98 <UART_SetConfig+0x284>
 8004f6c:	e018      	b.n	8004fa0 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004f6e:	f7ff faaf 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8004f72:	0003      	movs	r3, r0
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f76:	e01b      	b.n	8004fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f78:	4b46      	ldr	r3, [pc, #280]	; (8005094 <UART_SetConfig+0x380>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	4013      	ands	r3, r2
 8004f80:	d002      	beq.n	8004f88 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8004f82:	4b46      	ldr	r3, [pc, #280]	; (800509c <UART_SetConfig+0x388>)
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8004f86:	e013      	b.n	8004fb0 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004f88:	4b45      	ldr	r3, [pc, #276]	; (80050a0 <UART_SetConfig+0x38c>)
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f8c:	e010      	b.n	8004fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004f8e:	f7ff fa11 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004f92:	0003      	movs	r3, r0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f96:	e00b      	b.n	8004fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f9e:	e007      	b.n	8004fb0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004fa0:	2313      	movs	r3, #19
 8004fa2:	2218      	movs	r2, #24
 8004fa4:	4694      	mov	ip, r2
 8004fa6:	44bc      	add	ip, r7
 8004fa8:	4463      	add	r3, ip
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
        break;
 8004fae:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d100      	bne.n	8004fb8 <UART_SetConfig+0x2a4>
 8004fb6:	e1a6      	b.n	8005306 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	0013      	movs	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	189b      	adds	r3, r3, r2
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d305      	bcc.n	8004fd4 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d907      	bls.n	8004fe4 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8004fd4:	2313      	movs	r3, #19
 8004fd6:	2218      	movs	r2, #24
 8004fd8:	4694      	mov	ip, r2
 8004fda:	44bc      	add	ip, r7
 8004fdc:	4463      	add	r3, ip
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e190      	b.n	8005306 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	6939      	ldr	r1, [r7, #16]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	000b      	movs	r3, r1
 8004ff2:	0e1b      	lsrs	r3, r3, #24
 8004ff4:	0010      	movs	r0, r2
 8004ff6:	0205      	lsls	r5, r0, #8
 8004ff8:	431d      	orrs	r5, r3
 8004ffa:	000b      	movs	r3, r1
 8004ffc:	021c      	lsls	r4, r3, #8
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	085b      	lsrs	r3, r3, #1
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68b8      	ldr	r0, [r7, #8]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	1900      	adds	r0, r0, r4
 8005010:	4169      	adcs	r1, r5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f7fb f9f0 	bl	8000404 <__aeabi_uldivmod>
 8005024:	0003      	movs	r3, r0
 8005026:	000c      	movs	r4, r1
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <UART_SetConfig+0x390>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d908      	bls.n	8005044 <UART_SetConfig+0x330>
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <UART_SetConfig+0x394>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d804      	bhi.n	8005044 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e160      	b.n	8005306 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8005044:	2313      	movs	r3, #19
 8005046:	2218      	movs	r2, #24
 8005048:	4694      	mov	ip, r2
 800504a:	44bc      	add	ip, r7
 800504c:	4463      	add	r3, ip
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e158      	b.n	8005306 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	429a      	cmp	r2, r3
 800505e:	d000      	beq.n	8005062 <UART_SetConfig+0x34e>
 8005060:	e0c3      	b.n	80051ea <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8005062:	231b      	movs	r3, #27
 8005064:	2218      	movs	r2, #24
 8005066:	4694      	mov	ip, r2
 8005068:	44bc      	add	ip, r7
 800506a:	4463      	add	r3, ip
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d900      	bls.n	8005074 <UART_SetConfig+0x360>
 8005072:	e086      	b.n	8005182 <UART_SetConfig+0x46e>
 8005074:	009a      	lsls	r2, r3, #2
 8005076:	4b0d      	ldr	r3, [pc, #52]	; (80050ac <UART_SetConfig+0x398>)
 8005078:	18d3      	adds	r3, r2, r3
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	469f      	mov	pc, r3
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	efff69f3 	.word	0xefff69f3
 8005084:	ffffcfff 	.word	0xffffcfff
 8005088:	40004800 	.word	0x40004800
 800508c:	fffff4ff 	.word	0xfffff4ff
 8005090:	40013800 	.word	0x40013800
 8005094:	40021000 	.word	0x40021000
 8005098:	40004400 	.word	0x40004400
 800509c:	003d0900 	.word	0x003d0900
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	000002ff 	.word	0x000002ff
 80050a8:	000fffff 	.word	0x000fffff
 80050ac:	08006284 	.word	0x08006284
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80050b0:	f7ff fa0e 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80050b4:	0003      	movs	r3, r0
 80050b6:	005a      	lsls	r2, r3, #1
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	18d2      	adds	r2, r2, r3
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	0019      	movs	r1, r3
 80050c6:	0010      	movs	r0, r2
 80050c8:	f7fb f826 	bl	8000118 <__udivsi3>
 80050cc:	0003      	movs	r3, r0
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050d2:	e05e      	b.n	8005192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80050d4:	f7ff fa12 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 80050d8:	0003      	movs	r3, r0
 80050da:	005a      	lsls	r2, r3, #1
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	18d2      	adds	r2, r2, r3
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	0019      	movs	r1, r3
 80050ea:	0010      	movs	r0, r2
 80050ec:	f7fb f814 	bl	8000118 <__udivsi3>
 80050f0:	0003      	movs	r3, r0
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f6:	e04c      	b.n	8005192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f8:	4b8b      	ldr	r3, [pc, #556]	; (8005328 <UART_SetConfig+0x614>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2210      	movs	r2, #16
 80050fe:	4013      	ands	r3, r2
 8005100:	d00e      	beq.n	8005120 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	4a88      	ldr	r2, [pc, #544]	; (800532c <UART_SetConfig+0x618>)
 800510a:	189a      	adds	r2, r3, r2
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	0019      	movs	r1, r3
 8005112:	0010      	movs	r0, r2
 8005114:	f7fb f800 	bl	8000118 <__udivsi3>
 8005118:	0003      	movs	r3, r0
 800511a:	b29b      	uxth	r3, r3
 800511c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800511e:	e038      	b.n	8005192 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	085b      	lsrs	r3, r3, #1
 8005126:	4a82      	ldr	r2, [pc, #520]	; (8005330 <UART_SetConfig+0x61c>)
 8005128:	189a      	adds	r2, r3, r2
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	0019      	movs	r1, r3
 8005130:	0010      	movs	r0, r2
 8005132:	f7fa fff1 	bl	8000118 <__udivsi3>
 8005136:	0003      	movs	r3, r0
 8005138:	b29b      	uxth	r3, r3
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800513c:	e029      	b.n	8005192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800513e:	f7ff f939 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005142:	0003      	movs	r3, r0
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	18d2      	adds	r2, r2, r3
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	0019      	movs	r1, r3
 8005154:	0010      	movs	r0, r2
 8005156:	f7fa ffdf 	bl	8000118 <__udivsi3>
 800515a:	0003      	movs	r3, r0
 800515c:	b29b      	uxth	r3, r3
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005160:	e017      	b.n	8005192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	2280      	movs	r2, #128	; 0x80
 800516a:	0252      	lsls	r2, r2, #9
 800516c:	189a      	adds	r2, r3, r2
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	0019      	movs	r1, r3
 8005174:	0010      	movs	r0, r2
 8005176:	f7fa ffcf 	bl	8000118 <__udivsi3>
 800517a:	0003      	movs	r3, r0
 800517c:	b29b      	uxth	r3, r3
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005180:	e007      	b.n	8005192 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005182:	2313      	movs	r3, #19
 8005184:	2218      	movs	r2, #24
 8005186:	4694      	mov	ip, r2
 8005188:	44bc      	add	ip, r7
 800518a:	4463      	add	r3, ip
 800518c:	2201      	movs	r2, #1
 800518e:	701a      	strb	r2, [r3, #0]
        break;
 8005190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	2b0f      	cmp	r3, #15
 8005196:	d920      	bls.n	80051da <UART_SetConfig+0x4c6>
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	4a66      	ldr	r2, [pc, #408]	; (8005334 <UART_SetConfig+0x620>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d81c      	bhi.n	80051da <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	200a      	movs	r0, #10
 80051a6:	2418      	movs	r4, #24
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	181b      	adds	r3, r3, r0
 80051ac:	210f      	movs	r1, #15
 80051ae:	438a      	bics	r2, r1
 80051b0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2207      	movs	r2, #7
 80051ba:	4013      	ands	r3, r2
 80051bc:	b299      	uxth	r1, r3
 80051be:	193b      	adds	r3, r7, r4
 80051c0:	181b      	adds	r3, r3, r0
 80051c2:	193a      	adds	r2, r7, r4
 80051c4:	1812      	adds	r2, r2, r0
 80051c6:	8812      	ldrh	r2, [r2, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	193a      	adds	r2, r7, r4
 80051d2:	1812      	adds	r2, r2, r0
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	e095      	b.n	8005306 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80051da:	2313      	movs	r3, #19
 80051dc:	2218      	movs	r2, #24
 80051de:	4694      	mov	ip, r2
 80051e0:	44bc      	add	ip, r7
 80051e2:	4463      	add	r3, ip
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e08d      	b.n	8005306 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80051ea:	231b      	movs	r3, #27
 80051ec:	2218      	movs	r2, #24
 80051ee:	4694      	mov	ip, r2
 80051f0:	44bc      	add	ip, r7
 80051f2:	4463      	add	r3, ip
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d86a      	bhi.n	80052d0 <UART_SetConfig+0x5bc>
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	4b4e      	ldr	r3, [pc, #312]	; (8005338 <UART_SetConfig+0x624>)
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005204:	f7ff f964 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005208:	0002      	movs	r2, r0
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	18d2      	adds	r2, r2, r3
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0019      	movs	r1, r3
 8005218:	0010      	movs	r0, r2
 800521a:	f7fa ff7d 	bl	8000118 <__udivsi3>
 800521e:	0003      	movs	r3, r0
 8005220:	b29b      	uxth	r3, r3
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005224:	e05c      	b.n	80052e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005226:	f7ff f969 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 800522a:	0002      	movs	r2, r0
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	18d2      	adds	r2, r2, r3
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0019      	movs	r1, r3
 800523a:	0010      	movs	r0, r2
 800523c:	f7fa ff6c 	bl	8000118 <__udivsi3>
 8005240:	0003      	movs	r3, r0
 8005242:	b29b      	uxth	r3, r3
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005246:	e04b      	b.n	80052e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005248:	4b37      	ldr	r3, [pc, #220]	; (8005328 <UART_SetConfig+0x614>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2210      	movs	r2, #16
 800524e:	4013      	ands	r3, r2
 8005250:	d00e      	beq.n	8005270 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	4a38      	ldr	r2, [pc, #224]	; (800533c <UART_SetConfig+0x628>)
 800525a:	189a      	adds	r2, r3, r2
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	0019      	movs	r1, r3
 8005262:	0010      	movs	r0, r2
 8005264:	f7fa ff58 	bl	8000118 <__udivsi3>
 8005268:	0003      	movs	r3, r0
 800526a:	b29b      	uxth	r3, r3
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800526e:	e037      	b.n	80052e0 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	4a32      	ldr	r2, [pc, #200]	; (8005340 <UART_SetConfig+0x62c>)
 8005278:	189a      	adds	r2, r3, r2
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0019      	movs	r1, r3
 8005280:	0010      	movs	r0, r2
 8005282:	f7fa ff49 	bl	8000118 <__udivsi3>
 8005286:	0003      	movs	r3, r0
 8005288:	b29b      	uxth	r3, r3
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800528c:	e028      	b.n	80052e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800528e:	f7ff f891 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005292:	0002      	movs	r2, r0
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	18d2      	adds	r2, r2, r3
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	0019      	movs	r1, r3
 80052a2:	0010      	movs	r0, r2
 80052a4:	f7fa ff38 	bl	8000118 <__udivsi3>
 80052a8:	0003      	movs	r3, r0
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ae:	e017      	b.n	80052e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	0212      	lsls	r2, r2, #8
 80052ba:	189a      	adds	r2, r3, r2
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0019      	movs	r1, r3
 80052c2:	0010      	movs	r0, r2
 80052c4:	f7fa ff28 	bl	8000118 <__udivsi3>
 80052c8:	0003      	movs	r3, r0
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ce:	e007      	b.n	80052e0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80052d0:	2313      	movs	r3, #19
 80052d2:	2218      	movs	r2, #24
 80052d4:	4694      	mov	ip, r2
 80052d6:	44bc      	add	ip, r7
 80052d8:	4463      	add	r3, ip
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
        break;
 80052de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d908      	bls.n	80052f8 <UART_SetConfig+0x5e4>
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	4a12      	ldr	r2, [pc, #72]	; (8005334 <UART_SetConfig+0x620>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d804      	bhi.n	80052f8 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	e006      	b.n	8005306 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80052f8:	2313      	movs	r3, #19
 80052fa:	2218      	movs	r2, #24
 80052fc:	4694      	mov	ip, r2
 80052fe:	44bc      	add	ip, r7
 8005300:	4463      	add	r3, ip
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	2200      	movs	r2, #0
 8005310:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005312:	2313      	movs	r3, #19
 8005314:	2218      	movs	r2, #24
 8005316:	4694      	mov	ip, r2
 8005318:	44bc      	add	ip, r7
 800531a:	4463      	add	r3, ip
 800531c:	781b      	ldrb	r3, [r3, #0]
}
 800531e:	0018      	movs	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	b00e      	add	sp, #56	; 0x38
 8005324:	bdb0      	pop	{r4, r5, r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	40021000 	.word	0x40021000
 800532c:	007a1200 	.word	0x007a1200
 8005330:	01e84800 	.word	0x01e84800
 8005334:	0000ffff 	.word	0x0000ffff
 8005338:	080062a8 	.word	0x080062a8
 800533c:	003d0900 	.word	0x003d0900
 8005340:	00f42400 	.word	0x00f42400

08005344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	d00b      	beq.n	800536e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4a4a      	ldr	r2, [pc, #296]	; (8005488 <UART_AdvFeatureConfig+0x144>)
 800535e:	4013      	ands	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d00b      	beq.n	8005390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4a43      	ldr	r2, [pc, #268]	; (800548c <UART_AdvFeatureConfig+0x148>)
 8005380:	4013      	ands	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005394:	2204      	movs	r2, #4
 8005396:	4013      	ands	r3, r2
 8005398:	d00b      	beq.n	80053b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a3b      	ldr	r2, [pc, #236]	; (8005490 <UART_AdvFeatureConfig+0x14c>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2208      	movs	r2, #8
 80053b8:	4013      	ands	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4a34      	ldr	r2, [pc, #208]	; (8005494 <UART_AdvFeatureConfig+0x150>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	0019      	movs	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2210      	movs	r2, #16
 80053da:	4013      	ands	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <UART_AdvFeatureConfig+0x154>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2220      	movs	r2, #32
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00b      	beq.n	8005418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	4a25      	ldr	r2, [pc, #148]	; (800549c <UART_AdvFeatureConfig+0x158>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2240      	movs	r2, #64	; 0x40
 800541e:	4013      	ands	r3, r2
 8005420:	d01d      	beq.n	800545e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <UART_AdvFeatureConfig+0x15c>)
 800542a:	4013      	ands	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	035b      	lsls	r3, r3, #13
 8005442:	429a      	cmp	r2, r3
 8005444:	d10b      	bne.n	800545e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a15      	ldr	r2, [pc, #84]	; (80054a4 <UART_AdvFeatureConfig+0x160>)
 800544e:	4013      	ands	r3, r2
 8005450:	0019      	movs	r1, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	4013      	ands	r3, r2
 8005466:	d00b      	beq.n	8005480 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a0e      	ldr	r2, [pc, #56]	; (80054a8 <UART_AdvFeatureConfig+0x164>)
 8005470:	4013      	ands	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]
  }
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	46bd      	mov	sp, r7
 8005484:	b002      	add	sp, #8
 8005486:	bd80      	pop	{r7, pc}
 8005488:	fffdffff 	.word	0xfffdffff
 800548c:	fffeffff 	.word	0xfffeffff
 8005490:	fffbffff 	.word	0xfffbffff
 8005494:	ffff7fff 	.word	0xffff7fff
 8005498:	ffffefff 	.word	0xffffefff
 800549c:	ffffdfff 	.word	0xffffdfff
 80054a0:	ffefffff 	.word	0xffefffff
 80054a4:	ff9fffff 	.word	0xff9fffff
 80054a8:	fff7ffff 	.word	0xfff7ffff

080054ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80054ba:	f7fd f9c3 	bl	8002844 <HAL_GetTick>
 80054be:	0003      	movs	r3, r0
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2208      	movs	r2, #8
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d10d      	bne.n	80054ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	0399      	lsls	r1, r3, #14
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4b16      	ldr	r3, [pc, #88]	; (8005534 <UART_CheckIdleState+0x88>)
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	0013      	movs	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	f000 f82a 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 80054e4:	1e03      	subs	r3, r0, #0
 80054e6:	d001      	beq.n	80054ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e01f      	b.n	800552c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2204      	movs	r2, #4
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d10d      	bne.n	8005516 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	03d9      	lsls	r1, r3, #15
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <UART_CheckIdleState+0x88>)
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	0013      	movs	r3, r2
 8005508:	2200      	movs	r2, #0
 800550a:	f000 f815 	bl	8005538 <UART_WaitOnFlagUntilTimeout>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d001      	beq.n	8005516 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e00a      	b.n	800552c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2270      	movs	r2, #112	; 0x70
 8005526:	2100      	movs	r1, #0
 8005528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	b004      	add	sp, #16
 8005532:	bd80      	pop	{r7, pc}
 8005534:	01ffffff 	.word	0x01ffffff

08005538 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	1dfb      	adds	r3, r7, #7
 8005546:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005548:	e029      	b.n	800559e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3301      	adds	r3, #1
 800554e:	d026      	beq.n	800559e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005550:	f7fd f978 	bl	8002844 <HAL_GetTick>
 8005554:	0002      	movs	r2, r0
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d302      	bcc.n	8005566 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d11b      	bne.n	800559e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4915      	ldr	r1, [pc, #84]	; (80055c8 <UART_WaitOnFlagUntilTimeout+0x90>)
 8005572:	400a      	ands	r2, r1
 8005574:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2101      	movs	r1, #1
 8005582:	438a      	bics	r2, r1
 8005584:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2270      	movs	r2, #112	; 0x70
 8005596:	2100      	movs	r1, #0
 8005598:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e00f      	b.n	80055be <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	4013      	ands	r3, r2
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	425a      	negs	r2, r3
 80055ae:	4153      	adcs	r3, r2
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	001a      	movs	r2, r3
 80055b4:	1dfb      	adds	r3, r7, #7
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d0c6      	beq.n	800554a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b004      	add	sp, #16
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	fffffe5f 	.word	0xfffffe5f

080055cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <USB_DisableGlobalInt+0x30>)
 80055d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	5a9b      	ldrh	r3, [r3, r2]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	b292      	uxth	r2, r2
 80055e4:	43d2      	mvns	r2, r2
 80055e6:	b292      	uxth	r2, r2
 80055e8:	4013      	ands	r3, r2
 80055ea:	b299      	uxth	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b004      	add	sp, #16
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	0000bf80 	.word	0x0000bf80

08005600 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005600:	b084      	sub	sp, #16
 8005602:	b590      	push	{r4, r7, lr}
 8005604:	46c6      	mov	lr, r8
 8005606:	b500      	push	{lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	2004      	movs	r0, #4
 8005610:	2410      	movs	r4, #16
 8005612:	46a4      	mov	ip, r4
 8005614:	2408      	movs	r4, #8
 8005616:	46a0      	mov	r8, r4
 8005618:	44b8      	add	r8, r7
 800561a:	44c4      	add	ip, r8
 800561c:	4460      	add	r0, ip
 800561e:	6001      	str	r1, [r0, #0]
 8005620:	6042      	str	r2, [r0, #4]
 8005622:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	2101      	movs	r1, #1
 800562a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	2100      	movs	r1, #0
 8005632:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2244      	movs	r2, #68	; 0x44
 8005638:	2100      	movs	r1, #0
 800563a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2250      	movs	r2, #80	; 0x50
 8005640:	2100      	movs	r1, #0
 8005642:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	0018      	movs	r0, r3
 8005648:	46bd      	mov	sp, r7
 800564a:	b002      	add	sp, #8
 800564c:	bc04      	pop	{r2}
 800564e:	4690      	mov	r8, r2
 8005650:	bc90      	pop	{r4, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	b004      	add	sp, #16
 8005656:	4718      	bx	r3

08005658 <_Znwj>:
 8005658:	b510      	push	{r4, lr}
 800565a:	1e04      	subs	r4, r0, #0
 800565c:	d100      	bne.n	8005660 <_Znwj+0x8>
 800565e:	3401      	adds	r4, #1
 8005660:	0020      	movs	r0, r4
 8005662:	f000 f8e1 	bl	8005828 <malloc>
 8005666:	2800      	cmp	r0, #0
 8005668:	d107      	bne.n	800567a <_Znwj+0x22>
 800566a:	f000 f807 	bl	800567c <_ZSt15get_new_handlerv>
 800566e:	2800      	cmp	r0, #0
 8005670:	d101      	bne.n	8005676 <_Znwj+0x1e>
 8005672:	f000 f8a8 	bl	80057c6 <abort>
 8005676:	4780      	blx	r0
 8005678:	e7f2      	b.n	8005660 <_Znwj+0x8>
 800567a:	bd10      	pop	{r4, pc}

0800567c <_ZSt15get_new_handlerv>:
 800567c:	4b01      	ldr	r3, [pc, #4]	; (8005684 <_ZSt15get_new_handlerv+0x8>)
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	4770      	bx	lr
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	200002b4 	.word	0x200002b4

08005688 <_ZNSaIcEC1Ev>:
 8005688:	4770      	bx	lr

0800568a <_ZNSaIcED1Ev>:
 800568a:	4770      	bx	lr

0800568c <_ZSt19__throw_logic_errorPKc>:
 800568c:	b510      	push	{r4, lr}
 800568e:	f000 f89a 	bl	80057c6 <abort>

08005692 <_ZSt20__throw_length_errorPKc>:
 8005692:	b510      	push	{r4, lr}
 8005694:	f000 f897 	bl	80057c6 <abort>

08005698 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005698:	b510      	push	{r4, lr}
 800569a:	2a00      	cmp	r2, #0
 800569c:	d001      	beq.n	80056a2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 800569e:	f000 f8e2 	bl	8005866 <memcpy>
 80056a2:	bd10      	pop	{r4, pc}

080056a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 80056a4:	6001      	str	r1, [r0, #0]
 80056a6:	4770      	bx	lr

080056a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 80056a8:	6800      	ldr	r0, [r0, #0]
 80056aa:	4770      	bx	lr

080056ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 80056ac:	3008      	adds	r0, #8
 80056ae:	4770      	bx	lr

080056b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 80056b0:	6081      	str	r1, [r0, #8]
 80056b2:	4770      	bx	lr

080056b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 80056b4:	2200      	movs	r2, #0
 80056b6:	6803      	ldr	r3, [r0, #0]
 80056b8:	6041      	str	r1, [r0, #4]
 80056ba:	545a      	strb	r2, [r3, r1]
 80056bc:	4770      	bx	lr
	...

080056c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80056c0:	680b      	ldr	r3, [r1, #0]
 80056c2:	b510      	push	{r4, lr}
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da02      	bge.n	80056ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 80056c8:	4809      	ldr	r0, [pc, #36]	; (80056f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 80056ca:	f7ff ffe2 	bl	8005692 <_ZSt20__throw_length_errorPKc>
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d905      	bls.n	80056de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 80056d2:	0052      	lsls	r2, r2, #1
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d202      	bcs.n	80056de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 80056d8:	2a00      	cmp	r2, #0
 80056da:	db05      	blt.n	80056e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80056dc:	600a      	str	r2, [r1, #0]
 80056de:	6808      	ldr	r0, [r1, #0]
 80056e0:	3001      	adds	r0, #1
 80056e2:	f7ff ffb9 	bl	8005658 <_Znwj>
 80056e6:	bd10      	pop	{r4, pc}
 80056e8:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	e7f7      	b.n	80056de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	080062f6 	.word	0x080062f6
 80056f4:	7fffffff 	.word	0x7fffffff

080056f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80056f8:	0003      	movs	r3, r0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	4298      	cmp	r0, r3
 8005702:	d001      	beq.n	8005708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8005704:	f000 f85b 	bl	80057be <_ZdlPv>
 8005708:	bd10      	pop	{r4, pc}

0800570a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800570a:	b510      	push	{r4, lr}
 800570c:	2a01      	cmp	r2, #1
 800570e:	d102      	bne.n	8005716 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005710:	780b      	ldrb	r3, [r1, #0]
 8005712:	7003      	strb	r3, [r0, #0]
 8005714:	bd10      	pop	{r4, pc}
 8005716:	f7ff ffbf 	bl	8005698 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800571a:	e7fb      	b.n	8005714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800571c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800571c:	b510      	push	{r4, lr}
 800571e:	1a52      	subs	r2, r2, r1
 8005720:	f7ff fff3 	bl	800570a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005724:	bd10      	pop	{r4, pc}

08005726 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005726:	b510      	push	{r4, lr}
 8005728:	1a52      	subs	r2, r2, r1
 800572a:	f7ff ffee 	bl	800570a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800572e:	bd10      	pop	{r4, pc}

08005730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005730:	b510      	push	{r4, lr}
 8005732:	0004      	movs	r4, r0
 8005734:	f7ff ffe0 	bl	80056f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005738:	0020      	movs	r0, r4
 800573a:	bd10      	pop	{r4, pc}

0800573c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800573c:	6840      	ldr	r0, [r0, #4]
 800573e:	4770      	bx	lr

08005740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005740:	6800      	ldr	r0, [r0, #0]
 8005742:	1840      	adds	r0, r0, r1
 8005744:	4770      	bx	lr

08005746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005746:	6001      	str	r1, [r0, #0]
 8005748:	4770      	bx	lr
	...

0800574c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800574c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800574e:	0004      	movs	r4, r0
 8005750:	000d      	movs	r5, r1
 8005752:	0016      	movs	r6, r2
 8005754:	2900      	cmp	r1, #0
 8005756:	d104      	bne.n	8005762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8005758:	2a00      	cmp	r2, #0
 800575a:	d002      	beq.n	8005762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 800575c:	480c      	ldr	r0, [pc, #48]	; (8005790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800575e:	f7ff ff95 	bl	800568c <_ZSt19__throw_logic_errorPKc>
 8005762:	1b73      	subs	r3, r6, r5
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d907      	bls.n	800577a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 800576a:	2200      	movs	r2, #0
 800576c:	a901      	add	r1, sp, #4
 800576e:	0020      	movs	r0, r4
 8005770:	f7ff ffa6 	bl	80056c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005774:	9b01      	ldr	r3, [sp, #4]
 8005776:	6020      	str	r0, [r4, #0]
 8005778:	60a3      	str	r3, [r4, #8]
 800577a:	0032      	movs	r2, r6
 800577c:	0029      	movs	r1, r5
 800577e:	6820      	ldr	r0, [r4, #0]
 8005780:	f7ff ffd1 	bl	8005726 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005784:	2100      	movs	r1, #0
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	6822      	ldr	r2, [r4, #0]
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	54d1      	strb	r1, [r2, r3]
 800578e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8005790:	080062cc 	.word	0x080062cc

08005794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005794:	0003      	movs	r3, r0
 8005796:	3308      	adds	r3, #8
 8005798:	b570      	push	{r4, r5, r6, lr}
 800579a:	0004      	movs	r4, r0
 800579c:	1e0d      	subs	r5, r1, #0
 800579e:	6003      	str	r3, [r0, #0]
 80057a0:	d00a      	beq.n	80057b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x24>
 80057a2:	0008      	movs	r0, r1
 80057a4:	f7fa fcb0 	bl	8000108 <strlen>
 80057a8:	182a      	adds	r2, r5, r0
 80057aa:	0029      	movs	r1, r5
 80057ac:	0020      	movs	r0, r4
 80057ae:	2300      	movs	r3, #0
 80057b0:	f7ff ffcc 	bl	800574c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80057b4:	0020      	movs	r0, r4
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	2201      	movs	r2, #1
 80057ba:	4252      	negs	r2, r2
 80057bc:	e7f5      	b.n	80057aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080057be <_ZdlPv>:
 80057be:	b510      	push	{r4, lr}
 80057c0:	f000 f83c 	bl	800583c <free>
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <abort>:
 80057c6:	b510      	push	{r4, lr}
 80057c8:	2006      	movs	r0, #6
 80057ca:	f000 f955 	bl	8005a78 <raise>
 80057ce:	2001      	movs	r0, #1
 80057d0:	f7fc ff31 	bl	8002636 <_exit>

080057d4 <__errno>:
 80057d4:	4b01      	ldr	r3, [pc, #4]	; (80057dc <__errno+0x8>)
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	4770      	bx	lr
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	20000044 	.word	0x20000044

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	2600      	movs	r6, #0
 80057e4:	4d0c      	ldr	r5, [pc, #48]	; (8005818 <__libc_init_array+0x38>)
 80057e6:	4c0d      	ldr	r4, [pc, #52]	; (800581c <__libc_init_array+0x3c>)
 80057e8:	1b64      	subs	r4, r4, r5
 80057ea:	10a4      	asrs	r4, r4, #2
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	2600      	movs	r6, #0
 80057f2:	f000 fc9f 	bl	8006134 <_init>
 80057f6:	4d0a      	ldr	r5, [pc, #40]	; (8005820 <__libc_init_array+0x40>)
 80057f8:	4c0a      	ldr	r4, [pc, #40]	; (8005824 <__libc_init_array+0x44>)
 80057fa:	1b64      	subs	r4, r4, r5
 80057fc:	10a4      	asrs	r4, r4, #2
 80057fe:	42a6      	cmp	r6, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	00b3      	lsls	r3, r6, #2
 8005806:	58eb      	ldr	r3, [r5, r3]
 8005808:	4798      	blx	r3
 800580a:	3601      	adds	r6, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	00b3      	lsls	r3, r6, #2
 8005810:	58eb      	ldr	r3, [r5, r3]
 8005812:	4798      	blx	r3
 8005814:	3601      	adds	r6, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	0800634c 	.word	0x0800634c
 800581c:	0800634c 	.word	0x0800634c
 8005820:	0800634c 	.word	0x0800634c
 8005824:	08006350 	.word	0x08006350

08005828 <malloc>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4b03      	ldr	r3, [pc, #12]	; (8005838 <malloc+0x10>)
 800582c:	0001      	movs	r1, r0
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	f000 f888 	bl	8005944 <_malloc_r>
 8005834:	bd10      	pop	{r4, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	20000044 	.word	0x20000044

0800583c <free>:
 800583c:	b510      	push	{r4, lr}
 800583e:	4b03      	ldr	r3, [pc, #12]	; (800584c <free+0x10>)
 8005840:	0001      	movs	r1, r0
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	f000 f834 	bl	80058b0 <_free_r>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	20000044 	.word	0x20000044

08005850 <memchr>:
 8005850:	b2c9      	uxtb	r1, r1
 8005852:	1882      	adds	r2, r0, r2
 8005854:	4290      	cmp	r0, r2
 8005856:	d101      	bne.n	800585c <memchr+0xc>
 8005858:	2000      	movs	r0, #0
 800585a:	4770      	bx	lr
 800585c:	7803      	ldrb	r3, [r0, #0]
 800585e:	428b      	cmp	r3, r1
 8005860:	d0fb      	beq.n	800585a <memchr+0xa>
 8005862:	3001      	adds	r0, #1
 8005864:	e7f6      	b.n	8005854 <memchr+0x4>

08005866 <memcpy>:
 8005866:	2300      	movs	r3, #0
 8005868:	b510      	push	{r4, lr}
 800586a:	429a      	cmp	r2, r3
 800586c:	d100      	bne.n	8005870 <memcpy+0xa>
 800586e:	bd10      	pop	{r4, pc}
 8005870:	5ccc      	ldrb	r4, [r1, r3]
 8005872:	54c4      	strb	r4, [r0, r3]
 8005874:	3301      	adds	r3, #1
 8005876:	e7f8      	b.n	800586a <memcpy+0x4>

08005878 <memmove>:
 8005878:	b510      	push	{r4, lr}
 800587a:	4288      	cmp	r0, r1
 800587c:	d902      	bls.n	8005884 <memmove+0xc>
 800587e:	188b      	adds	r3, r1, r2
 8005880:	4298      	cmp	r0, r3
 8005882:	d303      	bcc.n	800588c <memmove+0x14>
 8005884:	2300      	movs	r3, #0
 8005886:	e007      	b.n	8005898 <memmove+0x20>
 8005888:	5c8b      	ldrb	r3, [r1, r2]
 800588a:	5483      	strb	r3, [r0, r2]
 800588c:	3a01      	subs	r2, #1
 800588e:	d2fb      	bcs.n	8005888 <memmove+0x10>
 8005890:	bd10      	pop	{r4, pc}
 8005892:	5ccc      	ldrb	r4, [r1, r3]
 8005894:	54c4      	strb	r4, [r0, r3]
 8005896:	3301      	adds	r3, #1
 8005898:	429a      	cmp	r2, r3
 800589a:	d1fa      	bne.n	8005892 <memmove+0x1a>
 800589c:	e7f8      	b.n	8005890 <memmove+0x18>

0800589e <memset>:
 800589e:	0003      	movs	r3, r0
 80058a0:	1812      	adds	r2, r2, r0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d100      	bne.n	80058a8 <memset+0xa>
 80058a6:	4770      	bx	lr
 80058a8:	7019      	strb	r1, [r3, #0]
 80058aa:	3301      	adds	r3, #1
 80058ac:	e7f9      	b.n	80058a2 <memset+0x4>
	...

080058b0 <_free_r>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	0005      	movs	r5, r0
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d010      	beq.n	80058da <_free_r+0x2a>
 80058b8:	1f0c      	subs	r4, r1, #4
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da00      	bge.n	80058c2 <_free_r+0x12>
 80058c0:	18e4      	adds	r4, r4, r3
 80058c2:	0028      	movs	r0, r5
 80058c4:	f000 f930 	bl	8005b28 <__malloc_lock>
 80058c8:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <_free_r+0x90>)
 80058ca:	6813      	ldr	r3, [r2, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <_free_r+0x2c>
 80058d0:	6063      	str	r3, [r4, #4]
 80058d2:	6014      	str	r4, [r2, #0]
 80058d4:	0028      	movs	r0, r5
 80058d6:	f000 f928 	bl	8005b2a <__malloc_unlock>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d909      	bls.n	80058f4 <_free_r+0x44>
 80058e0:	6821      	ldr	r1, [r4, #0]
 80058e2:	1860      	adds	r0, r4, r1
 80058e4:	4283      	cmp	r3, r0
 80058e6:	d1f3      	bne.n	80058d0 <_free_r+0x20>
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	1841      	adds	r1, r0, r1
 80058ee:	6021      	str	r1, [r4, #0]
 80058f0:	e7ee      	b.n	80058d0 <_free_r+0x20>
 80058f2:	0013      	movs	r3, r2
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	d001      	beq.n	80058fe <_free_r+0x4e>
 80058fa:	42a2      	cmp	r2, r4
 80058fc:	d9f9      	bls.n	80058f2 <_free_r+0x42>
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	1858      	adds	r0, r3, r1
 8005902:	42a0      	cmp	r0, r4
 8005904:	d10b      	bne.n	800591e <_free_r+0x6e>
 8005906:	6820      	ldr	r0, [r4, #0]
 8005908:	1809      	adds	r1, r1, r0
 800590a:	1858      	adds	r0, r3, r1
 800590c:	6019      	str	r1, [r3, #0]
 800590e:	4282      	cmp	r2, r0
 8005910:	d1e0      	bne.n	80058d4 <_free_r+0x24>
 8005912:	6810      	ldr	r0, [r2, #0]
 8005914:	6852      	ldr	r2, [r2, #4]
 8005916:	1841      	adds	r1, r0, r1
 8005918:	6019      	str	r1, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
 800591c:	e7da      	b.n	80058d4 <_free_r+0x24>
 800591e:	42a0      	cmp	r0, r4
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	e7d5      	b.n	80058d4 <_free_r+0x24>
 8005928:	6821      	ldr	r1, [r4, #0]
 800592a:	1860      	adds	r0, r4, r1
 800592c:	4282      	cmp	r2, r0
 800592e:	d103      	bne.n	8005938 <_free_r+0x88>
 8005930:	6810      	ldr	r0, [r2, #0]
 8005932:	6852      	ldr	r2, [r2, #4]
 8005934:	1841      	adds	r1, r0, r1
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	6062      	str	r2, [r4, #4]
 800593a:	605c      	str	r4, [r3, #4]
 800593c:	e7ca      	b.n	80058d4 <_free_r+0x24>
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	200002b8 	.word	0x200002b8

08005944 <_malloc_r>:
 8005944:	2303      	movs	r3, #3
 8005946:	b570      	push	{r4, r5, r6, lr}
 8005948:	1ccd      	adds	r5, r1, #3
 800594a:	439d      	bics	r5, r3
 800594c:	3508      	adds	r5, #8
 800594e:	0006      	movs	r6, r0
 8005950:	2d0c      	cmp	r5, #12
 8005952:	d21e      	bcs.n	8005992 <_malloc_r+0x4e>
 8005954:	250c      	movs	r5, #12
 8005956:	42a9      	cmp	r1, r5
 8005958:	d81d      	bhi.n	8005996 <_malloc_r+0x52>
 800595a:	0030      	movs	r0, r6
 800595c:	f000 f8e4 	bl	8005b28 <__malloc_lock>
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <_malloc_r+0xb4>)
 8005962:	6814      	ldr	r4, [r2, #0]
 8005964:	0021      	movs	r1, r4
 8005966:	2900      	cmp	r1, #0
 8005968:	d119      	bne.n	800599e <_malloc_r+0x5a>
 800596a:	4c24      	ldr	r4, [pc, #144]	; (80059fc <_malloc_r+0xb8>)
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <_malloc_r+0x36>
 8005972:	0030      	movs	r0, r6
 8005974:	f000 f844 	bl	8005a00 <_sbrk_r>
 8005978:	6020      	str	r0, [r4, #0]
 800597a:	0029      	movs	r1, r5
 800597c:	0030      	movs	r0, r6
 800597e:	f000 f83f 	bl	8005a00 <_sbrk_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	d12b      	bne.n	80059de <_malloc_r+0x9a>
 8005986:	230c      	movs	r3, #12
 8005988:	0030      	movs	r0, r6
 800598a:	6033      	str	r3, [r6, #0]
 800598c:	f000 f8cd 	bl	8005b2a <__malloc_unlock>
 8005990:	e003      	b.n	800599a <_malloc_r+0x56>
 8005992:	2d00      	cmp	r5, #0
 8005994:	dadf      	bge.n	8005956 <_malloc_r+0x12>
 8005996:	230c      	movs	r3, #12
 8005998:	6033      	str	r3, [r6, #0]
 800599a:	2000      	movs	r0, #0
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	680b      	ldr	r3, [r1, #0]
 80059a0:	1b5b      	subs	r3, r3, r5
 80059a2:	d419      	bmi.n	80059d8 <_malloc_r+0x94>
 80059a4:	2b0b      	cmp	r3, #11
 80059a6:	d903      	bls.n	80059b0 <_malloc_r+0x6c>
 80059a8:	600b      	str	r3, [r1, #0]
 80059aa:	18cc      	adds	r4, r1, r3
 80059ac:	6025      	str	r5, [r4, #0]
 80059ae:	e003      	b.n	80059b8 <_malloc_r+0x74>
 80059b0:	684b      	ldr	r3, [r1, #4]
 80059b2:	428c      	cmp	r4, r1
 80059b4:	d10d      	bne.n	80059d2 <_malloc_r+0x8e>
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	0030      	movs	r0, r6
 80059ba:	f000 f8b6 	bl	8005b2a <__malloc_unlock>
 80059be:	0020      	movs	r0, r4
 80059c0:	2207      	movs	r2, #7
 80059c2:	300b      	adds	r0, #11
 80059c4:	1d23      	adds	r3, r4, #4
 80059c6:	4390      	bics	r0, r2
 80059c8:	1ac3      	subs	r3, r0, r3
 80059ca:	d0e7      	beq.n	800599c <_malloc_r+0x58>
 80059cc:	425a      	negs	r2, r3
 80059ce:	50e2      	str	r2, [r4, r3]
 80059d0:	e7e4      	b.n	800599c <_malloc_r+0x58>
 80059d2:	6063      	str	r3, [r4, #4]
 80059d4:	000c      	movs	r4, r1
 80059d6:	e7ef      	b.n	80059b8 <_malloc_r+0x74>
 80059d8:	000c      	movs	r4, r1
 80059da:	6849      	ldr	r1, [r1, #4]
 80059dc:	e7c3      	b.n	8005966 <_malloc_r+0x22>
 80059de:	2303      	movs	r3, #3
 80059e0:	1cc4      	adds	r4, r0, #3
 80059e2:	439c      	bics	r4, r3
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d0e1      	beq.n	80059ac <_malloc_r+0x68>
 80059e8:	1a21      	subs	r1, r4, r0
 80059ea:	0030      	movs	r0, r6
 80059ec:	f000 f808 	bl	8005a00 <_sbrk_r>
 80059f0:	1c43      	adds	r3, r0, #1
 80059f2:	d1db      	bne.n	80059ac <_malloc_r+0x68>
 80059f4:	e7c7      	b.n	8005986 <_malloc_r+0x42>
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	200002b8 	.word	0x200002b8
 80059fc:	200002bc 	.word	0x200002bc

08005a00 <_sbrk_r>:
 8005a00:	2300      	movs	r3, #0
 8005a02:	b570      	push	{r4, r5, r6, lr}
 8005a04:	4c06      	ldr	r4, [pc, #24]	; (8005a20 <_sbrk_r+0x20>)
 8005a06:	0005      	movs	r5, r0
 8005a08:	0008      	movs	r0, r1
 8005a0a:	6023      	str	r3, [r4, #0]
 8005a0c:	f7fc fe20 	bl	8002650 <_sbrk>
 8005a10:	1c43      	adds	r3, r0, #1
 8005a12:	d103      	bne.n	8005a1c <_sbrk_r+0x1c>
 8005a14:	6823      	ldr	r3, [r4, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d000      	beq.n	8005a1c <_sbrk_r+0x1c>
 8005a1a:	602b      	str	r3, [r5, #0]
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	200006e0 	.word	0x200006e0

08005a24 <_raise_r>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	0004      	movs	r4, r0
 8005a28:	000d      	movs	r5, r1
 8005a2a:	291f      	cmp	r1, #31
 8005a2c:	d904      	bls.n	8005a38 <_raise_r+0x14>
 8005a2e:	2316      	movs	r3, #22
 8005a30:	6003      	str	r3, [r0, #0]
 8005a32:	2001      	movs	r0, #1
 8005a34:	4240      	negs	r0, r0
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
 8005a38:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <_raise_r+0x24>
 8005a3e:	008a      	lsls	r2, r1, #2
 8005a40:	189b      	adds	r3, r3, r2
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	d108      	bne.n	8005a5a <_raise_r+0x36>
 8005a48:	0020      	movs	r0, r4
 8005a4a:	f000 f831 	bl	8005ab0 <_getpid_r>
 8005a4e:	002a      	movs	r2, r5
 8005a50:	0001      	movs	r1, r0
 8005a52:	0020      	movs	r0, r4
 8005a54:	f000 f81a 	bl	8005a8c <_kill_r>
 8005a58:	e7ed      	b.n	8005a36 <_raise_r+0x12>
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	2a01      	cmp	r2, #1
 8005a5e:	d0ea      	beq.n	8005a36 <_raise_r+0x12>
 8005a60:	1c51      	adds	r1, r2, #1
 8005a62:	d103      	bne.n	8005a6c <_raise_r+0x48>
 8005a64:	2316      	movs	r3, #22
 8005a66:	3001      	adds	r0, #1
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	e7e4      	b.n	8005a36 <_raise_r+0x12>
 8005a6c:	2400      	movs	r4, #0
 8005a6e:	0028      	movs	r0, r5
 8005a70:	601c      	str	r4, [r3, #0]
 8005a72:	4790      	blx	r2
 8005a74:	0020      	movs	r0, r4
 8005a76:	e7de      	b.n	8005a36 <_raise_r+0x12>

08005a78 <raise>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <raise+0x10>)
 8005a7c:	0001      	movs	r1, r0
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	f7ff ffd0 	bl	8005a24 <_raise_r>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	20000044 	.word	0x20000044

08005a8c <_kill_r>:
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	b570      	push	{r4, r5, r6, lr}
 8005a90:	4c06      	ldr	r4, [pc, #24]	; (8005aac <_kill_r+0x20>)
 8005a92:	0005      	movs	r5, r0
 8005a94:	0008      	movs	r0, r1
 8005a96:	0011      	movs	r1, r2
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	f7fc fdbc 	bl	8002616 <_kill>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d103      	bne.n	8005aaa <_kill_r+0x1e>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d000      	beq.n	8005aaa <_kill_r+0x1e>
 8005aa8:	602b      	str	r3, [r5, #0]
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	200006e0 	.word	0x200006e0

08005ab0 <_getpid_r>:
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	f7fc fdaa 	bl	800260a <_getpid>
 8005ab6:	bd10      	pop	{r4, pc}

08005ab8 <_vsniprintf_r>:
 8005ab8:	b530      	push	{r4, r5, lr}
 8005aba:	0014      	movs	r4, r2
 8005abc:	b09b      	sub	sp, #108	; 0x6c
 8005abe:	0005      	movs	r5, r0
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	da05      	bge.n	8005ad2 <_vsniprintf_r+0x1a>
 8005ac6:	238b      	movs	r3, #139	; 0x8b
 8005ac8:	6003      	str	r3, [r0, #0]
 8005aca:	2001      	movs	r0, #1
 8005acc:	4240      	negs	r0, r0
 8005ace:	b01b      	add	sp, #108	; 0x6c
 8005ad0:	bd30      	pop	{r4, r5, pc}
 8005ad2:	2382      	movs	r3, #130	; 0x82
 8005ad4:	4668      	mov	r0, sp
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	8183      	strh	r3, [r0, #12]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9100      	str	r1, [sp, #0]
 8005ade:	9104      	str	r1, [sp, #16]
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d000      	beq.n	8005ae6 <_vsniprintf_r+0x2e>
 8005ae4:	1e63      	subs	r3, r4, #1
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	2301      	movs	r3, #1
 8005aec:	4669      	mov	r1, sp
 8005aee:	425b      	negs	r3, r3
 8005af0:	81cb      	strh	r3, [r1, #14]
 8005af2:	0028      	movs	r0, r5
 8005af4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005af6:	f000 f87b 	bl	8005bf0 <_svfiprintf_r>
 8005afa:	1c43      	adds	r3, r0, #1
 8005afc:	da01      	bge.n	8005b02 <_vsniprintf_r+0x4a>
 8005afe:	238b      	movs	r3, #139	; 0x8b
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	2c00      	cmp	r4, #0
 8005b04:	d0e3      	beq.n	8005ace <_vsniprintf_r+0x16>
 8005b06:	2300      	movs	r3, #0
 8005b08:	9a00      	ldr	r2, [sp, #0]
 8005b0a:	7013      	strb	r3, [r2, #0]
 8005b0c:	e7df      	b.n	8005ace <_vsniprintf_r+0x16>
	...

08005b10 <vsniprintf>:
 8005b10:	b507      	push	{r0, r1, r2, lr}
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0013      	movs	r3, r2
 8005b16:	000a      	movs	r2, r1
 8005b18:	0001      	movs	r1, r0
 8005b1a:	4802      	ldr	r0, [pc, #8]	; (8005b24 <vsniprintf+0x14>)
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f7ff ffcb 	bl	8005ab8 <_vsniprintf_r>
 8005b22:	bd0e      	pop	{r1, r2, r3, pc}
 8005b24:	20000044 	.word	0x20000044

08005b28 <__malloc_lock>:
 8005b28:	4770      	bx	lr

08005b2a <__malloc_unlock>:
 8005b2a:	4770      	bx	lr

08005b2c <__ssputs_r>:
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	688e      	ldr	r6, [r1, #8]
 8005b30:	b085      	sub	sp, #20
 8005b32:	0007      	movs	r7, r0
 8005b34:	000c      	movs	r4, r1
 8005b36:	9203      	str	r2, [sp, #12]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	429e      	cmp	r6, r3
 8005b3c:	d83c      	bhi.n	8005bb8 <__ssputs_r+0x8c>
 8005b3e:	2390      	movs	r3, #144	; 0x90
 8005b40:	898a      	ldrh	r2, [r1, #12]
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	421a      	tst	r2, r3
 8005b46:	d034      	beq.n	8005bb2 <__ssputs_r+0x86>
 8005b48:	2503      	movs	r5, #3
 8005b4a:	6909      	ldr	r1, [r1, #16]
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	1a5b      	subs	r3, r3, r1
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	6963      	ldr	r3, [r4, #20]
 8005b54:	9802      	ldr	r0, [sp, #8]
 8005b56:	435d      	muls	r5, r3
 8005b58:	0feb      	lsrs	r3, r5, #31
 8005b5a:	195d      	adds	r5, r3, r5
 8005b5c:	9b01      	ldr	r3, [sp, #4]
 8005b5e:	106d      	asrs	r5, r5, #1
 8005b60:	3301      	adds	r3, #1
 8005b62:	181b      	adds	r3, r3, r0
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	d900      	bls.n	8005b6a <__ssputs_r+0x3e>
 8005b68:	001d      	movs	r5, r3
 8005b6a:	0553      	lsls	r3, r2, #21
 8005b6c:	d532      	bpl.n	8005bd4 <__ssputs_r+0xa8>
 8005b6e:	0029      	movs	r1, r5
 8005b70:	0038      	movs	r0, r7
 8005b72:	f7ff fee7 	bl	8005944 <_malloc_r>
 8005b76:	1e06      	subs	r6, r0, #0
 8005b78:	d109      	bne.n	8005b8e <__ssputs_r+0x62>
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	2340      	movs	r3, #64	; 0x40
 8005b80:	2001      	movs	r0, #1
 8005b82:	89a2      	ldrh	r2, [r4, #12]
 8005b84:	4240      	negs	r0, r0
 8005b86:	4313      	orrs	r3, r2
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	b005      	add	sp, #20
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8e:	9a02      	ldr	r2, [sp, #8]
 8005b90:	6921      	ldr	r1, [r4, #16]
 8005b92:	f7ff fe68 	bl	8005866 <memcpy>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <__ssputs_r+0xc0>)
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	9b02      	ldr	r3, [sp, #8]
 8005ba4:	6126      	str	r6, [r4, #16]
 8005ba6:	18f6      	adds	r6, r6, r3
 8005ba8:	6026      	str	r6, [r4, #0]
 8005baa:	6165      	str	r5, [r4, #20]
 8005bac:	9e01      	ldr	r6, [sp, #4]
 8005bae:	1aed      	subs	r5, r5, r3
 8005bb0:	60a5      	str	r5, [r4, #8]
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	429e      	cmp	r6, r3
 8005bb6:	d900      	bls.n	8005bba <__ssputs_r+0x8e>
 8005bb8:	9e01      	ldr	r6, [sp, #4]
 8005bba:	0032      	movs	r2, r6
 8005bbc:	9903      	ldr	r1, [sp, #12]
 8005bbe:	6820      	ldr	r0, [r4, #0]
 8005bc0:	f7ff fe5a 	bl	8005878 <memmove>
 8005bc4:	68a3      	ldr	r3, [r4, #8]
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	1b9b      	subs	r3, r3, r6
 8005bca:	60a3      	str	r3, [r4, #8]
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	199e      	adds	r6, r3, r6
 8005bd0:	6026      	str	r6, [r4, #0]
 8005bd2:	e7da      	b.n	8005b8a <__ssputs_r+0x5e>
 8005bd4:	002a      	movs	r2, r5
 8005bd6:	0038      	movs	r0, r7
 8005bd8:	f000 fa7e 	bl	80060d8 <_realloc_r>
 8005bdc:	1e06      	subs	r6, r0, #0
 8005bde:	d1e0      	bne.n	8005ba2 <__ssputs_r+0x76>
 8005be0:	6921      	ldr	r1, [r4, #16]
 8005be2:	0038      	movs	r0, r7
 8005be4:	f7ff fe64 	bl	80058b0 <_free_r>
 8005be8:	e7c7      	b.n	8005b7a <__ssputs_r+0x4e>
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	fffffb7f 	.word	0xfffffb7f

08005bf0 <_svfiprintf_r>:
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b0a1      	sub	sp, #132	; 0x84
 8005bf4:	9003      	str	r0, [sp, #12]
 8005bf6:	001d      	movs	r5, r3
 8005bf8:	898b      	ldrh	r3, [r1, #12]
 8005bfa:	000f      	movs	r7, r1
 8005bfc:	0016      	movs	r6, r2
 8005bfe:	061b      	lsls	r3, r3, #24
 8005c00:	d511      	bpl.n	8005c26 <_svfiprintf_r+0x36>
 8005c02:	690b      	ldr	r3, [r1, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10e      	bne.n	8005c26 <_svfiprintf_r+0x36>
 8005c08:	2140      	movs	r1, #64	; 0x40
 8005c0a:	f7ff fe9b 	bl	8005944 <_malloc_r>
 8005c0e:	6038      	str	r0, [r7, #0]
 8005c10:	6138      	str	r0, [r7, #16]
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d105      	bne.n	8005c22 <_svfiprintf_r+0x32>
 8005c16:	230c      	movs	r3, #12
 8005c18:	9a03      	ldr	r2, [sp, #12]
 8005c1a:	3801      	subs	r0, #1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	b021      	add	sp, #132	; 0x84
 8005c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c22:	2340      	movs	r3, #64	; 0x40
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	2300      	movs	r3, #0
 8005c28:	ac08      	add	r4, sp, #32
 8005c2a:	6163      	str	r3, [r4, #20]
 8005c2c:	3320      	adds	r3, #32
 8005c2e:	7663      	strb	r3, [r4, #25]
 8005c30:	3310      	adds	r3, #16
 8005c32:	76a3      	strb	r3, [r4, #26]
 8005c34:	9507      	str	r5, [sp, #28]
 8005c36:	0035      	movs	r5, r6
 8005c38:	782b      	ldrb	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <_svfiprintf_r+0x52>
 8005c3e:	2b25      	cmp	r3, #37	; 0x25
 8005c40:	d146      	bne.n	8005cd0 <_svfiprintf_r+0xe0>
 8005c42:	1bab      	subs	r3, r5, r6
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	d00c      	beq.n	8005c62 <_svfiprintf_r+0x72>
 8005c48:	0032      	movs	r2, r6
 8005c4a:	0039      	movs	r1, r7
 8005c4c:	9803      	ldr	r0, [sp, #12]
 8005c4e:	f7ff ff6d 	bl	8005b2c <__ssputs_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	d100      	bne.n	8005c58 <_svfiprintf_r+0x68>
 8005c56:	e0ae      	b.n	8005db6 <_svfiprintf_r+0x1c6>
 8005c58:	6962      	ldr	r2, [r4, #20]
 8005c5a:	9b05      	ldr	r3, [sp, #20]
 8005c5c:	4694      	mov	ip, r2
 8005c5e:	4463      	add	r3, ip
 8005c60:	6163      	str	r3, [r4, #20]
 8005c62:	782b      	ldrb	r3, [r5, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d100      	bne.n	8005c6a <_svfiprintf_r+0x7a>
 8005c68:	e0a5      	b.n	8005db6 <_svfiprintf_r+0x1c6>
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4252      	negs	r2, r2
 8005c70:	6062      	str	r2, [r4, #4]
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	3254      	adds	r2, #84	; 0x54
 8005c76:	1852      	adds	r2, r2, r1
 8005c78:	1c6e      	adds	r6, r5, #1
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	60e3      	str	r3, [r4, #12]
 8005c7e:	60a3      	str	r3, [r4, #8]
 8005c80:	7013      	strb	r3, [r2, #0]
 8005c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c84:	7831      	ldrb	r1, [r6, #0]
 8005c86:	2205      	movs	r2, #5
 8005c88:	4853      	ldr	r0, [pc, #332]	; (8005dd8 <_svfiprintf_r+0x1e8>)
 8005c8a:	f7ff fde1 	bl	8005850 <memchr>
 8005c8e:	1c75      	adds	r5, r6, #1
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d11f      	bne.n	8005cd4 <_svfiprintf_r+0xe4>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	06d3      	lsls	r3, r2, #27
 8005c98:	d504      	bpl.n	8005ca4 <_svfiprintf_r+0xb4>
 8005c9a:	2353      	movs	r3, #83	; 0x53
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	185b      	adds	r3, r3, r1
 8005ca0:	2120      	movs	r1, #32
 8005ca2:	7019      	strb	r1, [r3, #0]
 8005ca4:	0713      	lsls	r3, r2, #28
 8005ca6:	d504      	bpl.n	8005cb2 <_svfiprintf_r+0xc2>
 8005ca8:	2353      	movs	r3, #83	; 0x53
 8005caa:	a904      	add	r1, sp, #16
 8005cac:	185b      	adds	r3, r3, r1
 8005cae:	212b      	movs	r1, #43	; 0x2b
 8005cb0:	7019      	strb	r1, [r3, #0]
 8005cb2:	7833      	ldrb	r3, [r6, #0]
 8005cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb6:	d016      	beq.n	8005ce6 <_svfiprintf_r+0xf6>
 8005cb8:	0035      	movs	r5, r6
 8005cba:	2100      	movs	r1, #0
 8005cbc:	200a      	movs	r0, #10
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	782a      	ldrb	r2, [r5, #0]
 8005cc2:	1c6e      	adds	r6, r5, #1
 8005cc4:	3a30      	subs	r2, #48	; 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d94e      	bls.n	8005d68 <_svfiprintf_r+0x178>
 8005cca:	2900      	cmp	r1, #0
 8005ccc:	d018      	beq.n	8005d00 <_svfiprintf_r+0x110>
 8005cce:	e010      	b.n	8005cf2 <_svfiprintf_r+0x102>
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	e7b1      	b.n	8005c38 <_svfiprintf_r+0x48>
 8005cd4:	4b40      	ldr	r3, [pc, #256]	; (8005dd8 <_svfiprintf_r+0x1e8>)
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	1ac0      	subs	r0, r0, r3
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4083      	lsls	r3, r0
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	002e      	movs	r6, r5
 8005ce4:	e7ce      	b.n	8005c84 <_svfiprintf_r+0x94>
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	1d19      	adds	r1, r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	9107      	str	r1, [sp, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	db01      	blt.n	8005cf6 <_svfiprintf_r+0x106>
 8005cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf4:	e004      	b.n	8005d00 <_svfiprintf_r+0x110>
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	60e3      	str	r3, [r4, #12]
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	782b      	ldrb	r3, [r5, #0]
 8005d02:	2b2e      	cmp	r3, #46	; 0x2e
 8005d04:	d10a      	bne.n	8005d1c <_svfiprintf_r+0x12c>
 8005d06:	786b      	ldrb	r3, [r5, #1]
 8005d08:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0a:	d135      	bne.n	8005d78 <_svfiprintf_r+0x188>
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	3502      	adds	r5, #2
 8005d10:	1d1a      	adds	r2, r3, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	9207      	str	r2, [sp, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db2b      	blt.n	8005d72 <_svfiprintf_r+0x182>
 8005d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d1c:	4e2f      	ldr	r6, [pc, #188]	; (8005ddc <_svfiprintf_r+0x1ec>)
 8005d1e:	7829      	ldrb	r1, [r5, #0]
 8005d20:	2203      	movs	r2, #3
 8005d22:	0030      	movs	r0, r6
 8005d24:	f7ff fd94 	bl	8005850 <memchr>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d006      	beq.n	8005d3a <_svfiprintf_r+0x14a>
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	1b80      	subs	r0, r0, r6
 8005d30:	4083      	lsls	r3, r0
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	3501      	adds	r5, #1
 8005d36:	4313      	orrs	r3, r2
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	7829      	ldrb	r1, [r5, #0]
 8005d3c:	2206      	movs	r2, #6
 8005d3e:	4828      	ldr	r0, [pc, #160]	; (8005de0 <_svfiprintf_r+0x1f0>)
 8005d40:	1c6e      	adds	r6, r5, #1
 8005d42:	7621      	strb	r1, [r4, #24]
 8005d44:	f7ff fd84 	bl	8005850 <memchr>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d03c      	beq.n	8005dc6 <_svfiprintf_r+0x1d6>
 8005d4c:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <_svfiprintf_r+0x1f4>)
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d125      	bne.n	8005d9e <_svfiprintf_r+0x1ae>
 8005d52:	2207      	movs	r2, #7
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	3307      	adds	r3, #7
 8005d58:	4393      	bics	r3, r2
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	9307      	str	r3, [sp, #28]
 8005d5e:	6963      	ldr	r3, [r4, #20]
 8005d60:	9a04      	ldr	r2, [sp, #16]
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	6163      	str	r3, [r4, #20]
 8005d66:	e766      	b.n	8005c36 <_svfiprintf_r+0x46>
 8005d68:	4343      	muls	r3, r0
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	0035      	movs	r5, r6
 8005d70:	e7a6      	b.n	8005cc0 <_svfiprintf_r+0xd0>
 8005d72:	2301      	movs	r3, #1
 8005d74:	425b      	negs	r3, r3
 8005d76:	e7d0      	b.n	8005d1a <_svfiprintf_r+0x12a>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	200a      	movs	r0, #10
 8005d7c:	001a      	movs	r2, r3
 8005d7e:	3501      	adds	r5, #1
 8005d80:	6063      	str	r3, [r4, #4]
 8005d82:	7829      	ldrb	r1, [r5, #0]
 8005d84:	1c6e      	adds	r6, r5, #1
 8005d86:	3930      	subs	r1, #48	; 0x30
 8005d88:	2909      	cmp	r1, #9
 8005d8a:	d903      	bls.n	8005d94 <_svfiprintf_r+0x1a4>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0c5      	beq.n	8005d1c <_svfiprintf_r+0x12c>
 8005d90:	9209      	str	r2, [sp, #36]	; 0x24
 8005d92:	e7c3      	b.n	8005d1c <_svfiprintf_r+0x12c>
 8005d94:	4342      	muls	r2, r0
 8005d96:	2301      	movs	r3, #1
 8005d98:	1852      	adds	r2, r2, r1
 8005d9a:	0035      	movs	r5, r6
 8005d9c:	e7f1      	b.n	8005d82 <_svfiprintf_r+0x192>
 8005d9e:	ab07      	add	r3, sp, #28
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	003a      	movs	r2, r7
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <_svfiprintf_r+0x1f8>)
 8005da6:	0021      	movs	r1, r4
 8005da8:	9803      	ldr	r0, [sp, #12]
 8005daa:	e000      	b.n	8005dae <_svfiprintf_r+0x1be>
 8005dac:	bf00      	nop
 8005dae:	9004      	str	r0, [sp, #16]
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	d1d3      	bne.n	8005d5e <_svfiprintf_r+0x16e>
 8005db6:	89bb      	ldrh	r3, [r7, #12]
 8005db8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dba:	065b      	lsls	r3, r3, #25
 8005dbc:	d400      	bmi.n	8005dc0 <_svfiprintf_r+0x1d0>
 8005dbe:	e72e      	b.n	8005c1e <_svfiprintf_r+0x2e>
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	4240      	negs	r0, r0
 8005dc4:	e72b      	b.n	8005c1e <_svfiprintf_r+0x2e>
 8005dc6:	ab07      	add	r3, sp, #28
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	003a      	movs	r2, r7
 8005dcc:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <_svfiprintf_r+0x1f8>)
 8005dce:	0021      	movs	r1, r4
 8005dd0:	9803      	ldr	r0, [sp, #12]
 8005dd2:	f000 f879 	bl	8005ec8 <_printf_i>
 8005dd6:	e7ea      	b.n	8005dae <_svfiprintf_r+0x1be>
 8005dd8:	0800630e 	.word	0x0800630e
 8005ddc:	08006314 	.word	0x08006314
 8005de0:	08006318 	.word	0x08006318
 8005de4:	00000000 	.word	0x00000000
 8005de8:	08005b2d 	.word	0x08005b2d

08005dec <_printf_common>:
 8005dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dee:	0015      	movs	r5, r2
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	688a      	ldr	r2, [r1, #8]
 8005df4:	690b      	ldr	r3, [r1, #16]
 8005df6:	9000      	str	r0, [sp, #0]
 8005df8:	000c      	movs	r4, r1
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	da00      	bge.n	8005e00 <_printf_common+0x14>
 8005dfe:	0013      	movs	r3, r2
 8005e00:	0022      	movs	r2, r4
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	3243      	adds	r2, #67	; 0x43
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	d001      	beq.n	8005e10 <_printf_common+0x24>
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	069b      	lsls	r3, r3, #26
 8005e14:	d502      	bpl.n	8005e1c <_printf_common+0x30>
 8005e16:	682b      	ldr	r3, [r5, #0]
 8005e18:	3302      	adds	r3, #2
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	2706      	movs	r7, #6
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	401f      	ands	r7, r3
 8005e22:	d027      	beq.n	8005e74 <_printf_common+0x88>
 8005e24:	0023      	movs	r3, r4
 8005e26:	3343      	adds	r3, #67	; 0x43
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	4193      	sbcs	r3, r2
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	0692      	lsls	r2, r2, #26
 8005e32:	d430      	bmi.n	8005e96 <_printf_common+0xaa>
 8005e34:	0022      	movs	r2, r4
 8005e36:	9901      	ldr	r1, [sp, #4]
 8005e38:	3243      	adds	r2, #67	; 0x43
 8005e3a:	9800      	ldr	r0, [sp, #0]
 8005e3c:	9e08      	ldr	r6, [sp, #32]
 8005e3e:	47b0      	blx	r6
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d025      	beq.n	8005e90 <_printf_common+0xa4>
 8005e44:	2306      	movs	r3, #6
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	682a      	ldr	r2, [r5, #0]
 8005e4a:	68e1      	ldr	r1, [r4, #12]
 8005e4c:	4003      	ands	r3, r0
 8005e4e:	2500      	movs	r5, #0
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d103      	bne.n	8005e5c <_printf_common+0x70>
 8005e54:	1a8d      	subs	r5, r1, r2
 8005e56:	43eb      	mvns	r3, r5
 8005e58:	17db      	asrs	r3, r3, #31
 8005e5a:	401d      	ands	r5, r3
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	6922      	ldr	r2, [r4, #16]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	dd01      	ble.n	8005e68 <_printf_common+0x7c>
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	18ed      	adds	r5, r5, r3
 8005e68:	2700      	movs	r7, #0
 8005e6a:	42bd      	cmp	r5, r7
 8005e6c:	d120      	bne.n	8005eb0 <_printf_common+0xc4>
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e010      	b.n	8005e94 <_printf_common+0xa8>
 8005e72:	3701      	adds	r7, #1
 8005e74:	68e3      	ldr	r3, [r4, #12]
 8005e76:	682a      	ldr	r2, [r5, #0]
 8005e78:	1a9b      	subs	r3, r3, r2
 8005e7a:	42bb      	cmp	r3, r7
 8005e7c:	ddd2      	ble.n	8005e24 <_printf_common+0x38>
 8005e7e:	0022      	movs	r2, r4
 8005e80:	2301      	movs	r3, #1
 8005e82:	3219      	adds	r2, #25
 8005e84:	9901      	ldr	r1, [sp, #4]
 8005e86:	9800      	ldr	r0, [sp, #0]
 8005e88:	9e08      	ldr	r6, [sp, #32]
 8005e8a:	47b0      	blx	r6
 8005e8c:	1c43      	adds	r3, r0, #1
 8005e8e:	d1f0      	bne.n	8005e72 <_printf_common+0x86>
 8005e90:	2001      	movs	r0, #1
 8005e92:	4240      	negs	r0, r0
 8005e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e96:	2030      	movs	r0, #48	; 0x30
 8005e98:	18e1      	adds	r1, r4, r3
 8005e9a:	3143      	adds	r1, #67	; 0x43
 8005e9c:	7008      	strb	r0, [r1, #0]
 8005e9e:	0021      	movs	r1, r4
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	3145      	adds	r1, #69	; 0x45
 8005ea4:	7809      	ldrb	r1, [r1, #0]
 8005ea6:	18a2      	adds	r2, r4, r2
 8005ea8:	3243      	adds	r2, #67	; 0x43
 8005eaa:	3302      	adds	r3, #2
 8005eac:	7011      	strb	r1, [r2, #0]
 8005eae:	e7c1      	b.n	8005e34 <_printf_common+0x48>
 8005eb0:	0022      	movs	r2, r4
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	321a      	adds	r2, #26
 8005eb6:	9901      	ldr	r1, [sp, #4]
 8005eb8:	9800      	ldr	r0, [sp, #0]
 8005eba:	9e08      	ldr	r6, [sp, #32]
 8005ebc:	47b0      	blx	r6
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	d0e6      	beq.n	8005e90 <_printf_common+0xa4>
 8005ec2:	3701      	adds	r7, #1
 8005ec4:	e7d1      	b.n	8005e6a <_printf_common+0x7e>
	...

08005ec8 <_printf_i>:
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	b089      	sub	sp, #36	; 0x24
 8005ecc:	9204      	str	r2, [sp, #16]
 8005ece:	000a      	movs	r2, r1
 8005ed0:	3243      	adds	r2, #67	; 0x43
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	9003      	str	r0, [sp, #12]
 8005ed6:	9202      	str	r2, [sp, #8]
 8005ed8:	7e0a      	ldrb	r2, [r1, #24]
 8005eda:	000c      	movs	r4, r1
 8005edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ede:	2a6e      	cmp	r2, #110	; 0x6e
 8005ee0:	d100      	bne.n	8005ee4 <_printf_i+0x1c>
 8005ee2:	e086      	b.n	8005ff2 <_printf_i+0x12a>
 8005ee4:	d81f      	bhi.n	8005f26 <_printf_i+0x5e>
 8005ee6:	2a63      	cmp	r2, #99	; 0x63
 8005ee8:	d033      	beq.n	8005f52 <_printf_i+0x8a>
 8005eea:	d808      	bhi.n	8005efe <_printf_i+0x36>
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d100      	bne.n	8005ef2 <_printf_i+0x2a>
 8005ef0:	e08c      	b.n	800600c <_printf_i+0x144>
 8005ef2:	2a58      	cmp	r2, #88	; 0x58
 8005ef4:	d04d      	beq.n	8005f92 <_printf_i+0xca>
 8005ef6:	0025      	movs	r5, r4
 8005ef8:	3542      	adds	r5, #66	; 0x42
 8005efa:	702a      	strb	r2, [r5, #0]
 8005efc:	e030      	b.n	8005f60 <_printf_i+0x98>
 8005efe:	2a64      	cmp	r2, #100	; 0x64
 8005f00:	d001      	beq.n	8005f06 <_printf_i+0x3e>
 8005f02:	2a69      	cmp	r2, #105	; 0x69
 8005f04:	d1f7      	bne.n	8005ef6 <_printf_i+0x2e>
 8005f06:	6819      	ldr	r1, [r3, #0]
 8005f08:	6825      	ldr	r5, [r4, #0]
 8005f0a:	1d0a      	adds	r2, r1, #4
 8005f0c:	0628      	lsls	r0, r5, #24
 8005f0e:	d529      	bpl.n	8005f64 <_printf_i+0x9c>
 8005f10:	6808      	ldr	r0, [r1, #0]
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	2800      	cmp	r0, #0
 8005f16:	da03      	bge.n	8005f20 <_printf_i+0x58>
 8005f18:	232d      	movs	r3, #45	; 0x2d
 8005f1a:	9a02      	ldr	r2, [sp, #8]
 8005f1c:	4240      	negs	r0, r0
 8005f1e:	7013      	strb	r3, [r2, #0]
 8005f20:	4e6b      	ldr	r6, [pc, #428]	; (80060d0 <_printf_i+0x208>)
 8005f22:	270a      	movs	r7, #10
 8005f24:	e04f      	b.n	8005fc6 <_printf_i+0xfe>
 8005f26:	2a73      	cmp	r2, #115	; 0x73
 8005f28:	d074      	beq.n	8006014 <_printf_i+0x14c>
 8005f2a:	d808      	bhi.n	8005f3e <_printf_i+0x76>
 8005f2c:	2a6f      	cmp	r2, #111	; 0x6f
 8005f2e:	d01f      	beq.n	8005f70 <_printf_i+0xa8>
 8005f30:	2a70      	cmp	r2, #112	; 0x70
 8005f32:	d1e0      	bne.n	8005ef6 <_printf_i+0x2e>
 8005f34:	2220      	movs	r2, #32
 8005f36:	6809      	ldr	r1, [r1, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	6022      	str	r2, [r4, #0]
 8005f3c:	e003      	b.n	8005f46 <_printf_i+0x7e>
 8005f3e:	2a75      	cmp	r2, #117	; 0x75
 8005f40:	d016      	beq.n	8005f70 <_printf_i+0xa8>
 8005f42:	2a78      	cmp	r2, #120	; 0x78
 8005f44:	d1d7      	bne.n	8005ef6 <_printf_i+0x2e>
 8005f46:	0022      	movs	r2, r4
 8005f48:	2178      	movs	r1, #120	; 0x78
 8005f4a:	3245      	adds	r2, #69	; 0x45
 8005f4c:	7011      	strb	r1, [r2, #0]
 8005f4e:	4e61      	ldr	r6, [pc, #388]	; (80060d4 <_printf_i+0x20c>)
 8005f50:	e022      	b.n	8005f98 <_printf_i+0xd0>
 8005f52:	0025      	movs	r5, r4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	3542      	adds	r5, #66	; 0x42
 8005f58:	1d11      	adds	r1, r2, #4
 8005f5a:	6019      	str	r1, [r3, #0]
 8005f5c:	6813      	ldr	r3, [r2, #0]
 8005f5e:	702b      	strb	r3, [r5, #0]
 8005f60:	2301      	movs	r3, #1
 8005f62:	e065      	b.n	8006030 <_printf_i+0x168>
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	0669      	lsls	r1, r5, #25
 8005f6a:	d5d3      	bpl.n	8005f14 <_printf_i+0x4c>
 8005f6c:	b200      	sxth	r0, r0
 8005f6e:	e7d1      	b.n	8005f14 <_printf_i+0x4c>
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	6825      	ldr	r5, [r4, #0]
 8005f74:	1d08      	adds	r0, r1, #4
 8005f76:	6018      	str	r0, [r3, #0]
 8005f78:	6808      	ldr	r0, [r1, #0]
 8005f7a:	062e      	lsls	r6, r5, #24
 8005f7c:	d505      	bpl.n	8005f8a <_printf_i+0xc2>
 8005f7e:	4e54      	ldr	r6, [pc, #336]	; (80060d0 <_printf_i+0x208>)
 8005f80:	2708      	movs	r7, #8
 8005f82:	2a6f      	cmp	r2, #111	; 0x6f
 8005f84:	d01b      	beq.n	8005fbe <_printf_i+0xf6>
 8005f86:	270a      	movs	r7, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0xf6>
 8005f8a:	066d      	lsls	r5, r5, #25
 8005f8c:	d5f7      	bpl.n	8005f7e <_printf_i+0xb6>
 8005f8e:	b280      	uxth	r0, r0
 8005f90:	e7f5      	b.n	8005f7e <_printf_i+0xb6>
 8005f92:	3145      	adds	r1, #69	; 0x45
 8005f94:	4e4e      	ldr	r6, [pc, #312]	; (80060d0 <_printf_i+0x208>)
 8005f96:	700a      	strb	r2, [r1, #0]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	1d01      	adds	r1, r0, #4
 8005f9e:	6800      	ldr	r0, [r0, #0]
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	0615      	lsls	r5, r2, #24
 8005fa4:	d521      	bpl.n	8005fea <_printf_i+0x122>
 8005fa6:	07d3      	lsls	r3, r2, #31
 8005fa8:	d502      	bpl.n	8005fb0 <_printf_i+0xe8>
 8005faa:	2320      	movs	r3, #32
 8005fac:	431a      	orrs	r2, r3
 8005fae:	6022      	str	r2, [r4, #0]
 8005fb0:	2710      	movs	r7, #16
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d103      	bne.n	8005fbe <_printf_i+0xf6>
 8005fb6:	2320      	movs	r3, #32
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	439a      	bics	r2, r3
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	0023      	movs	r3, r4
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	3343      	adds	r3, #67	; 0x43
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	60a3      	str	r3, [r4, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	db58      	blt.n	8006080 <_printf_i+0x1b8>
 8005fce:	2204      	movs	r2, #4
 8005fd0:	6821      	ldr	r1, [r4, #0]
 8005fd2:	4391      	bics	r1, r2
 8005fd4:	6021      	str	r1, [r4, #0]
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d154      	bne.n	8006084 <_printf_i+0x1bc>
 8005fda:	9d02      	ldr	r5, [sp, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d05a      	beq.n	8006096 <_printf_i+0x1ce>
 8005fe0:	0025      	movs	r5, r4
 8005fe2:	7833      	ldrb	r3, [r6, #0]
 8005fe4:	3542      	adds	r5, #66	; 0x42
 8005fe6:	702b      	strb	r3, [r5, #0]
 8005fe8:	e055      	b.n	8006096 <_printf_i+0x1ce>
 8005fea:	0655      	lsls	r5, r2, #25
 8005fec:	d5db      	bpl.n	8005fa6 <_printf_i+0xde>
 8005fee:	b280      	uxth	r0, r0
 8005ff0:	e7d9      	b.n	8005fa6 <_printf_i+0xde>
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	680d      	ldr	r5, [r1, #0]
 8005ff6:	1d10      	adds	r0, r2, #4
 8005ff8:	6949      	ldr	r1, [r1, #20]
 8005ffa:	6018      	str	r0, [r3, #0]
 8005ffc:	6813      	ldr	r3, [r2, #0]
 8005ffe:	062e      	lsls	r6, r5, #24
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x13e>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x144>
 8006006:	066d      	lsls	r5, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x13a>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	9d02      	ldr	r5, [sp, #8]
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	e04f      	b.n	80060b4 <_printf_i+0x1ec>
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	1d11      	adds	r1, r2, #4
 8006018:	6019      	str	r1, [r3, #0]
 800601a:	6815      	ldr	r5, [r2, #0]
 800601c:	2100      	movs	r1, #0
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	0028      	movs	r0, r5
 8006022:	f7ff fc15 	bl	8005850 <memchr>
 8006026:	2800      	cmp	r0, #0
 8006028:	d001      	beq.n	800602e <_printf_i+0x166>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	9a02      	ldr	r2, [sp, #8]
 8006036:	7013      	strb	r3, [r2, #0]
 8006038:	e03c      	b.n	80060b4 <_printf_i+0x1ec>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	002a      	movs	r2, r5
 800603e:	9904      	ldr	r1, [sp, #16]
 8006040:	9803      	ldr	r0, [sp, #12]
 8006042:	9d05      	ldr	r5, [sp, #20]
 8006044:	47a8      	blx	r5
 8006046:	1c43      	adds	r3, r0, #1
 8006048:	d03e      	beq.n	80060c8 <_printf_i+0x200>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	d415      	bmi.n	800607c <_printf_i+0x1b4>
 8006050:	9b07      	ldr	r3, [sp, #28]
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	4298      	cmp	r0, r3
 8006056:	da39      	bge.n	80060cc <_printf_i+0x204>
 8006058:	0018      	movs	r0, r3
 800605a:	e037      	b.n	80060cc <_printf_i+0x204>
 800605c:	0022      	movs	r2, r4
 800605e:	2301      	movs	r3, #1
 8006060:	3219      	adds	r2, #25
 8006062:	9904      	ldr	r1, [sp, #16]
 8006064:	9803      	ldr	r0, [sp, #12]
 8006066:	9e05      	ldr	r6, [sp, #20]
 8006068:	47b0      	blx	r6
 800606a:	1c43      	adds	r3, r0, #1
 800606c:	d02c      	beq.n	80060c8 <_printf_i+0x200>
 800606e:	3501      	adds	r5, #1
 8006070:	68e3      	ldr	r3, [r4, #12]
 8006072:	9a07      	ldr	r2, [sp, #28]
 8006074:	1a9b      	subs	r3, r3, r2
 8006076:	42ab      	cmp	r3, r5
 8006078:	dcf0      	bgt.n	800605c <_printf_i+0x194>
 800607a:	e7e9      	b.n	8006050 <_printf_i+0x188>
 800607c:	2500      	movs	r5, #0
 800607e:	e7f7      	b.n	8006070 <_printf_i+0x1a8>
 8006080:	2800      	cmp	r0, #0
 8006082:	d0ad      	beq.n	8005fe0 <_printf_i+0x118>
 8006084:	9d02      	ldr	r5, [sp, #8]
 8006086:	0039      	movs	r1, r7
 8006088:	f7fa f8cc 	bl	8000224 <__aeabi_uidivmod>
 800608c:	5c73      	ldrb	r3, [r6, r1]
 800608e:	3d01      	subs	r5, #1
 8006090:	702b      	strb	r3, [r5, #0]
 8006092:	2800      	cmp	r0, #0
 8006094:	d1f7      	bne.n	8006086 <_printf_i+0x1be>
 8006096:	2f08      	cmp	r7, #8
 8006098:	d109      	bne.n	80060ae <_printf_i+0x1e6>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	07db      	lsls	r3, r3, #31
 800609e:	d506      	bpl.n	80060ae <_printf_i+0x1e6>
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	6922      	ldr	r2, [r4, #16]
 80060a4:	4293      	cmp	r3, r2
 80060a6:	dc02      	bgt.n	80060ae <_printf_i+0x1e6>
 80060a8:	2330      	movs	r3, #48	; 0x30
 80060aa:	3d01      	subs	r5, #1
 80060ac:	702b      	strb	r3, [r5, #0]
 80060ae:	9b02      	ldr	r3, [sp, #8]
 80060b0:	1b5b      	subs	r3, r3, r5
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	9b05      	ldr	r3, [sp, #20]
 80060b6:	aa07      	add	r2, sp, #28
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	0021      	movs	r1, r4
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	9803      	ldr	r0, [sp, #12]
 80060c0:	f7ff fe94 	bl	8005dec <_printf_common>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d1b8      	bne.n	800603a <_printf_i+0x172>
 80060c8:	2001      	movs	r0, #1
 80060ca:	4240      	negs	r0, r0
 80060cc:	b009      	add	sp, #36	; 0x24
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	0800631f 	.word	0x0800631f
 80060d4:	08006330 	.word	0x08006330

080060d8 <_realloc_r>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	0007      	movs	r7, r0
 80060dc:	000d      	movs	r5, r1
 80060de:	0016      	movs	r6, r2
 80060e0:	2900      	cmp	r1, #0
 80060e2:	d105      	bne.n	80060f0 <_realloc_r+0x18>
 80060e4:	0011      	movs	r1, r2
 80060e6:	f7ff fc2d 	bl	8005944 <_malloc_r>
 80060ea:	0004      	movs	r4, r0
 80060ec:	0020      	movs	r0, r4
 80060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d103      	bne.n	80060fc <_realloc_r+0x24>
 80060f4:	f7ff fbdc 	bl	80058b0 <_free_r>
 80060f8:	0034      	movs	r4, r6
 80060fa:	e7f7      	b.n	80060ec <_realloc_r+0x14>
 80060fc:	f000 f812 	bl	8006124 <_malloc_usable_size_r>
 8006100:	002c      	movs	r4, r5
 8006102:	42b0      	cmp	r0, r6
 8006104:	d2f2      	bcs.n	80060ec <_realloc_r+0x14>
 8006106:	0031      	movs	r1, r6
 8006108:	0038      	movs	r0, r7
 800610a:	f7ff fc1b 	bl	8005944 <_malloc_r>
 800610e:	1e04      	subs	r4, r0, #0
 8006110:	d0ec      	beq.n	80060ec <_realloc_r+0x14>
 8006112:	0029      	movs	r1, r5
 8006114:	0032      	movs	r2, r6
 8006116:	f7ff fba6 	bl	8005866 <memcpy>
 800611a:	0029      	movs	r1, r5
 800611c:	0038      	movs	r0, r7
 800611e:	f7ff fbc7 	bl	80058b0 <_free_r>
 8006122:	e7e3      	b.n	80060ec <_realloc_r+0x14>

08006124 <_malloc_usable_size_r>:
 8006124:	1f0b      	subs	r3, r1, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	1f18      	subs	r0, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	da01      	bge.n	8006132 <_malloc_usable_size_r+0xe>
 800612e:	580b      	ldr	r3, [r1, r0]
 8006130:	18c0      	adds	r0, r0, r3
 8006132:	4770      	bx	lr

08006134 <_init>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr

08006140 <_fini>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr
