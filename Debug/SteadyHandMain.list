
SteadyHandMain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08006760  08006760  00016760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069dc  080069dc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080069dc  080069dc  000169dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e4  080069e4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e4  080069e4  000169e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080069ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  20000098  08006a84  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014a8  08006a84  000214a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021cc0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038b5  00000000  00000000  00041d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00045638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  000466d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019908  00000000  00000000  00047610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbaf  00000000  00000000  00060f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094e98  00000000  00000000  00070ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010595f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  001059dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000098 	.word	0x20000098
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006748 	.word	0x08006748

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000009c 	.word	0x2000009c
 8000104:	08006748 	.word	0x08006748

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f000 fdeb 	bl	8000ff0 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fd43 	bl	8000eb0 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 fddd 	bl	8000ff0 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fdd3 	bl	8000ff0 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fd65 	bl	8000f28 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fd5b 	bl	8000f28 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fa9d 	bl	80009c8 <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 fa1f 	bl	80008dc <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fa8f 	bl	80009c8 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fa85 	bl	80009c8 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fa2d 	bl	800092c <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fa23 	bl	800092c <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_uldivmod>:
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d111      	bne.n	800051c <__aeabi_uldivmod+0x28>
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	d10f      	bne.n	800051c <__aeabi_uldivmod+0x28>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_uldivmod+0xe>
 8000500:	2800      	cmp	r0, #0
 8000502:	d002      	beq.n	800050a <__aeabi_uldivmod+0x16>
 8000504:	2100      	movs	r1, #0
 8000506:	43c9      	mvns	r1, r1
 8000508:	1c08      	adds	r0, r1, #0
 800050a:	b407      	push	{r0, r1, r2}
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <__aeabi_uldivmod+0x24>)
 800050e:	a102      	add	r1, pc, #8	; (adr r1, 8000518 <__aeabi_uldivmod+0x24>)
 8000510:	1840      	adds	r0, r0, r1
 8000512:	9002      	str	r0, [sp, #8]
 8000514:	bd03      	pop	{r0, r1, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	fffffee9 	.word	0xfffffee9
 800051c:	b403      	push	{r0, r1}
 800051e:	4668      	mov	r0, sp
 8000520:	b501      	push	{r0, lr}
 8000522:	9802      	ldr	r0, [sp, #8]
 8000524:	f000 f806 	bl	8000534 <__udivmoddi4>
 8000528:	9b01      	ldr	r3, [sp, #4]
 800052a:	469e      	mov	lr, r3
 800052c:	b002      	add	sp, #8
 800052e:	bc0c      	pop	{r2, r3}
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			; (mov r8, r8)

08000534 <__udivmoddi4>:
 8000534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000536:	464f      	mov	r7, r9
 8000538:	4646      	mov	r6, r8
 800053a:	46d6      	mov	lr, sl
 800053c:	b5c0      	push	{r6, r7, lr}
 800053e:	0004      	movs	r4, r0
 8000540:	b082      	sub	sp, #8
 8000542:	000d      	movs	r5, r1
 8000544:	4691      	mov	r9, r2
 8000546:	4698      	mov	r8, r3
 8000548:	428b      	cmp	r3, r1
 800054a:	d82f      	bhi.n	80005ac <__udivmoddi4+0x78>
 800054c:	d02c      	beq.n	80005a8 <__udivmoddi4+0x74>
 800054e:	4641      	mov	r1, r8
 8000550:	4648      	mov	r0, r9
 8000552:	f001 f87f 	bl	8001654 <__clzdi2>
 8000556:	0029      	movs	r1, r5
 8000558:	0006      	movs	r6, r0
 800055a:	0020      	movs	r0, r4
 800055c:	f001 f87a 	bl	8001654 <__clzdi2>
 8000560:	1a33      	subs	r3, r6, r0
 8000562:	469c      	mov	ip, r3
 8000564:	3b20      	subs	r3, #32
 8000566:	469a      	mov	sl, r3
 8000568:	d500      	bpl.n	800056c <__udivmoddi4+0x38>
 800056a:	e076      	b.n	800065a <__udivmoddi4+0x126>
 800056c:	464b      	mov	r3, r9
 800056e:	4652      	mov	r2, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001f      	movs	r7, r3
 8000574:	464b      	mov	r3, r9
 8000576:	4662      	mov	r2, ip
 8000578:	4093      	lsls	r3, r2
 800057a:	001e      	movs	r6, r3
 800057c:	42af      	cmp	r7, r5
 800057e:	d828      	bhi.n	80005d2 <__udivmoddi4+0x9e>
 8000580:	d025      	beq.n	80005ce <__udivmoddi4+0x9a>
 8000582:	4653      	mov	r3, sl
 8000584:	1ba4      	subs	r4, r4, r6
 8000586:	41bd      	sbcs	r5, r7
 8000588:	2b00      	cmp	r3, #0
 800058a:	da00      	bge.n	800058e <__udivmoddi4+0x5a>
 800058c:	e07b      	b.n	8000686 <__udivmoddi4+0x152>
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	4652      	mov	r2, sl
 800059a:	4093      	lsls	r3, r2
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	4662      	mov	r2, ip
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	e018      	b.n	80005da <__udivmoddi4+0xa6>
 80005a8:	4282      	cmp	r2, r0
 80005aa:	d9d0      	bls.n	800054e <__udivmoddi4+0x1a>
 80005ac:	2200      	movs	r2, #0
 80005ae:	2300      	movs	r3, #0
 80005b0:	9200      	str	r2, [sp, #0]
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <__udivmoddi4+0x8a>
 80005ba:	601c      	str	r4, [r3, #0]
 80005bc:	605d      	str	r5, [r3, #4]
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	b002      	add	sp, #8
 80005c4:	bc1c      	pop	{r2, r3, r4}
 80005c6:	4690      	mov	r8, r2
 80005c8:	4699      	mov	r9, r3
 80005ca:	46a2      	mov	sl, r4
 80005cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d9d7      	bls.n	8000582 <__udivmoddi4+0x4e>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	4663      	mov	r3, ip
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0e9      	beq.n	80005b4 <__udivmoddi4+0x80>
 80005e0:	07fb      	lsls	r3, r7, #31
 80005e2:	4698      	mov	r8, r3
 80005e4:	4641      	mov	r1, r8
 80005e6:	0872      	lsrs	r2, r6, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	087b      	lsrs	r3, r7, #1
 80005ec:	4666      	mov	r6, ip
 80005ee:	e00e      	b.n	800060e <__udivmoddi4+0xda>
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	d101      	bne.n	80005f8 <__udivmoddi4+0xc4>
 80005f4:	42a2      	cmp	r2, r4
 80005f6:	d80c      	bhi.n	8000612 <__udivmoddi4+0xde>
 80005f8:	1aa4      	subs	r4, r4, r2
 80005fa:	419d      	sbcs	r5, r3
 80005fc:	2001      	movs	r0, #1
 80005fe:	1924      	adds	r4, r4, r4
 8000600:	416d      	adcs	r5, r5
 8000602:	2100      	movs	r1, #0
 8000604:	3e01      	subs	r6, #1
 8000606:	1824      	adds	r4, r4, r0
 8000608:	414d      	adcs	r5, r1
 800060a:	2e00      	cmp	r6, #0
 800060c:	d006      	beq.n	800061c <__udivmoddi4+0xe8>
 800060e:	42ab      	cmp	r3, r5
 8000610:	d9ee      	bls.n	80005f0 <__udivmoddi4+0xbc>
 8000612:	3e01      	subs	r6, #1
 8000614:	1924      	adds	r4, r4, r4
 8000616:	416d      	adcs	r5, r5
 8000618:	2e00      	cmp	r6, #0
 800061a:	d1f8      	bne.n	800060e <__udivmoddi4+0xda>
 800061c:	9800      	ldr	r0, [sp, #0]
 800061e:	9901      	ldr	r1, [sp, #4]
 8000620:	4653      	mov	r3, sl
 8000622:	1900      	adds	r0, r0, r4
 8000624:	4169      	adcs	r1, r5
 8000626:	2b00      	cmp	r3, #0
 8000628:	db23      	blt.n	8000672 <__udivmoddi4+0x13e>
 800062a:	002b      	movs	r3, r5
 800062c:	4652      	mov	r2, sl
 800062e:	40d3      	lsrs	r3, r2
 8000630:	002a      	movs	r2, r5
 8000632:	4664      	mov	r4, ip
 8000634:	40e2      	lsrs	r2, r4
 8000636:	001c      	movs	r4, r3
 8000638:	4653      	mov	r3, sl
 800063a:	0015      	movs	r5, r2
 800063c:	2b00      	cmp	r3, #0
 800063e:	db2d      	blt.n	800069c <__udivmoddi4+0x168>
 8000640:	0026      	movs	r6, r4
 8000642:	4657      	mov	r7, sl
 8000644:	40be      	lsls	r6, r7
 8000646:	0033      	movs	r3, r6
 8000648:	0026      	movs	r6, r4
 800064a:	4667      	mov	r7, ip
 800064c:	40be      	lsls	r6, r7
 800064e:	0032      	movs	r2, r6
 8000650:	1a80      	subs	r0, r0, r2
 8000652:	4199      	sbcs	r1, r3
 8000654:	9000      	str	r0, [sp, #0]
 8000656:	9101      	str	r1, [sp, #4]
 8000658:	e7ac      	b.n	80005b4 <__udivmoddi4+0x80>
 800065a:	4662      	mov	r2, ip
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	464a      	mov	r2, r9
 8000662:	40da      	lsrs	r2, r3
 8000664:	4661      	mov	r1, ip
 8000666:	0013      	movs	r3, r2
 8000668:	4642      	mov	r2, r8
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	431f      	orrs	r7, r3
 8000670:	e780      	b.n	8000574 <__udivmoddi4+0x40>
 8000672:	4662      	mov	r2, ip
 8000674:	2320      	movs	r3, #32
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	002a      	movs	r2, r5
 800067a:	4666      	mov	r6, ip
 800067c:	409a      	lsls	r2, r3
 800067e:	0023      	movs	r3, r4
 8000680:	40f3      	lsrs	r3, r6
 8000682:	4313      	orrs	r3, r2
 8000684:	e7d4      	b.n	8000630 <__udivmoddi4+0xfc>
 8000686:	4662      	mov	r2, ip
 8000688:	2320      	movs	r3, #32
 800068a:	2100      	movs	r1, #0
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	40da      	lsrs	r2, r3
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	e780      	b.n	800059e <__udivmoddi4+0x6a>
 800069c:	2320      	movs	r3, #32
 800069e:	4662      	mov	r2, ip
 80006a0:	0026      	movs	r6, r4
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	40de      	lsrs	r6, r3
 80006a6:	002f      	movs	r7, r5
 80006a8:	46b0      	mov	r8, r6
 80006aa:	4666      	mov	r6, ip
 80006ac:	40b7      	lsls	r7, r6
 80006ae:	4646      	mov	r6, r8
 80006b0:	003b      	movs	r3, r7
 80006b2:	4333      	orrs	r3, r6
 80006b4:	e7c8      	b.n	8000648 <__udivmoddi4+0x114>
 80006b6:	46c0      	nop			; (mov r8, r8)

080006b8 <__aeabi_fdiv>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	4657      	mov	r7, sl
 80006bc:	464e      	mov	r6, r9
 80006be:	4645      	mov	r5, r8
 80006c0:	46de      	mov	lr, fp
 80006c2:	0244      	lsls	r4, r0, #9
 80006c4:	b5e0      	push	{r5, r6, r7, lr}
 80006c6:	0046      	lsls	r6, r0, #1
 80006c8:	4688      	mov	r8, r1
 80006ca:	0a64      	lsrs	r4, r4, #9
 80006cc:	0e36      	lsrs	r6, r6, #24
 80006ce:	0fc7      	lsrs	r7, r0, #31
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d063      	beq.n	800079c <__aeabi_fdiv+0xe4>
 80006d4:	2eff      	cmp	r6, #255	; 0xff
 80006d6:	d024      	beq.n	8000722 <__aeabi_fdiv+0x6a>
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	00e4      	lsls	r4, r4, #3
 80006dc:	04db      	lsls	r3, r3, #19
 80006de:	431c      	orrs	r4, r3
 80006e0:	2300      	movs	r3, #0
 80006e2:	4699      	mov	r9, r3
 80006e4:	469b      	mov	fp, r3
 80006e6:	3e7f      	subs	r6, #127	; 0x7f
 80006e8:	4643      	mov	r3, r8
 80006ea:	4642      	mov	r2, r8
 80006ec:	025d      	lsls	r5, r3, #9
 80006ee:	0fd2      	lsrs	r2, r2, #31
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	0e1b      	lsrs	r3, r3, #24
 80006f6:	4690      	mov	r8, r2
 80006f8:	4692      	mov	sl, r2
 80006fa:	d065      	beq.n	80007c8 <__aeabi_fdiv+0x110>
 80006fc:	2bff      	cmp	r3, #255	; 0xff
 80006fe:	d055      	beq.n	80007ac <__aeabi_fdiv+0xf4>
 8000700:	2280      	movs	r2, #128	; 0x80
 8000702:	2100      	movs	r1, #0
 8000704:	00ed      	lsls	r5, r5, #3
 8000706:	04d2      	lsls	r2, r2, #19
 8000708:	3b7f      	subs	r3, #127	; 0x7f
 800070a:	4315      	orrs	r5, r2
 800070c:	1af6      	subs	r6, r6, r3
 800070e:	4643      	mov	r3, r8
 8000710:	464a      	mov	r2, r9
 8000712:	407b      	eors	r3, r7
 8000714:	2a0f      	cmp	r2, #15
 8000716:	d900      	bls.n	800071a <__aeabi_fdiv+0x62>
 8000718:	e08d      	b.n	8000836 <__aeabi_fdiv+0x17e>
 800071a:	486d      	ldr	r0, [pc, #436]	; (80008d0 <__aeabi_fdiv+0x218>)
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	5882      	ldr	r2, [r0, r2]
 8000720:	4697      	mov	pc, r2
 8000722:	2c00      	cmp	r4, #0
 8000724:	d154      	bne.n	80007d0 <__aeabi_fdiv+0x118>
 8000726:	2308      	movs	r3, #8
 8000728:	4699      	mov	r9, r3
 800072a:	3b06      	subs	r3, #6
 800072c:	26ff      	movs	r6, #255	; 0xff
 800072e:	469b      	mov	fp, r3
 8000730:	e7da      	b.n	80006e8 <__aeabi_fdiv+0x30>
 8000732:	2500      	movs	r5, #0
 8000734:	4653      	mov	r3, sl
 8000736:	2902      	cmp	r1, #2
 8000738:	d01b      	beq.n	8000772 <__aeabi_fdiv+0xba>
 800073a:	2903      	cmp	r1, #3
 800073c:	d100      	bne.n	8000740 <__aeabi_fdiv+0x88>
 800073e:	e0bf      	b.n	80008c0 <__aeabi_fdiv+0x208>
 8000740:	2901      	cmp	r1, #1
 8000742:	d028      	beq.n	8000796 <__aeabi_fdiv+0xde>
 8000744:	0030      	movs	r0, r6
 8000746:	307f      	adds	r0, #127	; 0x7f
 8000748:	2800      	cmp	r0, #0
 800074a:	dd20      	ble.n	800078e <__aeabi_fdiv+0xd6>
 800074c:	076a      	lsls	r2, r5, #29
 800074e:	d004      	beq.n	800075a <__aeabi_fdiv+0xa2>
 8000750:	220f      	movs	r2, #15
 8000752:	402a      	ands	r2, r5
 8000754:	2a04      	cmp	r2, #4
 8000756:	d000      	beq.n	800075a <__aeabi_fdiv+0xa2>
 8000758:	3504      	adds	r5, #4
 800075a:	012a      	lsls	r2, r5, #4
 800075c:	d503      	bpl.n	8000766 <__aeabi_fdiv+0xae>
 800075e:	0030      	movs	r0, r6
 8000760:	4a5c      	ldr	r2, [pc, #368]	; (80008d4 <__aeabi_fdiv+0x21c>)
 8000762:	3080      	adds	r0, #128	; 0x80
 8000764:	4015      	ands	r5, r2
 8000766:	28fe      	cmp	r0, #254	; 0xfe
 8000768:	dc03      	bgt.n	8000772 <__aeabi_fdiv+0xba>
 800076a:	01ac      	lsls	r4, r5, #6
 800076c:	0a64      	lsrs	r4, r4, #9
 800076e:	b2c2      	uxtb	r2, r0
 8000770:	e001      	b.n	8000776 <__aeabi_fdiv+0xbe>
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	2400      	movs	r4, #0
 8000776:	0264      	lsls	r4, r4, #9
 8000778:	05d2      	lsls	r2, r2, #23
 800077a:	0a60      	lsrs	r0, r4, #9
 800077c:	07db      	lsls	r3, r3, #31
 800077e:	4310      	orrs	r0, r2
 8000780:	4318      	orrs	r0, r3
 8000782:	bc3c      	pop	{r2, r3, r4, r5}
 8000784:	4690      	mov	r8, r2
 8000786:	4699      	mov	r9, r3
 8000788:	46a2      	mov	sl, r4
 800078a:	46ab      	mov	fp, r5
 800078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078e:	2201      	movs	r2, #1
 8000790:	1a10      	subs	r0, r2, r0
 8000792:	281b      	cmp	r0, #27
 8000794:	dd7c      	ble.n	8000890 <__aeabi_fdiv+0x1d8>
 8000796:	2200      	movs	r2, #0
 8000798:	2400      	movs	r4, #0
 800079a:	e7ec      	b.n	8000776 <__aeabi_fdiv+0xbe>
 800079c:	2c00      	cmp	r4, #0
 800079e:	d11d      	bne.n	80007dc <__aeabi_fdiv+0x124>
 80007a0:	2304      	movs	r3, #4
 80007a2:	4699      	mov	r9, r3
 80007a4:	3b03      	subs	r3, #3
 80007a6:	2600      	movs	r6, #0
 80007a8:	469b      	mov	fp, r3
 80007aa:	e79d      	b.n	80006e8 <__aeabi_fdiv+0x30>
 80007ac:	3eff      	subs	r6, #255	; 0xff
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d120      	bne.n	80007f4 <__aeabi_fdiv+0x13c>
 80007b2:	2102      	movs	r1, #2
 80007b4:	4643      	mov	r3, r8
 80007b6:	464a      	mov	r2, r9
 80007b8:	407b      	eors	r3, r7
 80007ba:	430a      	orrs	r2, r1
 80007bc:	2a0f      	cmp	r2, #15
 80007be:	d8d8      	bhi.n	8000772 <__aeabi_fdiv+0xba>
 80007c0:	4845      	ldr	r0, [pc, #276]	; (80008d8 <__aeabi_fdiv+0x220>)
 80007c2:	0092      	lsls	r2, r2, #2
 80007c4:	5882      	ldr	r2, [r0, r2]
 80007c6:	4697      	mov	pc, r2
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d119      	bne.n	8000800 <__aeabi_fdiv+0x148>
 80007cc:	2101      	movs	r1, #1
 80007ce:	e7f1      	b.n	80007b4 <__aeabi_fdiv+0xfc>
 80007d0:	230c      	movs	r3, #12
 80007d2:	4699      	mov	r9, r3
 80007d4:	3b09      	subs	r3, #9
 80007d6:	26ff      	movs	r6, #255	; 0xff
 80007d8:	469b      	mov	fp, r3
 80007da:	e785      	b.n	80006e8 <__aeabi_fdiv+0x30>
 80007dc:	0020      	movs	r0, r4
 80007de:	f000 ff1b 	bl	8001618 <__clzsi2>
 80007e2:	2676      	movs	r6, #118	; 0x76
 80007e4:	1f43      	subs	r3, r0, #5
 80007e6:	409c      	lsls	r4, r3
 80007e8:	2300      	movs	r3, #0
 80007ea:	4276      	negs	r6, r6
 80007ec:	1a36      	subs	r6, r6, r0
 80007ee:	4699      	mov	r9, r3
 80007f0:	469b      	mov	fp, r3
 80007f2:	e779      	b.n	80006e8 <__aeabi_fdiv+0x30>
 80007f4:	464a      	mov	r2, r9
 80007f6:	2303      	movs	r3, #3
 80007f8:	431a      	orrs	r2, r3
 80007fa:	4691      	mov	r9, r2
 80007fc:	2103      	movs	r1, #3
 80007fe:	e786      	b.n	800070e <__aeabi_fdiv+0x56>
 8000800:	0028      	movs	r0, r5
 8000802:	f000 ff09 	bl	8001618 <__clzsi2>
 8000806:	1f43      	subs	r3, r0, #5
 8000808:	1836      	adds	r6, r6, r0
 800080a:	409d      	lsls	r5, r3
 800080c:	3676      	adds	r6, #118	; 0x76
 800080e:	2100      	movs	r1, #0
 8000810:	e77d      	b.n	800070e <__aeabi_fdiv+0x56>
 8000812:	2480      	movs	r4, #128	; 0x80
 8000814:	2300      	movs	r3, #0
 8000816:	03e4      	lsls	r4, r4, #15
 8000818:	22ff      	movs	r2, #255	; 0xff
 800081a:	e7ac      	b.n	8000776 <__aeabi_fdiv+0xbe>
 800081c:	2500      	movs	r5, #0
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	03db      	lsls	r3, r3, #15
 8000822:	421c      	tst	r4, r3
 8000824:	d028      	beq.n	8000878 <__aeabi_fdiv+0x1c0>
 8000826:	421d      	tst	r5, r3
 8000828:	d126      	bne.n	8000878 <__aeabi_fdiv+0x1c0>
 800082a:	432b      	orrs	r3, r5
 800082c:	025c      	lsls	r4, r3, #9
 800082e:	0a64      	lsrs	r4, r4, #9
 8000830:	4643      	mov	r3, r8
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	e79f      	b.n	8000776 <__aeabi_fdiv+0xbe>
 8000836:	0162      	lsls	r2, r4, #5
 8000838:	016c      	lsls	r4, r5, #5
 800083a:	42a2      	cmp	r2, r4
 800083c:	d224      	bcs.n	8000888 <__aeabi_fdiv+0x1d0>
 800083e:	211b      	movs	r1, #27
 8000840:	2500      	movs	r5, #0
 8000842:	3e01      	subs	r6, #1
 8000844:	2701      	movs	r7, #1
 8000846:	0010      	movs	r0, r2
 8000848:	006d      	lsls	r5, r5, #1
 800084a:	0052      	lsls	r2, r2, #1
 800084c:	2800      	cmp	r0, #0
 800084e:	db01      	blt.n	8000854 <__aeabi_fdiv+0x19c>
 8000850:	4294      	cmp	r4, r2
 8000852:	d801      	bhi.n	8000858 <__aeabi_fdiv+0x1a0>
 8000854:	1b12      	subs	r2, r2, r4
 8000856:	433d      	orrs	r5, r7
 8000858:	3901      	subs	r1, #1
 800085a:	2900      	cmp	r1, #0
 800085c:	d1f3      	bne.n	8000846 <__aeabi_fdiv+0x18e>
 800085e:	0014      	movs	r4, r2
 8000860:	1e62      	subs	r2, r4, #1
 8000862:	4194      	sbcs	r4, r2
 8000864:	4325      	orrs	r5, r4
 8000866:	e76d      	b.n	8000744 <__aeabi_fdiv+0x8c>
 8000868:	46ba      	mov	sl, r7
 800086a:	4659      	mov	r1, fp
 800086c:	0025      	movs	r5, r4
 800086e:	4653      	mov	r3, sl
 8000870:	2902      	cmp	r1, #2
 8000872:	d000      	beq.n	8000876 <__aeabi_fdiv+0x1be>
 8000874:	e761      	b.n	800073a <__aeabi_fdiv+0x82>
 8000876:	e77c      	b.n	8000772 <__aeabi_fdiv+0xba>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	03db      	lsls	r3, r3, #15
 800087c:	431c      	orrs	r4, r3
 800087e:	0264      	lsls	r4, r4, #9
 8000880:	0a64      	lsrs	r4, r4, #9
 8000882:	003b      	movs	r3, r7
 8000884:	22ff      	movs	r2, #255	; 0xff
 8000886:	e776      	b.n	8000776 <__aeabi_fdiv+0xbe>
 8000888:	1b12      	subs	r2, r2, r4
 800088a:	211a      	movs	r1, #26
 800088c:	2501      	movs	r5, #1
 800088e:	e7d9      	b.n	8000844 <__aeabi_fdiv+0x18c>
 8000890:	369e      	adds	r6, #158	; 0x9e
 8000892:	002a      	movs	r2, r5
 8000894:	40b5      	lsls	r5, r6
 8000896:	002c      	movs	r4, r5
 8000898:	40c2      	lsrs	r2, r0
 800089a:	1e65      	subs	r5, r4, #1
 800089c:	41ac      	sbcs	r4, r5
 800089e:	4314      	orrs	r4, r2
 80008a0:	0762      	lsls	r2, r4, #29
 80008a2:	d004      	beq.n	80008ae <__aeabi_fdiv+0x1f6>
 80008a4:	220f      	movs	r2, #15
 80008a6:	4022      	ands	r2, r4
 80008a8:	2a04      	cmp	r2, #4
 80008aa:	d000      	beq.n	80008ae <__aeabi_fdiv+0x1f6>
 80008ac:	3404      	adds	r4, #4
 80008ae:	0162      	lsls	r2, r4, #5
 80008b0:	d403      	bmi.n	80008ba <__aeabi_fdiv+0x202>
 80008b2:	01a4      	lsls	r4, r4, #6
 80008b4:	0a64      	lsrs	r4, r4, #9
 80008b6:	2200      	movs	r2, #0
 80008b8:	e75d      	b.n	8000776 <__aeabi_fdiv+0xbe>
 80008ba:	2201      	movs	r2, #1
 80008bc:	2400      	movs	r4, #0
 80008be:	e75a      	b.n	8000776 <__aeabi_fdiv+0xbe>
 80008c0:	2480      	movs	r4, #128	; 0x80
 80008c2:	03e4      	lsls	r4, r4, #15
 80008c4:	432c      	orrs	r4, r5
 80008c6:	0264      	lsls	r4, r4, #9
 80008c8:	0a64      	lsrs	r4, r4, #9
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	e753      	b.n	8000776 <__aeabi_fdiv+0xbe>
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	08006838 	.word	0x08006838
 80008d4:	f7ffffff 	.word	0xf7ffffff
 80008d8:	08006878 	.word	0x08006878

080008dc <__eqsf2>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	0042      	lsls	r2, r0, #1
 80008e0:	024e      	lsls	r6, r1, #9
 80008e2:	004c      	lsls	r4, r1, #1
 80008e4:	0245      	lsls	r5, r0, #9
 80008e6:	0a6d      	lsrs	r5, r5, #9
 80008e8:	0e12      	lsrs	r2, r2, #24
 80008ea:	0fc3      	lsrs	r3, r0, #31
 80008ec:	0a76      	lsrs	r6, r6, #9
 80008ee:	0e24      	lsrs	r4, r4, #24
 80008f0:	0fc9      	lsrs	r1, r1, #31
 80008f2:	2aff      	cmp	r2, #255	; 0xff
 80008f4:	d00f      	beq.n	8000916 <__eqsf2+0x3a>
 80008f6:	2cff      	cmp	r4, #255	; 0xff
 80008f8:	d011      	beq.n	800091e <__eqsf2+0x42>
 80008fa:	2001      	movs	r0, #1
 80008fc:	42a2      	cmp	r2, r4
 80008fe:	d000      	beq.n	8000902 <__eqsf2+0x26>
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	42b5      	cmp	r5, r6
 8000904:	d1fc      	bne.n	8000900 <__eqsf2+0x24>
 8000906:	428b      	cmp	r3, r1
 8000908:	d00d      	beq.n	8000926 <__eqsf2+0x4a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d1f8      	bne.n	8000900 <__eqsf2+0x24>
 800090e:	0028      	movs	r0, r5
 8000910:	1e45      	subs	r5, r0, #1
 8000912:	41a8      	sbcs	r0, r5
 8000914:	e7f4      	b.n	8000900 <__eqsf2+0x24>
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d1f1      	bne.n	8000900 <__eqsf2+0x24>
 800091c:	e7eb      	b.n	80008f6 <__eqsf2+0x1a>
 800091e:	2001      	movs	r0, #1
 8000920:	2e00      	cmp	r6, #0
 8000922:	d1ed      	bne.n	8000900 <__eqsf2+0x24>
 8000924:	e7e9      	b.n	80008fa <__eqsf2+0x1e>
 8000926:	2000      	movs	r0, #0
 8000928:	e7ea      	b.n	8000900 <__eqsf2+0x24>
 800092a:	46c0      	nop			; (mov r8, r8)

0800092c <__gesf2>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	004a      	lsls	r2, r1, #1
 8000930:	024e      	lsls	r6, r1, #9
 8000932:	0245      	lsls	r5, r0, #9
 8000934:	0044      	lsls	r4, r0, #1
 8000936:	0a6d      	lsrs	r5, r5, #9
 8000938:	0e24      	lsrs	r4, r4, #24
 800093a:	0fc3      	lsrs	r3, r0, #31
 800093c:	0a76      	lsrs	r6, r6, #9
 800093e:	0e12      	lsrs	r2, r2, #24
 8000940:	0fc9      	lsrs	r1, r1, #31
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d015      	beq.n	8000972 <__gesf2+0x46>
 8000946:	2aff      	cmp	r2, #255	; 0xff
 8000948:	d00e      	beq.n	8000968 <__gesf2+0x3c>
 800094a:	2c00      	cmp	r4, #0
 800094c:	d115      	bne.n	800097a <__gesf2+0x4e>
 800094e:	2a00      	cmp	r2, #0
 8000950:	d101      	bne.n	8000956 <__gesf2+0x2a>
 8000952:	2e00      	cmp	r6, #0
 8000954:	d01c      	beq.n	8000990 <__gesf2+0x64>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d014      	beq.n	8000984 <__gesf2+0x58>
 800095a:	428b      	cmp	r3, r1
 800095c:	d027      	beq.n	80009ae <__gesf2+0x82>
 800095e:	2002      	movs	r0, #2
 8000960:	3b01      	subs	r3, #1
 8000962:	4018      	ands	r0, r3
 8000964:	3801      	subs	r0, #1
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	2e00      	cmp	r6, #0
 800096a:	d0ee      	beq.n	800094a <__gesf2+0x1e>
 800096c:	2002      	movs	r0, #2
 800096e:	4240      	negs	r0, r0
 8000970:	e7f9      	b.n	8000966 <__gesf2+0x3a>
 8000972:	2d00      	cmp	r5, #0
 8000974:	d1fa      	bne.n	800096c <__gesf2+0x40>
 8000976:	2aff      	cmp	r2, #255	; 0xff
 8000978:	d00e      	beq.n	8000998 <__gesf2+0x6c>
 800097a:	2a00      	cmp	r2, #0
 800097c:	d10e      	bne.n	800099c <__gesf2+0x70>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d0ed      	beq.n	800095e <__gesf2+0x32>
 8000982:	e00b      	b.n	800099c <__gesf2+0x70>
 8000984:	2301      	movs	r3, #1
 8000986:	3901      	subs	r1, #1
 8000988:	4399      	bics	r1, r3
 800098a:	0008      	movs	r0, r1
 800098c:	3001      	adds	r0, #1
 800098e:	e7ea      	b.n	8000966 <__gesf2+0x3a>
 8000990:	2000      	movs	r0, #0
 8000992:	2d00      	cmp	r5, #0
 8000994:	d0e7      	beq.n	8000966 <__gesf2+0x3a>
 8000996:	e7e2      	b.n	800095e <__gesf2+0x32>
 8000998:	2e00      	cmp	r6, #0
 800099a:	d1e7      	bne.n	800096c <__gesf2+0x40>
 800099c:	428b      	cmp	r3, r1
 800099e:	d1de      	bne.n	800095e <__gesf2+0x32>
 80009a0:	4294      	cmp	r4, r2
 80009a2:	dd05      	ble.n	80009b0 <__gesf2+0x84>
 80009a4:	2102      	movs	r1, #2
 80009a6:	1e58      	subs	r0, r3, #1
 80009a8:	4008      	ands	r0, r1
 80009aa:	3801      	subs	r0, #1
 80009ac:	e7db      	b.n	8000966 <__gesf2+0x3a>
 80009ae:	2400      	movs	r4, #0
 80009b0:	42a2      	cmp	r2, r4
 80009b2:	dc04      	bgt.n	80009be <__gesf2+0x92>
 80009b4:	42b5      	cmp	r5, r6
 80009b6:	d8d2      	bhi.n	800095e <__gesf2+0x32>
 80009b8:	2000      	movs	r0, #0
 80009ba:	42b5      	cmp	r5, r6
 80009bc:	d2d3      	bcs.n	8000966 <__gesf2+0x3a>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	2301      	movs	r3, #1
 80009c2:	4398      	bics	r0, r3
 80009c4:	3001      	adds	r0, #1
 80009c6:	e7ce      	b.n	8000966 <__gesf2+0x3a>

080009c8 <__lesf2>:
 80009c8:	b530      	push	{r4, r5, lr}
 80009ca:	0042      	lsls	r2, r0, #1
 80009cc:	0244      	lsls	r4, r0, #9
 80009ce:	024d      	lsls	r5, r1, #9
 80009d0:	0fc3      	lsrs	r3, r0, #31
 80009d2:	0048      	lsls	r0, r1, #1
 80009d4:	0a64      	lsrs	r4, r4, #9
 80009d6:	0e12      	lsrs	r2, r2, #24
 80009d8:	0a6d      	lsrs	r5, r5, #9
 80009da:	0e00      	lsrs	r0, r0, #24
 80009dc:	0fc9      	lsrs	r1, r1, #31
 80009de:	2aff      	cmp	r2, #255	; 0xff
 80009e0:	d012      	beq.n	8000a08 <__lesf2+0x40>
 80009e2:	28ff      	cmp	r0, #255	; 0xff
 80009e4:	d00c      	beq.n	8000a00 <__lesf2+0x38>
 80009e6:	2a00      	cmp	r2, #0
 80009e8:	d112      	bne.n	8000a10 <__lesf2+0x48>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d119      	bne.n	8000a22 <__lesf2+0x5a>
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d117      	bne.n	8000a22 <__lesf2+0x5a>
 80009f2:	2c00      	cmp	r4, #0
 80009f4:	d02b      	beq.n	8000a4e <__lesf2+0x86>
 80009f6:	2002      	movs	r0, #2
 80009f8:	3b01      	subs	r3, #1
 80009fa:	4018      	ands	r0, r3
 80009fc:	3801      	subs	r0, #1
 80009fe:	e026      	b.n	8000a4e <__lesf2+0x86>
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0f0      	beq.n	80009e6 <__lesf2+0x1e>
 8000a04:	2002      	movs	r0, #2
 8000a06:	e022      	b.n	8000a4e <__lesf2+0x86>
 8000a08:	2c00      	cmp	r4, #0
 8000a0a:	d1fb      	bne.n	8000a04 <__lesf2+0x3c>
 8000a0c:	28ff      	cmp	r0, #255	; 0xff
 8000a0e:	d01f      	beq.n	8000a50 <__lesf2+0x88>
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d11f      	bne.n	8000a54 <__lesf2+0x8c>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d11d      	bne.n	8000a54 <__lesf2+0x8c>
 8000a18:	2002      	movs	r0, #2
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	4018      	ands	r0, r3
 8000a1e:	3801      	subs	r0, #1
 8000a20:	e015      	b.n	8000a4e <__lesf2+0x86>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d00e      	beq.n	8000a44 <__lesf2+0x7c>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d1e5      	bne.n	80009f6 <__lesf2+0x2e>
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	dc04      	bgt.n	8000a3a <__lesf2+0x72>
 8000a30:	42ac      	cmp	r4, r5
 8000a32:	d8e0      	bhi.n	80009f6 <__lesf2+0x2e>
 8000a34:	2000      	movs	r0, #0
 8000a36:	42ac      	cmp	r4, r5
 8000a38:	d209      	bcs.n	8000a4e <__lesf2+0x86>
 8000a3a:	1e58      	subs	r0, r3, #1
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4398      	bics	r0, r3
 8000a40:	3001      	adds	r0, #1
 8000a42:	e004      	b.n	8000a4e <__lesf2+0x86>
 8000a44:	2301      	movs	r3, #1
 8000a46:	3901      	subs	r1, #1
 8000a48:	4399      	bics	r1, r3
 8000a4a:	0008      	movs	r0, r1
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	bd30      	pop	{r4, r5, pc}
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1d7      	bne.n	8000a04 <__lesf2+0x3c>
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d1ce      	bne.n	80009f6 <__lesf2+0x2e>
 8000a58:	4282      	cmp	r2, r0
 8000a5a:	dde7      	ble.n	8000a2c <__lesf2+0x64>
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	1e58      	subs	r0, r3, #1
 8000a60:	4008      	ands	r0, r1
 8000a62:	3801      	subs	r0, #1
 8000a64:	e7f3      	b.n	8000a4e <__lesf2+0x86>
 8000a66:	46c0      	nop			; (mov r8, r8)

08000a68 <__aeabi_fsub>:
 8000a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6a:	4647      	mov	r7, r8
 8000a6c:	46ce      	mov	lr, r9
 8000a6e:	0044      	lsls	r4, r0, #1
 8000a70:	0fc2      	lsrs	r2, r0, #31
 8000a72:	b580      	push	{r7, lr}
 8000a74:	0247      	lsls	r7, r0, #9
 8000a76:	0248      	lsls	r0, r1, #9
 8000a78:	0a40      	lsrs	r0, r0, #9
 8000a7a:	4684      	mov	ip, r0
 8000a7c:	4666      	mov	r6, ip
 8000a7e:	0048      	lsls	r0, r1, #1
 8000a80:	0a7f      	lsrs	r7, r7, #9
 8000a82:	0e24      	lsrs	r4, r4, #24
 8000a84:	00f6      	lsls	r6, r6, #3
 8000a86:	0025      	movs	r5, r4
 8000a88:	4690      	mov	r8, r2
 8000a8a:	00fb      	lsls	r3, r7, #3
 8000a8c:	0e00      	lsrs	r0, r0, #24
 8000a8e:	0fc9      	lsrs	r1, r1, #31
 8000a90:	46b1      	mov	r9, r6
 8000a92:	28ff      	cmp	r0, #255	; 0xff
 8000a94:	d100      	bne.n	8000a98 <__aeabi_fsub+0x30>
 8000a96:	e085      	b.n	8000ba4 <__aeabi_fsub+0x13c>
 8000a98:	2601      	movs	r6, #1
 8000a9a:	4071      	eors	r1, r6
 8000a9c:	1a26      	subs	r6, r4, r0
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d057      	beq.n	8000b52 <__aeabi_fsub+0xea>
 8000aa2:	2e00      	cmp	r6, #0
 8000aa4:	dd43      	ble.n	8000b2e <__aeabi_fsub+0xc6>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d000      	beq.n	8000aac <__aeabi_fsub+0x44>
 8000aaa:	e07f      	b.n	8000bac <__aeabi_fsub+0x144>
 8000aac:	4649      	mov	r1, r9
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_fsub+0x4c>
 8000ab2:	e0aa      	b.n	8000c0a <__aeabi_fsub+0x1a2>
 8000ab4:	3e01      	subs	r6, #1
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x54>
 8000aba:	e0f7      	b.n	8000cac <__aeabi_fsub+0x244>
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	015a      	lsls	r2, r3, #5
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_fsub+0x5c>
 8000ac2:	e08b      	b.n	8000bdc <__aeabi_fsub+0x174>
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	099c      	lsrs	r4, r3, #6
 8000ac8:	0020      	movs	r0, r4
 8000aca:	f000 fda5 	bl	8001618 <__clzsi2>
 8000ace:	3805      	subs	r0, #5
 8000ad0:	4084      	lsls	r4, r0
 8000ad2:	4285      	cmp	r5, r0
 8000ad4:	dd00      	ble.n	8000ad8 <__aeabi_fsub+0x70>
 8000ad6:	e0d3      	b.n	8000c80 <__aeabi_fsub+0x218>
 8000ad8:	1b45      	subs	r5, r0, r5
 8000ada:	0023      	movs	r3, r4
 8000adc:	2020      	movs	r0, #32
 8000ade:	3501      	adds	r5, #1
 8000ae0:	40eb      	lsrs	r3, r5
 8000ae2:	1b45      	subs	r5, r0, r5
 8000ae4:	40ac      	lsls	r4, r5
 8000ae6:	1e62      	subs	r2, r4, #1
 8000ae8:	4194      	sbcs	r4, r2
 8000aea:	4323      	orrs	r3, r4
 8000aec:	2407      	movs	r4, #7
 8000aee:	2500      	movs	r5, #0
 8000af0:	401c      	ands	r4, r3
 8000af2:	2201      	movs	r2, #1
 8000af4:	4641      	mov	r1, r8
 8000af6:	400a      	ands	r2, r1
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d004      	beq.n	8000b06 <__aeabi_fsub+0x9e>
 8000afc:	210f      	movs	r1, #15
 8000afe:	4019      	ands	r1, r3
 8000b00:	2904      	cmp	r1, #4
 8000b02:	d000      	beq.n	8000b06 <__aeabi_fsub+0x9e>
 8000b04:	3304      	adds	r3, #4
 8000b06:	0159      	lsls	r1, r3, #5
 8000b08:	d400      	bmi.n	8000b0c <__aeabi_fsub+0xa4>
 8000b0a:	e080      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000b0c:	3501      	adds	r5, #1
 8000b0e:	b2ec      	uxtb	r4, r5
 8000b10:	2dff      	cmp	r5, #255	; 0xff
 8000b12:	d000      	beq.n	8000b16 <__aeabi_fsub+0xae>
 8000b14:	e0a3      	b.n	8000c5e <__aeabi_fsub+0x1f6>
 8000b16:	24ff      	movs	r4, #255	; 0xff
 8000b18:	2300      	movs	r3, #0
 8000b1a:	025b      	lsls	r3, r3, #9
 8000b1c:	05e4      	lsls	r4, r4, #23
 8000b1e:	0a58      	lsrs	r0, r3, #9
 8000b20:	07d2      	lsls	r2, r2, #31
 8000b22:	4320      	orrs	r0, r4
 8000b24:	4310      	orrs	r0, r2
 8000b26:	bc0c      	pop	{r2, r3}
 8000b28:	4690      	mov	r8, r2
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d174      	bne.n	8000c1c <__aeabi_fsub+0x1b4>
 8000b32:	1c60      	adds	r0, r4, #1
 8000b34:	b2c0      	uxtb	r0, r0
 8000b36:	2801      	cmp	r0, #1
 8000b38:	dc00      	bgt.n	8000b3c <__aeabi_fsub+0xd4>
 8000b3a:	e0a7      	b.n	8000c8c <__aeabi_fsub+0x224>
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	1a9c      	subs	r4, r3, r2
 8000b40:	0162      	lsls	r2, r4, #5
 8000b42:	d500      	bpl.n	8000b46 <__aeabi_fsub+0xde>
 8000b44:	e0b6      	b.n	8000cb4 <__aeabi_fsub+0x24c>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d1be      	bne.n	8000ac8 <__aeabi_fsub+0x60>
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e7e3      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	dc00      	bgt.n	8000b58 <__aeabi_fsub+0xf0>
 8000b56:	e085      	b.n	8000c64 <__aeabi_fsub+0x1fc>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d046      	beq.n	8000bea <__aeabi_fsub+0x182>
 8000b5c:	2cff      	cmp	r4, #255	; 0xff
 8000b5e:	d049      	beq.n	8000bf4 <__aeabi_fsub+0x18c>
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	4648      	mov	r0, r9
 8000b64:	04d2      	lsls	r2, r2, #19
 8000b66:	4310      	orrs	r0, r2
 8000b68:	4681      	mov	r9, r0
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2e1b      	cmp	r6, #27
 8000b6e:	dc09      	bgt.n	8000b84 <__aeabi_fsub+0x11c>
 8000b70:	2020      	movs	r0, #32
 8000b72:	464c      	mov	r4, r9
 8000b74:	1b80      	subs	r0, r0, r6
 8000b76:	4084      	lsls	r4, r0
 8000b78:	464a      	mov	r2, r9
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	40f2      	lsrs	r2, r6
 8000b7e:	1e44      	subs	r4, r0, #1
 8000b80:	41a0      	sbcs	r0, r4
 8000b82:	4302      	orrs	r2, r0
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	015a      	lsls	r2, r3, #5
 8000b88:	d528      	bpl.n	8000bdc <__aeabi_fsub+0x174>
 8000b8a:	3501      	adds	r5, #1
 8000b8c:	2dff      	cmp	r5, #255	; 0xff
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x12a>
 8000b90:	e0a8      	b.n	8000ce4 <__aeabi_fsub+0x27c>
 8000b92:	2201      	movs	r2, #1
 8000b94:	2407      	movs	r4, #7
 8000b96:	4994      	ldr	r1, [pc, #592]	; (8000de8 <__aeabi_fsub+0x380>)
 8000b98:	401a      	ands	r2, r3
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	401c      	ands	r4, r3
 8000ba2:	e7a6      	b.n	8000af2 <__aeabi_fsub+0x8a>
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d000      	beq.n	8000baa <__aeabi_fsub+0x142>
 8000ba8:	e778      	b.n	8000a9c <__aeabi_fsub+0x34>
 8000baa:	e775      	b.n	8000a98 <__aeabi_fsub+0x30>
 8000bac:	2cff      	cmp	r4, #255	; 0xff
 8000bae:	d054      	beq.n	8000c5a <__aeabi_fsub+0x1f2>
 8000bb0:	2280      	movs	r2, #128	; 0x80
 8000bb2:	4649      	mov	r1, r9
 8000bb4:	04d2      	lsls	r2, r2, #19
 8000bb6:	4311      	orrs	r1, r2
 8000bb8:	4689      	mov	r9, r1
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2e1b      	cmp	r6, #27
 8000bbe:	dc09      	bgt.n	8000bd4 <__aeabi_fsub+0x16c>
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	1b89      	subs	r1, r1, r6
 8000bc6:	4088      	lsls	r0, r1
 8000bc8:	464a      	mov	r2, r9
 8000bca:	0001      	movs	r1, r0
 8000bcc:	40f2      	lsrs	r2, r6
 8000bce:	1e48      	subs	r0, r1, #1
 8000bd0:	4181      	sbcs	r1, r0
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	1a9b      	subs	r3, r3, r2
 8000bd6:	015a      	lsls	r2, r3, #5
 8000bd8:	d500      	bpl.n	8000bdc <__aeabi_fsub+0x174>
 8000bda:	e773      	b.n	8000ac4 <__aeabi_fsub+0x5c>
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4641      	mov	r1, r8
 8000be0:	400a      	ands	r2, r1
 8000be2:	0759      	lsls	r1, r3, #29
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fsub+0x180>
 8000be6:	e789      	b.n	8000afc <__aeabi_fsub+0x94>
 8000be8:	e011      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000bea:	4648      	mov	r0, r9
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d158      	bne.n	8000ca2 <__aeabi_fsub+0x23a>
 8000bf0:	2cff      	cmp	r4, #255	; 0xff
 8000bf2:	d10c      	bne.n	8000c0e <__aeabi_fsub+0x1a6>
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fsub+0x194>
 8000bfa:	e78c      	b.n	8000b16 <__aeabi_fsub+0xae>
 8000bfc:	2080      	movs	r0, #128	; 0x80
 8000bfe:	03c0      	lsls	r0, r0, #15
 8000c00:	4303      	orrs	r3, r0
 8000c02:	025b      	lsls	r3, r3, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	24ff      	movs	r4, #255	; 0xff
 8000c08:	e787      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d025      	beq.n	8000c5a <__aeabi_fsub+0x1f2>
 8000c0e:	08db      	lsrs	r3, r3, #3
 8000c10:	2dff      	cmp	r5, #255	; 0xff
 8000c12:	d0f0      	beq.n	8000bf6 <__aeabi_fsub+0x18e>
 8000c14:	025b      	lsls	r3, r3, #9
 8000c16:	0a5b      	lsrs	r3, r3, #9
 8000c18:	b2ec      	uxtb	r4, r5
 8000c1a:	e77e      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000c1c:	2c00      	cmp	r4, #0
 8000c1e:	d04d      	beq.n	8000cbc <__aeabi_fsub+0x254>
 8000c20:	28ff      	cmp	r0, #255	; 0xff
 8000c22:	d018      	beq.n	8000c56 <__aeabi_fsub+0x1ee>
 8000c24:	2480      	movs	r4, #128	; 0x80
 8000c26:	04e4      	lsls	r4, r4, #19
 8000c28:	4272      	negs	r2, r6
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	2a1b      	cmp	r2, #27
 8000c2e:	dd00      	ble.n	8000c32 <__aeabi_fsub+0x1ca>
 8000c30:	e0c4      	b.n	8000dbc <__aeabi_fsub+0x354>
 8000c32:	001c      	movs	r4, r3
 8000c34:	2520      	movs	r5, #32
 8000c36:	40d4      	lsrs	r4, r2
 8000c38:	1aaa      	subs	r2, r5, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	1e5a      	subs	r2, r3, #1
 8000c3e:	4193      	sbcs	r3, r2
 8000c40:	4323      	orrs	r3, r4
 8000c42:	464a      	mov	r2, r9
 8000c44:	0005      	movs	r5, r0
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	4688      	mov	r8, r1
 8000c4a:	e738      	b.n	8000abe <__aeabi_fsub+0x56>
 8000c4c:	1c72      	adds	r2, r6, #1
 8000c4e:	d0f8      	beq.n	8000c42 <__aeabi_fsub+0x1da>
 8000c50:	43f2      	mvns	r2, r6
 8000c52:	28ff      	cmp	r0, #255	; 0xff
 8000c54:	d1ea      	bne.n	8000c2c <__aeabi_fsub+0x1c4>
 8000c56:	000a      	movs	r2, r1
 8000c58:	464b      	mov	r3, r9
 8000c5a:	25ff      	movs	r5, #255	; 0xff
 8000c5c:	e7d7      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000c5e:	019b      	lsls	r3, r3, #6
 8000c60:	0a5b      	lsrs	r3, r3, #9
 8000c62:	e75a      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d141      	bne.n	8000cec <__aeabi_fsub+0x284>
 8000c68:	1c65      	adds	r5, r4, #1
 8000c6a:	b2e9      	uxtb	r1, r5
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	dd45      	ble.n	8000cfc <__aeabi_fsub+0x294>
 8000c70:	2dff      	cmp	r5, #255	; 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x20e>
 8000c74:	e74f      	b.n	8000b16 <__aeabi_fsub+0xae>
 8000c76:	2407      	movs	r4, #7
 8000c78:	444b      	add	r3, r9
 8000c7a:	085b      	lsrs	r3, r3, #1
 8000c7c:	401c      	ands	r4, r3
 8000c7e:	e738      	b.n	8000af2 <__aeabi_fsub+0x8a>
 8000c80:	2207      	movs	r2, #7
 8000c82:	4b5a      	ldr	r3, [pc, #360]	; (8000dec <__aeabi_fsub+0x384>)
 8000c84:	1a2d      	subs	r5, r5, r0
 8000c86:	4023      	ands	r3, r4
 8000c88:	4014      	ands	r4, r2
 8000c8a:	e732      	b.n	8000af2 <__aeabi_fsub+0x8a>
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d11d      	bne.n	8000ccc <__aeabi_fsub+0x264>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d17a      	bne.n	8000d8a <__aeabi_fsub+0x322>
 8000c94:	464b      	mov	r3, r9
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fsub+0x234>
 8000c9a:	e091      	b.n	8000dc0 <__aeabi_fsub+0x358>
 8000c9c:	000a      	movs	r2, r1
 8000c9e:	2500      	movs	r5, #0
 8000ca0:	e7b5      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000ca2:	3e01      	subs	r6, #1
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d119      	bne.n	8000cdc <__aeabi_fsub+0x274>
 8000ca8:	444b      	add	r3, r9
 8000caa:	e76c      	b.n	8000b86 <__aeabi_fsub+0x11e>
 8000cac:	2cff      	cmp	r4, #255	; 0xff
 8000cae:	d184      	bne.n	8000bba <__aeabi_fsub+0x152>
 8000cb0:	25ff      	movs	r5, #255	; 0xff
 8000cb2:	e7ac      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000cb4:	464a      	mov	r2, r9
 8000cb6:	4688      	mov	r8, r1
 8000cb8:	1ad4      	subs	r4, r2, r3
 8000cba:	e705      	b.n	8000ac8 <__aeabi_fsub+0x60>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1c5      	bne.n	8000c4c <__aeabi_fsub+0x1e4>
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	28ff      	cmp	r0, #255	; 0xff
 8000cc4:	d0c8      	beq.n	8000c58 <__aeabi_fsub+0x1f0>
 8000cc6:	0005      	movs	r5, r0
 8000cc8:	464b      	mov	r3, r9
 8000cca:	e7a0      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d149      	bne.n	8000d64 <__aeabi_fsub+0x2fc>
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d077      	beq.n	8000dc6 <__aeabi_fsub+0x35e>
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	25ff      	movs	r5, #255	; 0xff
 8000cda:	e798      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000cdc:	2cff      	cmp	r4, #255	; 0xff
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x27a>
 8000ce0:	e743      	b.n	8000b6a <__aeabi_fsub+0x102>
 8000ce2:	e787      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	24ff      	movs	r4, #255	; 0xff
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e716      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d115      	bne.n	8000d1c <__aeabi_fsub+0x2b4>
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d157      	bne.n	8000da4 <__aeabi_fsub+0x33c>
 8000cf4:	28ff      	cmp	r0, #255	; 0xff
 8000cf6:	d1e6      	bne.n	8000cc6 <__aeabi_fsub+0x25e>
 8000cf8:	464b      	mov	r3, r9
 8000cfa:	e77b      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000cfc:	2c00      	cmp	r4, #0
 8000cfe:	d120      	bne.n	8000d42 <__aeabi_fsub+0x2da>
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d057      	beq.n	8000db4 <__aeabi_fsub+0x34c>
 8000d04:	4649      	mov	r1, r9
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d053      	beq.n	8000db2 <__aeabi_fsub+0x34a>
 8000d0a:	444b      	add	r3, r9
 8000d0c:	015a      	lsls	r2, r3, #5
 8000d0e:	d568      	bpl.n	8000de2 <__aeabi_fsub+0x37a>
 8000d10:	2407      	movs	r4, #7
 8000d12:	4a36      	ldr	r2, [pc, #216]	; (8000dec <__aeabi_fsub+0x384>)
 8000d14:	401c      	ands	r4, r3
 8000d16:	2501      	movs	r5, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	e6ea      	b.n	8000af2 <__aeabi_fsub+0x8a>
 8000d1c:	28ff      	cmp	r0, #255	; 0xff
 8000d1e:	d0eb      	beq.n	8000cf8 <__aeabi_fsub+0x290>
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	04d2      	lsls	r2, r2, #19
 8000d24:	4276      	negs	r6, r6
 8000d26:	4313      	orrs	r3, r2
 8000d28:	2e1b      	cmp	r6, #27
 8000d2a:	dc53      	bgt.n	8000dd4 <__aeabi_fsub+0x36c>
 8000d2c:	2520      	movs	r5, #32
 8000d2e:	1bad      	subs	r5, r5, r6
 8000d30:	001a      	movs	r2, r3
 8000d32:	40ab      	lsls	r3, r5
 8000d34:	40f2      	lsrs	r2, r6
 8000d36:	1e5c      	subs	r4, r3, #1
 8000d38:	41a3      	sbcs	r3, r4
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	444b      	add	r3, r9
 8000d3e:	0005      	movs	r5, r0
 8000d40:	e721      	b.n	8000b86 <__aeabi_fsub+0x11e>
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0d8      	beq.n	8000cf8 <__aeabi_fsub+0x290>
 8000d46:	4649      	mov	r1, r9
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fsub+0x2e6>
 8000d4c:	e752      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	03c9      	lsls	r1, r1, #15
 8000d52:	420f      	tst	r7, r1
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x2f0>
 8000d56:	e74d      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000d58:	4660      	mov	r0, ip
 8000d5a:	4208      	tst	r0, r1
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x2f8>
 8000d5e:	e749      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000d60:	464b      	mov	r3, r9
 8000d62:	e747      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000d64:	4648      	mov	r0, r9
 8000d66:	25ff      	movs	r5, #255	; 0xff
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x306>
 8000d6c:	e74f      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	03d2      	lsls	r2, r2, #15
 8000d72:	4217      	tst	r7, r2
 8000d74:	d004      	beq.n	8000d80 <__aeabi_fsub+0x318>
 8000d76:	4660      	mov	r0, ip
 8000d78:	4210      	tst	r0, r2
 8000d7a:	d101      	bne.n	8000d80 <__aeabi_fsub+0x318>
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	4641      	mov	r1, r8
 8000d84:	25ff      	movs	r5, #255	; 0xff
 8000d86:	400a      	ands	r2, r1
 8000d88:	e741      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000d8a:	4648      	mov	r0, r9
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d01f      	beq.n	8000dd0 <__aeabi_fsub+0x368>
 8000d90:	1a1a      	subs	r2, r3, r0
 8000d92:	0150      	lsls	r0, r2, #5
 8000d94:	d520      	bpl.n	8000dd8 <__aeabi_fsub+0x370>
 8000d96:	464a      	mov	r2, r9
 8000d98:	2407      	movs	r4, #7
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	401c      	ands	r4, r3
 8000d9e:	4688      	mov	r8, r1
 8000da0:	2500      	movs	r5, #0
 8000da2:	e6a6      	b.n	8000af2 <__aeabi_fsub+0x8a>
 8000da4:	1c74      	adds	r4, r6, #1
 8000da6:	d0c9      	beq.n	8000d3c <__aeabi_fsub+0x2d4>
 8000da8:	43f6      	mvns	r6, r6
 8000daa:	28ff      	cmp	r0, #255	; 0xff
 8000dac:	d1bc      	bne.n	8000d28 <__aeabi_fsub+0x2c0>
 8000dae:	464b      	mov	r3, r9
 8000db0:	e720      	b.n	8000bf4 <__aeabi_fsub+0x18c>
 8000db2:	4699      	mov	r9, r3
 8000db4:	464b      	mov	r3, r9
 8000db6:	2500      	movs	r5, #0
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	e72b      	b.n	8000c14 <__aeabi_fsub+0x1ac>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e740      	b.n	8000c42 <__aeabi_fsub+0x1da>
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e6a9      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	2200      	movs	r2, #0
 8000dca:	03db      	lsls	r3, r3, #15
 8000dcc:	24ff      	movs	r4, #255	; 0xff
 8000dce:	e6a4      	b.n	8000b1a <__aeabi_fsub+0xb2>
 8000dd0:	2500      	movs	r5, #0
 8000dd2:	e71c      	b.n	8000c0e <__aeabi_fsub+0x1a6>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e7b1      	b.n	8000d3c <__aeabi_fsub+0x2d4>
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d0f1      	beq.n	8000dc0 <__aeabi_fsub+0x358>
 8000ddc:	0013      	movs	r3, r2
 8000dde:	2500      	movs	r5, #0
 8000de0:	e6fc      	b.n	8000bdc <__aeabi_fsub+0x174>
 8000de2:	2500      	movs	r5, #0
 8000de4:	e6fa      	b.n	8000bdc <__aeabi_fsub+0x174>
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	7dffffff 	.word	0x7dffffff
 8000dec:	fbffffff 	.word	0xfbffffff

08000df0 <__aeabi_f2iz>:
 8000df0:	0241      	lsls	r1, r0, #9
 8000df2:	0042      	lsls	r2, r0, #1
 8000df4:	0fc3      	lsrs	r3, r0, #31
 8000df6:	0a49      	lsrs	r1, r1, #9
 8000df8:	0e12      	lsrs	r2, r2, #24
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	2a7e      	cmp	r2, #126	; 0x7e
 8000dfe:	d90d      	bls.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e00:	2a9d      	cmp	r2, #157	; 0x9d
 8000e02:	d80c      	bhi.n	8000e1e <__aeabi_f2iz+0x2e>
 8000e04:	2080      	movs	r0, #128	; 0x80
 8000e06:	0400      	lsls	r0, r0, #16
 8000e08:	4301      	orrs	r1, r0
 8000e0a:	2a95      	cmp	r2, #149	; 0x95
 8000e0c:	dc0a      	bgt.n	8000e24 <__aeabi_f2iz+0x34>
 8000e0e:	2096      	movs	r0, #150	; 0x96
 8000e10:	1a82      	subs	r2, r0, r2
 8000e12:	40d1      	lsrs	r1, r2
 8000e14:	4248      	negs	r0, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d100      	bne.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e1a:	0008      	movs	r0, r1
 8000e1c:	4770      	bx	lr
 8000e1e:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <__aeabi_f2iz+0x3c>)
 8000e20:	1898      	adds	r0, r3, r2
 8000e22:	e7fb      	b.n	8000e1c <__aeabi_f2iz+0x2c>
 8000e24:	3a96      	subs	r2, #150	; 0x96
 8000e26:	4091      	lsls	r1, r2
 8000e28:	e7f4      	b.n	8000e14 <__aeabi_f2iz+0x24>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	7fffffff 	.word	0x7fffffff

08000e30 <__aeabi_ui2f>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	1e04      	subs	r4, r0, #0
 8000e34:	d034      	beq.n	8000ea0 <__aeabi_ui2f+0x70>
 8000e36:	f000 fbef 	bl	8001618 <__clzsi2>
 8000e3a:	229e      	movs	r2, #158	; 0x9e
 8000e3c:	1a12      	subs	r2, r2, r0
 8000e3e:	2a96      	cmp	r2, #150	; 0x96
 8000e40:	dc07      	bgt.n	8000e52 <__aeabi_ui2f+0x22>
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	2808      	cmp	r0, #8
 8000e46:	dd2e      	ble.n	8000ea6 <__aeabi_ui2f+0x76>
 8000e48:	3808      	subs	r0, #8
 8000e4a:	4084      	lsls	r4, r0
 8000e4c:	0260      	lsls	r0, r4, #9
 8000e4e:	0a40      	lsrs	r0, r0, #9
 8000e50:	e021      	b.n	8000e96 <__aeabi_ui2f+0x66>
 8000e52:	2a99      	cmp	r2, #153	; 0x99
 8000e54:	dd09      	ble.n	8000e6a <__aeabi_ui2f+0x3a>
 8000e56:	0003      	movs	r3, r0
 8000e58:	0021      	movs	r1, r4
 8000e5a:	331b      	adds	r3, #27
 8000e5c:	4099      	lsls	r1, r3
 8000e5e:	1e4b      	subs	r3, r1, #1
 8000e60:	4199      	sbcs	r1, r3
 8000e62:	2305      	movs	r3, #5
 8000e64:	1a1b      	subs	r3, r3, r0
 8000e66:	40dc      	lsrs	r4, r3
 8000e68:	430c      	orrs	r4, r1
 8000e6a:	2805      	cmp	r0, #5
 8000e6c:	dd01      	ble.n	8000e72 <__aeabi_ui2f+0x42>
 8000e6e:	1f43      	subs	r3, r0, #5
 8000e70:	409c      	lsls	r4, r3
 8000e72:	0023      	movs	r3, r4
 8000e74:	490d      	ldr	r1, [pc, #52]	; (8000eac <__aeabi_ui2f+0x7c>)
 8000e76:	400b      	ands	r3, r1
 8000e78:	0765      	lsls	r5, r4, #29
 8000e7a:	d009      	beq.n	8000e90 <__aeabi_ui2f+0x60>
 8000e7c:	250f      	movs	r5, #15
 8000e7e:	402c      	ands	r4, r5
 8000e80:	2c04      	cmp	r4, #4
 8000e82:	d005      	beq.n	8000e90 <__aeabi_ui2f+0x60>
 8000e84:	3304      	adds	r3, #4
 8000e86:	015c      	lsls	r4, r3, #5
 8000e88:	d502      	bpl.n	8000e90 <__aeabi_ui2f+0x60>
 8000e8a:	229f      	movs	r2, #159	; 0x9f
 8000e8c:	400b      	ands	r3, r1
 8000e8e:	1a12      	subs	r2, r2, r0
 8000e90:	019b      	lsls	r3, r3, #6
 8000e92:	0a58      	lsrs	r0, r3, #9
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	05d2      	lsls	r2, r2, #23
 8000e9a:	0a40      	lsrs	r0, r0, #9
 8000e9c:	4310      	orrs	r0, r2
 8000e9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	e7f7      	b.n	8000e96 <__aeabi_ui2f+0x66>
 8000ea6:	0260      	lsls	r0, r4, #9
 8000ea8:	0a40      	lsrs	r0, r0, #9
 8000eaa:	e7f4      	b.n	8000e96 <__aeabi_ui2f+0x66>
 8000eac:	fbffffff 	.word	0xfbffffff

08000eb0 <__eqdf2>:
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	464f      	mov	r7, r9
 8000eb4:	4646      	mov	r6, r8
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	4684      	mov	ip, r0
 8000eba:	b5c0      	push	{r6, r7, lr}
 8000ebc:	4680      	mov	r8, r0
 8000ebe:	4e19      	ldr	r6, [pc, #100]	; (8000f24 <__eqdf2+0x74>)
 8000ec0:	0318      	lsls	r0, r3, #12
 8000ec2:	030f      	lsls	r7, r1, #12
 8000ec4:	004d      	lsls	r5, r1, #1
 8000ec6:	0b00      	lsrs	r0, r0, #12
 8000ec8:	005c      	lsls	r4, r3, #1
 8000eca:	4682      	mov	sl, r0
 8000ecc:	0b3f      	lsrs	r7, r7, #12
 8000ece:	0d6d      	lsrs	r5, r5, #21
 8000ed0:	0fc9      	lsrs	r1, r1, #31
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	0d64      	lsrs	r4, r4, #21
 8000ed6:	0fdb      	lsrs	r3, r3, #31
 8000ed8:	2001      	movs	r0, #1
 8000eda:	42b5      	cmp	r5, r6
 8000edc:	d00a      	beq.n	8000ef4 <__eqdf2+0x44>
 8000ede:	42b4      	cmp	r4, r6
 8000ee0:	d003      	beq.n	8000eea <__eqdf2+0x3a>
 8000ee2:	42a5      	cmp	r5, r4
 8000ee4:	d101      	bne.n	8000eea <__eqdf2+0x3a>
 8000ee6:	4557      	cmp	r7, sl
 8000ee8:	d00c      	beq.n	8000f04 <__eqdf2+0x54>
 8000eea:	bc1c      	pop	{r2, r3, r4}
 8000eec:	4690      	mov	r8, r2
 8000eee:	4699      	mov	r9, r3
 8000ef0:	46a2      	mov	sl, r4
 8000ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	433e      	orrs	r6, r7
 8000ef8:	d1f7      	bne.n	8000eea <__eqdf2+0x3a>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d1f5      	bne.n	8000eea <__eqdf2+0x3a>
 8000efe:	4654      	mov	r4, sl
 8000f00:	4314      	orrs	r4, r2
 8000f02:	d1f2      	bne.n	8000eea <__eqdf2+0x3a>
 8000f04:	2001      	movs	r0, #1
 8000f06:	45c8      	cmp	r8, r9
 8000f08:	d1ef      	bne.n	8000eea <__eqdf2+0x3a>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d007      	beq.n	8000f1e <__eqdf2+0x6e>
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d1eb      	bne.n	8000eea <__eqdf2+0x3a>
 8000f12:	4663      	mov	r3, ip
 8000f14:	431f      	orrs	r7, r3
 8000f16:	0038      	movs	r0, r7
 8000f18:	1e47      	subs	r7, r0, #1
 8000f1a:	41b8      	sbcs	r0, r7
 8000f1c:	e7e5      	b.n	8000eea <__eqdf2+0x3a>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e7e3      	b.n	8000eea <__eqdf2+0x3a>
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	000007ff 	.word	0x000007ff

08000f28 <__gedf2>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	464f      	mov	r7, r9
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	004d      	lsls	r5, r1, #1
 8000f32:	b5c0      	push	{r6, r7, lr}
 8000f34:	030e      	lsls	r6, r1, #12
 8000f36:	0fc9      	lsrs	r1, r1, #31
 8000f38:	468a      	mov	sl, r1
 8000f3a:	492c      	ldr	r1, [pc, #176]	; (8000fec <__gedf2+0xc4>)
 8000f3c:	031f      	lsls	r7, r3, #12
 8000f3e:	005c      	lsls	r4, r3, #1
 8000f40:	4680      	mov	r8, r0
 8000f42:	0b36      	lsrs	r6, r6, #12
 8000f44:	0d6d      	lsrs	r5, r5, #21
 8000f46:	4691      	mov	r9, r2
 8000f48:	0b3f      	lsrs	r7, r7, #12
 8000f4a:	0d64      	lsrs	r4, r4, #21
 8000f4c:	0fdb      	lsrs	r3, r3, #31
 8000f4e:	428d      	cmp	r5, r1
 8000f50:	d01e      	beq.n	8000f90 <__gedf2+0x68>
 8000f52:	428c      	cmp	r4, r1
 8000f54:	d016      	beq.n	8000f84 <__gedf2+0x5c>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d11e      	bne.n	8000f98 <__gedf2+0x70>
 8000f5a:	4330      	orrs	r0, r6
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d101      	bne.n	8000f66 <__gedf2+0x3e>
 8000f62:	433a      	orrs	r2, r7
 8000f64:	d023      	beq.n	8000fae <__gedf2+0x86>
 8000f66:	4662      	mov	r2, ip
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d01a      	beq.n	8000fa2 <__gedf2+0x7a>
 8000f6c:	459a      	cmp	sl, r3
 8000f6e:	d029      	beq.n	8000fc4 <__gedf2+0x9c>
 8000f70:	4651      	mov	r1, sl
 8000f72:	2002      	movs	r0, #2
 8000f74:	3901      	subs	r1, #1
 8000f76:	4008      	ands	r0, r1
 8000f78:	3801      	subs	r0, #1
 8000f7a:	bc1c      	pop	{r2, r3, r4}
 8000f7c:	4690      	mov	r8, r2
 8000f7e:	4699      	mov	r9, r3
 8000f80:	46a2      	mov	sl, r4
 8000f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f84:	0039      	movs	r1, r7
 8000f86:	4311      	orrs	r1, r2
 8000f88:	d0e5      	beq.n	8000f56 <__gedf2+0x2e>
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	4240      	negs	r0, r0
 8000f8e:	e7f4      	b.n	8000f7a <__gedf2+0x52>
 8000f90:	4330      	orrs	r0, r6
 8000f92:	d1fa      	bne.n	8000f8a <__gedf2+0x62>
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d00f      	beq.n	8000fb8 <__gedf2+0x90>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d10f      	bne.n	8000fbc <__gedf2+0x94>
 8000f9c:	433a      	orrs	r2, r7
 8000f9e:	d0e7      	beq.n	8000f70 <__gedf2+0x48>
 8000fa0:	e00c      	b.n	8000fbc <__gedf2+0x94>
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	4393      	bics	r3, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	3001      	adds	r0, #1
 8000fac:	e7e5      	b.n	8000f7a <__gedf2+0x52>
 8000fae:	4663      	mov	r3, ip
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0e1      	beq.n	8000f7a <__gedf2+0x52>
 8000fb6:	e7db      	b.n	8000f70 <__gedf2+0x48>
 8000fb8:	433a      	orrs	r2, r7
 8000fba:	d1e6      	bne.n	8000f8a <__gedf2+0x62>
 8000fbc:	459a      	cmp	sl, r3
 8000fbe:	d1d7      	bne.n	8000f70 <__gedf2+0x48>
 8000fc0:	42a5      	cmp	r5, r4
 8000fc2:	dcd5      	bgt.n	8000f70 <__gedf2+0x48>
 8000fc4:	42a5      	cmp	r5, r4
 8000fc6:	db05      	blt.n	8000fd4 <__gedf2+0xac>
 8000fc8:	42be      	cmp	r6, r7
 8000fca:	d8d1      	bhi.n	8000f70 <__gedf2+0x48>
 8000fcc:	d008      	beq.n	8000fe0 <__gedf2+0xb8>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	42be      	cmp	r6, r7
 8000fd2:	d2d2      	bcs.n	8000f7a <__gedf2+0x52>
 8000fd4:	4650      	mov	r0, sl
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	3801      	subs	r0, #1
 8000fda:	4398      	bics	r0, r3
 8000fdc:	3001      	adds	r0, #1
 8000fde:	e7cc      	b.n	8000f7a <__gedf2+0x52>
 8000fe0:	45c8      	cmp	r8, r9
 8000fe2:	d8c5      	bhi.n	8000f70 <__gedf2+0x48>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	45c8      	cmp	r8, r9
 8000fe8:	d3f4      	bcc.n	8000fd4 <__gedf2+0xac>
 8000fea:	e7c6      	b.n	8000f7a <__gedf2+0x52>
 8000fec:	000007ff 	.word	0x000007ff

08000ff0 <__ledf2>:
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	464f      	mov	r7, r9
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	004d      	lsls	r5, r1, #1
 8000ffa:	b5c0      	push	{r6, r7, lr}
 8000ffc:	030e      	lsls	r6, r1, #12
 8000ffe:	0fc9      	lsrs	r1, r1, #31
 8001000:	468a      	mov	sl, r1
 8001002:	492e      	ldr	r1, [pc, #184]	; (80010bc <__ledf2+0xcc>)
 8001004:	031f      	lsls	r7, r3, #12
 8001006:	005c      	lsls	r4, r3, #1
 8001008:	4680      	mov	r8, r0
 800100a:	0b36      	lsrs	r6, r6, #12
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	4691      	mov	r9, r2
 8001010:	0b3f      	lsrs	r7, r7, #12
 8001012:	0d64      	lsrs	r4, r4, #21
 8001014:	0fdb      	lsrs	r3, r3, #31
 8001016:	428d      	cmp	r5, r1
 8001018:	d018      	beq.n	800104c <__ledf2+0x5c>
 800101a:	428c      	cmp	r4, r1
 800101c:	d011      	beq.n	8001042 <__ledf2+0x52>
 800101e:	2d00      	cmp	r5, #0
 8001020:	d118      	bne.n	8001054 <__ledf2+0x64>
 8001022:	4330      	orrs	r0, r6
 8001024:	4684      	mov	ip, r0
 8001026:	2c00      	cmp	r4, #0
 8001028:	d11e      	bne.n	8001068 <__ledf2+0x78>
 800102a:	433a      	orrs	r2, r7
 800102c:	d11c      	bne.n	8001068 <__ledf2+0x78>
 800102e:	4663      	mov	r3, ip
 8001030:	2000      	movs	r0, #0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d030      	beq.n	8001098 <__ledf2+0xa8>
 8001036:	4651      	mov	r1, sl
 8001038:	2002      	movs	r0, #2
 800103a:	3901      	subs	r1, #1
 800103c:	4008      	ands	r0, r1
 800103e:	3801      	subs	r0, #1
 8001040:	e02a      	b.n	8001098 <__ledf2+0xa8>
 8001042:	0039      	movs	r1, r7
 8001044:	4311      	orrs	r1, r2
 8001046:	d0ea      	beq.n	800101e <__ledf2+0x2e>
 8001048:	2002      	movs	r0, #2
 800104a:	e025      	b.n	8001098 <__ledf2+0xa8>
 800104c:	4330      	orrs	r0, r6
 800104e:	d1fb      	bne.n	8001048 <__ledf2+0x58>
 8001050:	42ac      	cmp	r4, r5
 8001052:	d026      	beq.n	80010a2 <__ledf2+0xb2>
 8001054:	2c00      	cmp	r4, #0
 8001056:	d126      	bne.n	80010a6 <__ledf2+0xb6>
 8001058:	433a      	orrs	r2, r7
 800105a:	d124      	bne.n	80010a6 <__ledf2+0xb6>
 800105c:	4651      	mov	r1, sl
 800105e:	2002      	movs	r0, #2
 8001060:	3901      	subs	r1, #1
 8001062:	4008      	ands	r0, r1
 8001064:	3801      	subs	r0, #1
 8001066:	e017      	b.n	8001098 <__ledf2+0xa8>
 8001068:	4662      	mov	r2, ip
 800106a:	2a00      	cmp	r2, #0
 800106c:	d00f      	beq.n	800108e <__ledf2+0x9e>
 800106e:	459a      	cmp	sl, r3
 8001070:	d1e1      	bne.n	8001036 <__ledf2+0x46>
 8001072:	42a5      	cmp	r5, r4
 8001074:	db05      	blt.n	8001082 <__ledf2+0x92>
 8001076:	42be      	cmp	r6, r7
 8001078:	d8dd      	bhi.n	8001036 <__ledf2+0x46>
 800107a:	d019      	beq.n	80010b0 <__ledf2+0xc0>
 800107c:	2000      	movs	r0, #0
 800107e:	42be      	cmp	r6, r7
 8001080:	d20a      	bcs.n	8001098 <__ledf2+0xa8>
 8001082:	4650      	mov	r0, sl
 8001084:	2301      	movs	r3, #1
 8001086:	3801      	subs	r0, #1
 8001088:	4398      	bics	r0, r3
 800108a:	3001      	adds	r0, #1
 800108c:	e004      	b.n	8001098 <__ledf2+0xa8>
 800108e:	2201      	movs	r2, #1
 8001090:	3b01      	subs	r3, #1
 8001092:	4393      	bics	r3, r2
 8001094:	0018      	movs	r0, r3
 8001096:	3001      	adds	r0, #1
 8001098:	bc1c      	pop	{r2, r3, r4}
 800109a:	4690      	mov	r8, r2
 800109c:	4699      	mov	r9, r3
 800109e:	46a2      	mov	sl, r4
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	433a      	orrs	r2, r7
 80010a4:	d1d0      	bne.n	8001048 <__ledf2+0x58>
 80010a6:	459a      	cmp	sl, r3
 80010a8:	d1c5      	bne.n	8001036 <__ledf2+0x46>
 80010aa:	42a5      	cmp	r5, r4
 80010ac:	dcc3      	bgt.n	8001036 <__ledf2+0x46>
 80010ae:	e7e0      	b.n	8001072 <__ledf2+0x82>
 80010b0:	45c8      	cmp	r8, r9
 80010b2:	d8c0      	bhi.n	8001036 <__ledf2+0x46>
 80010b4:	2000      	movs	r0, #0
 80010b6:	45c8      	cmp	r8, r9
 80010b8:	d3e3      	bcc.n	8001082 <__ledf2+0x92>
 80010ba:	e7ed      	b.n	8001098 <__ledf2+0xa8>
 80010bc:	000007ff 	.word	0x000007ff

080010c0 <__aeabi_dmul>:
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	4657      	mov	r7, sl
 80010c4:	46de      	mov	lr, fp
 80010c6:	464e      	mov	r6, r9
 80010c8:	4645      	mov	r5, r8
 80010ca:	b5e0      	push	{r5, r6, r7, lr}
 80010cc:	4683      	mov	fp, r0
 80010ce:	0006      	movs	r6, r0
 80010d0:	030f      	lsls	r7, r1, #12
 80010d2:	0048      	lsls	r0, r1, #1
 80010d4:	b087      	sub	sp, #28
 80010d6:	4692      	mov	sl, r2
 80010d8:	001d      	movs	r5, r3
 80010da:	0b3f      	lsrs	r7, r7, #12
 80010dc:	0d40      	lsrs	r0, r0, #21
 80010de:	0fcc      	lsrs	r4, r1, #31
 80010e0:	2800      	cmp	r0, #0
 80010e2:	d100      	bne.n	80010e6 <__aeabi_dmul+0x26>
 80010e4:	e06f      	b.n	80011c6 <__aeabi_dmul+0x106>
 80010e6:	4bde      	ldr	r3, [pc, #888]	; (8001460 <__aeabi_dmul+0x3a0>)
 80010e8:	4298      	cmp	r0, r3
 80010ea:	d038      	beq.n	800115e <__aeabi_dmul+0x9e>
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	00ff      	lsls	r7, r7, #3
 80010f0:	041b      	lsls	r3, r3, #16
 80010f2:	431f      	orrs	r7, r3
 80010f4:	0f73      	lsrs	r3, r6, #29
 80010f6:	433b      	orrs	r3, r7
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	4bda      	ldr	r3, [pc, #872]	; (8001464 <__aeabi_dmul+0x3a4>)
 80010fc:	2700      	movs	r7, #0
 80010fe:	4699      	mov	r9, r3
 8001100:	2300      	movs	r3, #0
 8001102:	469b      	mov	fp, r3
 8001104:	00f6      	lsls	r6, r6, #3
 8001106:	4481      	add	r9, r0
 8001108:	032b      	lsls	r3, r5, #12
 800110a:	0069      	lsls	r1, r5, #1
 800110c:	0b1b      	lsrs	r3, r3, #12
 800110e:	4652      	mov	r2, sl
 8001110:	4698      	mov	r8, r3
 8001112:	0d49      	lsrs	r1, r1, #21
 8001114:	0fed      	lsrs	r5, r5, #31
 8001116:	2900      	cmp	r1, #0
 8001118:	d100      	bne.n	800111c <__aeabi_dmul+0x5c>
 800111a:	e085      	b.n	8001228 <__aeabi_dmul+0x168>
 800111c:	4bd0      	ldr	r3, [pc, #832]	; (8001460 <__aeabi_dmul+0x3a0>)
 800111e:	4299      	cmp	r1, r3
 8001120:	d100      	bne.n	8001124 <__aeabi_dmul+0x64>
 8001122:	e073      	b.n	800120c <__aeabi_dmul+0x14c>
 8001124:	4643      	mov	r3, r8
 8001126:	00da      	lsls	r2, r3, #3
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	041b      	lsls	r3, r3, #16
 800112c:	4313      	orrs	r3, r2
 800112e:	4652      	mov	r2, sl
 8001130:	48cc      	ldr	r0, [pc, #816]	; (8001464 <__aeabi_dmul+0x3a4>)
 8001132:	0f52      	lsrs	r2, r2, #29
 8001134:	4684      	mov	ip, r0
 8001136:	4313      	orrs	r3, r2
 8001138:	4652      	mov	r2, sl
 800113a:	2000      	movs	r0, #0
 800113c:	4461      	add	r1, ip
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	4489      	add	r9, r1
 8001142:	0021      	movs	r1, r4
 8001144:	4069      	eors	r1, r5
 8001146:	9100      	str	r1, [sp, #0]
 8001148:	468c      	mov	ip, r1
 800114a:	2101      	movs	r1, #1
 800114c:	4449      	add	r1, r9
 800114e:	468a      	mov	sl, r1
 8001150:	2f0f      	cmp	r7, #15
 8001152:	d900      	bls.n	8001156 <__aeabi_dmul+0x96>
 8001154:	e090      	b.n	8001278 <__aeabi_dmul+0x1b8>
 8001156:	49c4      	ldr	r1, [pc, #784]	; (8001468 <__aeabi_dmul+0x3a8>)
 8001158:	00bf      	lsls	r7, r7, #2
 800115a:	59cf      	ldr	r7, [r1, r7]
 800115c:	46bf      	mov	pc, r7
 800115e:	465b      	mov	r3, fp
 8001160:	433b      	orrs	r3, r7
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	d000      	beq.n	8001168 <__aeabi_dmul+0xa8>
 8001166:	e16a      	b.n	800143e <__aeabi_dmul+0x37e>
 8001168:	2302      	movs	r3, #2
 800116a:	2708      	movs	r7, #8
 800116c:	2600      	movs	r6, #0
 800116e:	4681      	mov	r9, r0
 8001170:	469b      	mov	fp, r3
 8001172:	e7c9      	b.n	8001108 <__aeabi_dmul+0x48>
 8001174:	0032      	movs	r2, r6
 8001176:	4658      	mov	r0, fp
 8001178:	9b01      	ldr	r3, [sp, #4]
 800117a:	4661      	mov	r1, ip
 800117c:	9100      	str	r1, [sp, #0]
 800117e:	2802      	cmp	r0, #2
 8001180:	d100      	bne.n	8001184 <__aeabi_dmul+0xc4>
 8001182:	e075      	b.n	8001270 <__aeabi_dmul+0x1b0>
 8001184:	2803      	cmp	r0, #3
 8001186:	d100      	bne.n	800118a <__aeabi_dmul+0xca>
 8001188:	e1fe      	b.n	8001588 <__aeabi_dmul+0x4c8>
 800118a:	2801      	cmp	r0, #1
 800118c:	d000      	beq.n	8001190 <__aeabi_dmul+0xd0>
 800118e:	e12c      	b.n	80013ea <__aeabi_dmul+0x32a>
 8001190:	2300      	movs	r3, #0
 8001192:	2700      	movs	r7, #0
 8001194:	2600      	movs	r6, #0
 8001196:	2500      	movs	r5, #0
 8001198:	033f      	lsls	r7, r7, #12
 800119a:	0d2a      	lsrs	r2, r5, #20
 800119c:	0b3f      	lsrs	r7, r7, #12
 800119e:	48b3      	ldr	r0, [pc, #716]	; (800146c <__aeabi_dmul+0x3ac>)
 80011a0:	0512      	lsls	r2, r2, #20
 80011a2:	433a      	orrs	r2, r7
 80011a4:	4002      	ands	r2, r0
 80011a6:	051b      	lsls	r3, r3, #20
 80011a8:	4313      	orrs	r3, r2
 80011aa:	9a00      	ldr	r2, [sp, #0]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	07d1      	lsls	r1, r2, #31
 80011b0:	085b      	lsrs	r3, r3, #1
 80011b2:	430b      	orrs	r3, r1
 80011b4:	0030      	movs	r0, r6
 80011b6:	0019      	movs	r1, r3
 80011b8:	b007      	add	sp, #28
 80011ba:	bc3c      	pop	{r2, r3, r4, r5}
 80011bc:	4690      	mov	r8, r2
 80011be:	4699      	mov	r9, r3
 80011c0:	46a2      	mov	sl, r4
 80011c2:	46ab      	mov	fp, r5
 80011c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011c6:	465b      	mov	r3, fp
 80011c8:	433b      	orrs	r3, r7
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dmul+0x110>
 80011ce:	e12f      	b.n	8001430 <__aeabi_dmul+0x370>
 80011d0:	2f00      	cmp	r7, #0
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dmul+0x116>
 80011d4:	e1a5      	b.n	8001522 <__aeabi_dmul+0x462>
 80011d6:	0038      	movs	r0, r7
 80011d8:	f000 fa1e 	bl	8001618 <__clzsi2>
 80011dc:	0003      	movs	r3, r0
 80011de:	3b0b      	subs	r3, #11
 80011e0:	2b1c      	cmp	r3, #28
 80011e2:	dd00      	ble.n	80011e6 <__aeabi_dmul+0x126>
 80011e4:	e196      	b.n	8001514 <__aeabi_dmul+0x454>
 80011e6:	221d      	movs	r2, #29
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	465a      	mov	r2, fp
 80011ec:	0001      	movs	r1, r0
 80011ee:	40da      	lsrs	r2, r3
 80011f0:	465e      	mov	r6, fp
 80011f2:	3908      	subs	r1, #8
 80011f4:	408f      	lsls	r7, r1
 80011f6:	0013      	movs	r3, r2
 80011f8:	408e      	lsls	r6, r1
 80011fa:	433b      	orrs	r3, r7
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	4b9c      	ldr	r3, [pc, #624]	; (8001470 <__aeabi_dmul+0x3b0>)
 8001200:	2700      	movs	r7, #0
 8001202:	1a1b      	subs	r3, r3, r0
 8001204:	4699      	mov	r9, r3
 8001206:	2300      	movs	r3, #0
 8001208:	469b      	mov	fp, r3
 800120a:	e77d      	b.n	8001108 <__aeabi_dmul+0x48>
 800120c:	4641      	mov	r1, r8
 800120e:	4653      	mov	r3, sl
 8001210:	430b      	orrs	r3, r1
 8001212:	4993      	ldr	r1, [pc, #588]	; (8001460 <__aeabi_dmul+0x3a0>)
 8001214:	468c      	mov	ip, r1
 8001216:	44e1      	add	r9, ip
 8001218:	2b00      	cmp	r3, #0
 800121a:	d000      	beq.n	800121e <__aeabi_dmul+0x15e>
 800121c:	e11a      	b.n	8001454 <__aeabi_dmul+0x394>
 800121e:	2202      	movs	r2, #2
 8001220:	2002      	movs	r0, #2
 8001222:	4317      	orrs	r7, r2
 8001224:	2200      	movs	r2, #0
 8001226:	e78c      	b.n	8001142 <__aeabi_dmul+0x82>
 8001228:	4313      	orrs	r3, r2
 800122a:	d100      	bne.n	800122e <__aeabi_dmul+0x16e>
 800122c:	e10d      	b.n	800144a <__aeabi_dmul+0x38a>
 800122e:	4643      	mov	r3, r8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_dmul+0x176>
 8001234:	e181      	b.n	800153a <__aeabi_dmul+0x47a>
 8001236:	4640      	mov	r0, r8
 8001238:	f000 f9ee 	bl	8001618 <__clzsi2>
 800123c:	0002      	movs	r2, r0
 800123e:	3a0b      	subs	r2, #11
 8001240:	2a1c      	cmp	r2, #28
 8001242:	dd00      	ble.n	8001246 <__aeabi_dmul+0x186>
 8001244:	e172      	b.n	800152c <__aeabi_dmul+0x46c>
 8001246:	0001      	movs	r1, r0
 8001248:	4643      	mov	r3, r8
 800124a:	3908      	subs	r1, #8
 800124c:	408b      	lsls	r3, r1
 800124e:	4698      	mov	r8, r3
 8001250:	231d      	movs	r3, #29
 8001252:	1a9a      	subs	r2, r3, r2
 8001254:	4653      	mov	r3, sl
 8001256:	40d3      	lsrs	r3, r2
 8001258:	001a      	movs	r2, r3
 800125a:	4643      	mov	r3, r8
 800125c:	4313      	orrs	r3, r2
 800125e:	4652      	mov	r2, sl
 8001260:	408a      	lsls	r2, r1
 8001262:	4649      	mov	r1, r9
 8001264:	1a08      	subs	r0, r1, r0
 8001266:	4982      	ldr	r1, [pc, #520]	; (8001470 <__aeabi_dmul+0x3b0>)
 8001268:	4689      	mov	r9, r1
 800126a:	4481      	add	r9, r0
 800126c:	2000      	movs	r0, #0
 800126e:	e768      	b.n	8001142 <__aeabi_dmul+0x82>
 8001270:	4b7b      	ldr	r3, [pc, #492]	; (8001460 <__aeabi_dmul+0x3a0>)
 8001272:	2700      	movs	r7, #0
 8001274:	2600      	movs	r6, #0
 8001276:	e78e      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001278:	0c14      	lsrs	r4, r2, #16
 800127a:	0412      	lsls	r2, r2, #16
 800127c:	0c12      	lsrs	r2, r2, #16
 800127e:	0011      	movs	r1, r2
 8001280:	0c37      	lsrs	r7, r6, #16
 8001282:	0436      	lsls	r6, r6, #16
 8001284:	0c35      	lsrs	r5, r6, #16
 8001286:	4379      	muls	r1, r7
 8001288:	0028      	movs	r0, r5
 800128a:	468c      	mov	ip, r1
 800128c:	002e      	movs	r6, r5
 800128e:	4360      	muls	r0, r4
 8001290:	4460      	add	r0, ip
 8001292:	4683      	mov	fp, r0
 8001294:	4356      	muls	r6, r2
 8001296:	0021      	movs	r1, r4
 8001298:	0c30      	lsrs	r0, r6, #16
 800129a:	4680      	mov	r8, r0
 800129c:	4658      	mov	r0, fp
 800129e:	4379      	muls	r1, r7
 80012a0:	4440      	add	r0, r8
 80012a2:	9102      	str	r1, [sp, #8]
 80012a4:	4584      	cmp	ip, r0
 80012a6:	d906      	bls.n	80012b6 <__aeabi_dmul+0x1f6>
 80012a8:	4688      	mov	r8, r1
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0249      	lsls	r1, r1, #9
 80012ae:	468c      	mov	ip, r1
 80012b0:	44e0      	add	r8, ip
 80012b2:	4641      	mov	r1, r8
 80012b4:	9102      	str	r1, [sp, #8]
 80012b6:	0436      	lsls	r6, r6, #16
 80012b8:	0c01      	lsrs	r1, r0, #16
 80012ba:	0c36      	lsrs	r6, r6, #16
 80012bc:	0400      	lsls	r0, r0, #16
 80012be:	468b      	mov	fp, r1
 80012c0:	1981      	adds	r1, r0, r6
 80012c2:	0c1e      	lsrs	r6, r3, #16
 80012c4:	041b      	lsls	r3, r3, #16
 80012c6:	0c1b      	lsrs	r3, r3, #16
 80012c8:	9103      	str	r1, [sp, #12]
 80012ca:	0019      	movs	r1, r3
 80012cc:	4379      	muls	r1, r7
 80012ce:	468c      	mov	ip, r1
 80012d0:	0028      	movs	r0, r5
 80012d2:	4375      	muls	r5, r6
 80012d4:	4465      	add	r5, ip
 80012d6:	46a8      	mov	r8, r5
 80012d8:	4358      	muls	r0, r3
 80012da:	0c05      	lsrs	r5, r0, #16
 80012dc:	4445      	add	r5, r8
 80012de:	4377      	muls	r7, r6
 80012e0:	42a9      	cmp	r1, r5
 80012e2:	d903      	bls.n	80012ec <__aeabi_dmul+0x22c>
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0249      	lsls	r1, r1, #9
 80012e8:	468c      	mov	ip, r1
 80012ea:	4467      	add	r7, ip
 80012ec:	0c29      	lsrs	r1, r5, #16
 80012ee:	468c      	mov	ip, r1
 80012f0:	0039      	movs	r1, r7
 80012f2:	0400      	lsls	r0, r0, #16
 80012f4:	0c00      	lsrs	r0, r0, #16
 80012f6:	042d      	lsls	r5, r5, #16
 80012f8:	182d      	adds	r5, r5, r0
 80012fa:	4461      	add	r1, ip
 80012fc:	44ab      	add	fp, r5
 80012fe:	9105      	str	r1, [sp, #20]
 8001300:	4659      	mov	r1, fp
 8001302:	9104      	str	r1, [sp, #16]
 8001304:	9901      	ldr	r1, [sp, #4]
 8001306:	040f      	lsls	r7, r1, #16
 8001308:	0c3f      	lsrs	r7, r7, #16
 800130a:	0c08      	lsrs	r0, r1, #16
 800130c:	0039      	movs	r1, r7
 800130e:	4351      	muls	r1, r2
 8001310:	4342      	muls	r2, r0
 8001312:	4690      	mov	r8, r2
 8001314:	0002      	movs	r2, r0
 8001316:	468c      	mov	ip, r1
 8001318:	0c09      	lsrs	r1, r1, #16
 800131a:	468b      	mov	fp, r1
 800131c:	4362      	muls	r2, r4
 800131e:	437c      	muls	r4, r7
 8001320:	4444      	add	r4, r8
 8001322:	445c      	add	r4, fp
 8001324:	45a0      	cmp	r8, r4
 8001326:	d903      	bls.n	8001330 <__aeabi_dmul+0x270>
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0249      	lsls	r1, r1, #9
 800132c:	4688      	mov	r8, r1
 800132e:	4442      	add	r2, r8
 8001330:	0c21      	lsrs	r1, r4, #16
 8001332:	4688      	mov	r8, r1
 8001334:	4661      	mov	r1, ip
 8001336:	0409      	lsls	r1, r1, #16
 8001338:	0c09      	lsrs	r1, r1, #16
 800133a:	468c      	mov	ip, r1
 800133c:	0039      	movs	r1, r7
 800133e:	4359      	muls	r1, r3
 8001340:	4343      	muls	r3, r0
 8001342:	4370      	muls	r0, r6
 8001344:	437e      	muls	r6, r7
 8001346:	0c0f      	lsrs	r7, r1, #16
 8001348:	18f6      	adds	r6, r6, r3
 800134a:	0424      	lsls	r4, r4, #16
 800134c:	19be      	adds	r6, r7, r6
 800134e:	4464      	add	r4, ip
 8001350:	4442      	add	r2, r8
 8001352:	468c      	mov	ip, r1
 8001354:	42b3      	cmp	r3, r6
 8001356:	d903      	bls.n	8001360 <__aeabi_dmul+0x2a0>
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	4698      	mov	r8, r3
 800135e:	4440      	add	r0, r8
 8001360:	9b02      	ldr	r3, [sp, #8]
 8001362:	4661      	mov	r1, ip
 8001364:	4698      	mov	r8, r3
 8001366:	9b04      	ldr	r3, [sp, #16]
 8001368:	0437      	lsls	r7, r6, #16
 800136a:	4443      	add	r3, r8
 800136c:	469b      	mov	fp, r3
 800136e:	45ab      	cmp	fp, r5
 8001370:	41ad      	sbcs	r5, r5
 8001372:	426b      	negs	r3, r5
 8001374:	040d      	lsls	r5, r1, #16
 8001376:	9905      	ldr	r1, [sp, #20]
 8001378:	0c2d      	lsrs	r5, r5, #16
 800137a:	468c      	mov	ip, r1
 800137c:	197f      	adds	r7, r7, r5
 800137e:	4467      	add	r7, ip
 8001380:	18fd      	adds	r5, r7, r3
 8001382:	46a8      	mov	r8, r5
 8001384:	465d      	mov	r5, fp
 8001386:	192d      	adds	r5, r5, r4
 8001388:	42a5      	cmp	r5, r4
 800138a:	41a4      	sbcs	r4, r4
 800138c:	4693      	mov	fp, r2
 800138e:	4264      	negs	r4, r4
 8001390:	46a4      	mov	ip, r4
 8001392:	44c3      	add	fp, r8
 8001394:	44dc      	add	ip, fp
 8001396:	428f      	cmp	r7, r1
 8001398:	41bf      	sbcs	r7, r7
 800139a:	4598      	cmp	r8, r3
 800139c:	419b      	sbcs	r3, r3
 800139e:	4593      	cmp	fp, r2
 80013a0:	4192      	sbcs	r2, r2
 80013a2:	45a4      	cmp	ip, r4
 80013a4:	41a4      	sbcs	r4, r4
 80013a6:	425b      	negs	r3, r3
 80013a8:	427f      	negs	r7, r7
 80013aa:	431f      	orrs	r7, r3
 80013ac:	0c36      	lsrs	r6, r6, #16
 80013ae:	4252      	negs	r2, r2
 80013b0:	4264      	negs	r4, r4
 80013b2:	19bf      	adds	r7, r7, r6
 80013b4:	4322      	orrs	r2, r4
 80013b6:	18bf      	adds	r7, r7, r2
 80013b8:	4662      	mov	r2, ip
 80013ba:	1838      	adds	r0, r7, r0
 80013bc:	0243      	lsls	r3, r0, #9
 80013be:	0dd2      	lsrs	r2, r2, #23
 80013c0:	9903      	ldr	r1, [sp, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	026a      	lsls	r2, r5, #9
 80013c6:	430a      	orrs	r2, r1
 80013c8:	1e50      	subs	r0, r2, #1
 80013ca:	4182      	sbcs	r2, r0
 80013cc:	4661      	mov	r1, ip
 80013ce:	0ded      	lsrs	r5, r5, #23
 80013d0:	432a      	orrs	r2, r5
 80013d2:	024e      	lsls	r6, r1, #9
 80013d4:	4332      	orrs	r2, r6
 80013d6:	01d9      	lsls	r1, r3, #7
 80013d8:	d400      	bmi.n	80013dc <__aeabi_dmul+0x31c>
 80013da:	e0b3      	b.n	8001544 <__aeabi_dmul+0x484>
 80013dc:	2601      	movs	r6, #1
 80013de:	0850      	lsrs	r0, r2, #1
 80013e0:	4032      	ands	r2, r6
 80013e2:	4302      	orrs	r2, r0
 80013e4:	07de      	lsls	r6, r3, #31
 80013e6:	4332      	orrs	r2, r6
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	4c22      	ldr	r4, [pc, #136]	; (8001474 <__aeabi_dmul+0x3b4>)
 80013ec:	4454      	add	r4, sl
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	dd62      	ble.n	80014b8 <__aeabi_dmul+0x3f8>
 80013f2:	0751      	lsls	r1, r2, #29
 80013f4:	d009      	beq.n	800140a <__aeabi_dmul+0x34a>
 80013f6:	200f      	movs	r0, #15
 80013f8:	4010      	ands	r0, r2
 80013fa:	2804      	cmp	r0, #4
 80013fc:	d005      	beq.n	800140a <__aeabi_dmul+0x34a>
 80013fe:	1d10      	adds	r0, r2, #4
 8001400:	4290      	cmp	r0, r2
 8001402:	4192      	sbcs	r2, r2
 8001404:	4252      	negs	r2, r2
 8001406:	189b      	adds	r3, r3, r2
 8001408:	0002      	movs	r2, r0
 800140a:	01d9      	lsls	r1, r3, #7
 800140c:	d504      	bpl.n	8001418 <__aeabi_dmul+0x358>
 800140e:	2480      	movs	r4, #128	; 0x80
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__aeabi_dmul+0x3b8>)
 8001412:	00e4      	lsls	r4, r4, #3
 8001414:	4003      	ands	r3, r0
 8001416:	4454      	add	r4, sl
 8001418:	4818      	ldr	r0, [pc, #96]	; (800147c <__aeabi_dmul+0x3bc>)
 800141a:	4284      	cmp	r4, r0
 800141c:	dd00      	ble.n	8001420 <__aeabi_dmul+0x360>
 800141e:	e727      	b.n	8001270 <__aeabi_dmul+0x1b0>
 8001420:	075e      	lsls	r6, r3, #29
 8001422:	025b      	lsls	r3, r3, #9
 8001424:	08d2      	lsrs	r2, r2, #3
 8001426:	0b1f      	lsrs	r7, r3, #12
 8001428:	0563      	lsls	r3, r4, #21
 800142a:	4316      	orrs	r6, r2
 800142c:	0d5b      	lsrs	r3, r3, #21
 800142e:	e6b2      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001430:	2300      	movs	r3, #0
 8001432:	4699      	mov	r9, r3
 8001434:	3301      	adds	r3, #1
 8001436:	2704      	movs	r7, #4
 8001438:	2600      	movs	r6, #0
 800143a:	469b      	mov	fp, r3
 800143c:	e664      	b.n	8001108 <__aeabi_dmul+0x48>
 800143e:	2303      	movs	r3, #3
 8001440:	9701      	str	r7, [sp, #4]
 8001442:	4681      	mov	r9, r0
 8001444:	270c      	movs	r7, #12
 8001446:	469b      	mov	fp, r3
 8001448:	e65e      	b.n	8001108 <__aeabi_dmul+0x48>
 800144a:	2201      	movs	r2, #1
 800144c:	2001      	movs	r0, #1
 800144e:	4317      	orrs	r7, r2
 8001450:	2200      	movs	r2, #0
 8001452:	e676      	b.n	8001142 <__aeabi_dmul+0x82>
 8001454:	2303      	movs	r3, #3
 8001456:	2003      	movs	r0, #3
 8001458:	431f      	orrs	r7, r3
 800145a:	4643      	mov	r3, r8
 800145c:	e671      	b.n	8001142 <__aeabi_dmul+0x82>
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	000007ff 	.word	0x000007ff
 8001464:	fffffc01 	.word	0xfffffc01
 8001468:	080068b8 	.word	0x080068b8
 800146c:	800fffff 	.word	0x800fffff
 8001470:	fffffc0d 	.word	0xfffffc0d
 8001474:	000003ff 	.word	0x000003ff
 8001478:	feffffff 	.word	0xfeffffff
 800147c:	000007fe 	.word	0x000007fe
 8001480:	2300      	movs	r3, #0
 8001482:	2780      	movs	r7, #128	; 0x80
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	033f      	lsls	r7, r7, #12
 8001488:	2600      	movs	r6, #0
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <__aeabi_dmul+0x4d8>)
 800148c:	e683      	b.n	8001196 <__aeabi_dmul+0xd6>
 800148e:	9b01      	ldr	r3, [sp, #4]
 8001490:	0032      	movs	r2, r6
 8001492:	46a4      	mov	ip, r4
 8001494:	4658      	mov	r0, fp
 8001496:	e670      	b.n	800117a <__aeabi_dmul+0xba>
 8001498:	46ac      	mov	ip, r5
 800149a:	e66e      	b.n	800117a <__aeabi_dmul+0xba>
 800149c:	2780      	movs	r7, #128	; 0x80
 800149e:	9901      	ldr	r1, [sp, #4]
 80014a0:	033f      	lsls	r7, r7, #12
 80014a2:	4239      	tst	r1, r7
 80014a4:	d02d      	beq.n	8001502 <__aeabi_dmul+0x442>
 80014a6:	423b      	tst	r3, r7
 80014a8:	d12b      	bne.n	8001502 <__aeabi_dmul+0x442>
 80014aa:	431f      	orrs	r7, r3
 80014ac:	033f      	lsls	r7, r7, #12
 80014ae:	0b3f      	lsrs	r7, r7, #12
 80014b0:	9500      	str	r5, [sp, #0]
 80014b2:	0016      	movs	r6, r2
 80014b4:	4b38      	ldr	r3, [pc, #224]	; (8001598 <__aeabi_dmul+0x4d8>)
 80014b6:	e66e      	b.n	8001196 <__aeabi_dmul+0xd6>
 80014b8:	2501      	movs	r5, #1
 80014ba:	1b2d      	subs	r5, r5, r4
 80014bc:	2d38      	cmp	r5, #56	; 0x38
 80014be:	dd00      	ble.n	80014c2 <__aeabi_dmul+0x402>
 80014c0:	e666      	b.n	8001190 <__aeabi_dmul+0xd0>
 80014c2:	2d1f      	cmp	r5, #31
 80014c4:	dc40      	bgt.n	8001548 <__aeabi_dmul+0x488>
 80014c6:	4835      	ldr	r0, [pc, #212]	; (800159c <__aeabi_dmul+0x4dc>)
 80014c8:	001c      	movs	r4, r3
 80014ca:	4450      	add	r0, sl
 80014cc:	0016      	movs	r6, r2
 80014ce:	4082      	lsls	r2, r0
 80014d0:	4084      	lsls	r4, r0
 80014d2:	40ee      	lsrs	r6, r5
 80014d4:	1e50      	subs	r0, r2, #1
 80014d6:	4182      	sbcs	r2, r0
 80014d8:	4334      	orrs	r4, r6
 80014da:	4314      	orrs	r4, r2
 80014dc:	40eb      	lsrs	r3, r5
 80014de:	0762      	lsls	r2, r4, #29
 80014e0:	d009      	beq.n	80014f6 <__aeabi_dmul+0x436>
 80014e2:	220f      	movs	r2, #15
 80014e4:	4022      	ands	r2, r4
 80014e6:	2a04      	cmp	r2, #4
 80014e8:	d005      	beq.n	80014f6 <__aeabi_dmul+0x436>
 80014ea:	0022      	movs	r2, r4
 80014ec:	1d14      	adds	r4, r2, #4
 80014ee:	4294      	cmp	r4, r2
 80014f0:	4180      	sbcs	r0, r0
 80014f2:	4240      	negs	r0, r0
 80014f4:	181b      	adds	r3, r3, r0
 80014f6:	021a      	lsls	r2, r3, #8
 80014f8:	d53e      	bpl.n	8001578 <__aeabi_dmul+0x4b8>
 80014fa:	2301      	movs	r3, #1
 80014fc:	2700      	movs	r7, #0
 80014fe:	2600      	movs	r6, #0
 8001500:	e649      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001502:	2780      	movs	r7, #128	; 0x80
 8001504:	9b01      	ldr	r3, [sp, #4]
 8001506:	033f      	lsls	r7, r7, #12
 8001508:	431f      	orrs	r7, r3
 800150a:	033f      	lsls	r7, r7, #12
 800150c:	0b3f      	lsrs	r7, r7, #12
 800150e:	9400      	str	r4, [sp, #0]
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <__aeabi_dmul+0x4d8>)
 8001512:	e640      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001514:	0003      	movs	r3, r0
 8001516:	465a      	mov	r2, fp
 8001518:	3b28      	subs	r3, #40	; 0x28
 800151a:	409a      	lsls	r2, r3
 800151c:	2600      	movs	r6, #0
 800151e:	9201      	str	r2, [sp, #4]
 8001520:	e66d      	b.n	80011fe <__aeabi_dmul+0x13e>
 8001522:	4658      	mov	r0, fp
 8001524:	f000 f878 	bl	8001618 <__clzsi2>
 8001528:	3020      	adds	r0, #32
 800152a:	e657      	b.n	80011dc <__aeabi_dmul+0x11c>
 800152c:	0003      	movs	r3, r0
 800152e:	4652      	mov	r2, sl
 8001530:	3b28      	subs	r3, #40	; 0x28
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	e693      	b.n	8001262 <__aeabi_dmul+0x1a2>
 800153a:	4650      	mov	r0, sl
 800153c:	f000 f86c 	bl	8001618 <__clzsi2>
 8001540:	3020      	adds	r0, #32
 8001542:	e67b      	b.n	800123c <__aeabi_dmul+0x17c>
 8001544:	46ca      	mov	sl, r9
 8001546:	e750      	b.n	80013ea <__aeabi_dmul+0x32a>
 8001548:	201f      	movs	r0, #31
 800154a:	001e      	movs	r6, r3
 800154c:	4240      	negs	r0, r0
 800154e:	1b04      	subs	r4, r0, r4
 8001550:	40e6      	lsrs	r6, r4
 8001552:	2d20      	cmp	r5, #32
 8001554:	d003      	beq.n	800155e <__aeabi_dmul+0x49e>
 8001556:	4c12      	ldr	r4, [pc, #72]	; (80015a0 <__aeabi_dmul+0x4e0>)
 8001558:	4454      	add	r4, sl
 800155a:	40a3      	lsls	r3, r4
 800155c:	431a      	orrs	r2, r3
 800155e:	1e50      	subs	r0, r2, #1
 8001560:	4182      	sbcs	r2, r0
 8001562:	4332      	orrs	r2, r6
 8001564:	2607      	movs	r6, #7
 8001566:	2700      	movs	r7, #0
 8001568:	4016      	ands	r6, r2
 800156a:	d009      	beq.n	8001580 <__aeabi_dmul+0x4c0>
 800156c:	200f      	movs	r0, #15
 800156e:	2300      	movs	r3, #0
 8001570:	4010      	ands	r0, r2
 8001572:	0014      	movs	r4, r2
 8001574:	2804      	cmp	r0, #4
 8001576:	d1b9      	bne.n	80014ec <__aeabi_dmul+0x42c>
 8001578:	0022      	movs	r2, r4
 800157a:	075e      	lsls	r6, r3, #29
 800157c:	025b      	lsls	r3, r3, #9
 800157e:	0b1f      	lsrs	r7, r3, #12
 8001580:	08d2      	lsrs	r2, r2, #3
 8001582:	4316      	orrs	r6, r2
 8001584:	2300      	movs	r3, #0
 8001586:	e606      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	033f      	lsls	r7, r7, #12
 800158c:	431f      	orrs	r7, r3
 800158e:	033f      	lsls	r7, r7, #12
 8001590:	0b3f      	lsrs	r7, r7, #12
 8001592:	0016      	movs	r6, r2
 8001594:	4b00      	ldr	r3, [pc, #0]	; (8001598 <__aeabi_dmul+0x4d8>)
 8001596:	e5fe      	b.n	8001196 <__aeabi_dmul+0xd6>
 8001598:	000007ff 	.word	0x000007ff
 800159c:	0000041e 	.word	0x0000041e
 80015a0:	0000043e 	.word	0x0000043e

080015a4 <__aeabi_i2d>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d02d      	beq.n	8001606 <__aeabi_i2d+0x62>
 80015aa:	17c3      	asrs	r3, r0, #31
 80015ac:	18c5      	adds	r5, r0, r3
 80015ae:	405d      	eors	r5, r3
 80015b0:	0fc4      	lsrs	r4, r0, #31
 80015b2:	0028      	movs	r0, r5
 80015b4:	f000 f830 	bl	8001618 <__clzsi2>
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <__aeabi_i2d+0x6c>)
 80015ba:	1a1b      	subs	r3, r3, r0
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	0d5b      	lsrs	r3, r3, #21
 80015c0:	280a      	cmp	r0, #10
 80015c2:	dd15      	ble.n	80015f0 <__aeabi_i2d+0x4c>
 80015c4:	380b      	subs	r0, #11
 80015c6:	4085      	lsls	r5, r0
 80015c8:	2200      	movs	r2, #0
 80015ca:	032d      	lsls	r5, r5, #12
 80015cc:	0b2d      	lsrs	r5, r5, #12
 80015ce:	2100      	movs	r1, #0
 80015d0:	0010      	movs	r0, r2
 80015d2:	032d      	lsls	r5, r5, #12
 80015d4:	0d0a      	lsrs	r2, r1, #20
 80015d6:	0b2d      	lsrs	r5, r5, #12
 80015d8:	0512      	lsls	r2, r2, #20
 80015da:	432a      	orrs	r2, r5
 80015dc:	4d0d      	ldr	r5, [pc, #52]	; (8001614 <__aeabi_i2d+0x70>)
 80015de:	051b      	lsls	r3, r3, #20
 80015e0:	402a      	ands	r2, r5
 80015e2:	4313      	orrs	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	07e4      	lsls	r4, r4, #31
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	4323      	orrs	r3, r4
 80015ec:	0019      	movs	r1, r3
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	0002      	movs	r2, r0
 80015f2:	0029      	movs	r1, r5
 80015f4:	3215      	adds	r2, #21
 80015f6:	4091      	lsls	r1, r2
 80015f8:	000a      	movs	r2, r1
 80015fa:	210b      	movs	r1, #11
 80015fc:	1a08      	subs	r0, r1, r0
 80015fe:	40c5      	lsrs	r5, r0
 8001600:	032d      	lsls	r5, r5, #12
 8001602:	0b2d      	lsrs	r5, r5, #12
 8001604:	e7e3      	b.n	80015ce <__aeabi_i2d+0x2a>
 8001606:	2400      	movs	r4, #0
 8001608:	2300      	movs	r3, #0
 800160a:	2500      	movs	r5, #0
 800160c:	2200      	movs	r2, #0
 800160e:	e7de      	b.n	80015ce <__aeabi_i2d+0x2a>
 8001610:	0000041e 	.word	0x0000041e
 8001614:	800fffff 	.word	0x800fffff

08001618 <__clzsi2>:
 8001618:	211c      	movs	r1, #28
 800161a:	2301      	movs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	4298      	cmp	r0, r3
 8001620:	d301      	bcc.n	8001626 <__clzsi2+0xe>
 8001622:	0c00      	lsrs	r0, r0, #16
 8001624:	3910      	subs	r1, #16
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	4298      	cmp	r0, r3
 800162a:	d301      	bcc.n	8001630 <__clzsi2+0x18>
 800162c:	0a00      	lsrs	r0, r0, #8
 800162e:	3908      	subs	r1, #8
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	4298      	cmp	r0, r3
 8001634:	d301      	bcc.n	800163a <__clzsi2+0x22>
 8001636:	0900      	lsrs	r0, r0, #4
 8001638:	3904      	subs	r1, #4
 800163a:	a202      	add	r2, pc, #8	; (adr r2, 8001644 <__clzsi2+0x2c>)
 800163c:	5c10      	ldrb	r0, [r2, r0]
 800163e:	1840      	adds	r0, r0, r1
 8001640:	4770      	bx	lr
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	02020304 	.word	0x02020304
 8001648:	01010101 	.word	0x01010101
	...

08001654 <__clzdi2>:
 8001654:	b510      	push	{r4, lr}
 8001656:	2900      	cmp	r1, #0
 8001658:	d103      	bne.n	8001662 <__clzdi2+0xe>
 800165a:	f7ff ffdd 	bl	8001618 <__clzsi2>
 800165e:	3020      	adds	r0, #32
 8001660:	e002      	b.n	8001668 <__clzdi2+0x14>
 8001662:	1c08      	adds	r0, r1, #0
 8001664:	f7ff ffd8 	bl	8001618 <__clzsi2>
 8001668:	bd10      	pop	{r4, pc}
 800166a:	46c0      	nop			; (mov r8, r8)

0800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>:
// Created by Jason Kaufmann on 1/26/2021.
//

#define HANDSHAKE_DIGITALOUT_H

DigitalPin::DigitalPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	1dbb      	adds	r3, r7, #6
 8001678:	801a      	strh	r2, [r3, #0]
	_channel = GPIOx;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	601a      	str	r2, [r3, #0]
	_pinNumber = GPIO_Pin;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1dba      	adds	r2, r7, #6
 8001684:	8812      	ldrh	r2, [r2, #0]
 8001686:	809a      	strh	r2, [r3, #4]
}
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}

08001692 <_ZN10DigitalPin5writeEi>:

void DigitalPin::write(int setOrReset) {
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
        if (setOrReset) {
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <_ZN10DigitalPin5writeEi+0x22>
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_SET);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	0019      	movs	r1, r3
 80016ae:	f002 fb20 	bl	8003cf2 <HAL_GPIO_WritePin>
        } else {
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_RESET);
        }
    }
 80016b2:	e007      	b.n	80016c4 <_ZN10DigitalPin5writeEi+0x32>
            HAL_GPIO_WritePin(_channel, _pinNumber, GPIO_PIN_RESET);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	889b      	ldrh	r3, [r3, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	0019      	movs	r1, r3
 80016c0:	f002 fb17 	bl	8003cf2 <HAL_GPIO_WritePin>
    }
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_ZN10DigitalPin4readEv>:
GPIO_PinState DigitalPin::read(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
        return HAL_GPIO_ReadPin(_channel, _pinNumber);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	889b      	ldrh	r3, [r3, #4]
 80016dc:	0019      	movs	r1, r3
 80016de:	0010      	movs	r0, r2
 80016e0:	f002 faea 	bl	8003cb8 <HAL_GPIO_ReadPin>
 80016e4:	0003      	movs	r3, r0
    }
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt>:
#include "LCDController.h"
#include "main.h"
#include "string.h"
#include <string>

LCDController::LCDController(GPIO_TypeDef *GPIOx, uint16_t rsPin, uint16_t rwPin, uint16_t ePin,
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	0019      	movs	r1, r3
 80016fc:	1dbb      	adds	r3, r7, #6
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	1c0a      	adds	r2, r1, #0
 8001704:	801a      	strh	r2, [r3, #0]
        uint16_t db0Pin, uint16_t db1Pin, uint16_t db2Pin, uint16_t db3Pin,
        uint16_t db4Pin, uint16_t db5Pin, uint16_t db6Pin, uint16_t db7Pin) :
        LCDMapping{{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13},
                   {0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53},
                   {0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27},
                   {0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67}}
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	222e      	movs	r2, #46	; 0x2e
 800170a:	495c      	ldr	r1, [pc, #368]	; (800187c <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt+0x18c>)
 800170c:	189b      	adds	r3, r3, r2
 800170e:	2250      	movs	r2, #80	; 0x50
 8001710:	0018      	movs	r0, r3
 8001712:	f004 fbb2 	bl	8005e7a <memcpy>
{
	rs = new DigitalPin(GPIOx, rsPin);
 8001716:	2008      	movs	r0, #8
 8001718:	f004 fa7e 	bl	8005c18 <_Znwj>
 800171c:	0003      	movs	r3, r0
 800171e:	001c      	movs	r4, r3
 8001720:	1dbb      	adds	r3, r7, #6
 8001722:	881a      	ldrh	r2, [r3, #0]
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	0019      	movs	r1, r3
 8001728:	0020      	movs	r0, r4
 800172a:	f7ff ff9f 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	601c      	str	r4, [r3, #0]
	rw = new DigitalPin(GPIOx, rwPin);
 8001732:	2008      	movs	r0, #8
 8001734:	f004 fa70 	bl	8005c18 <_Znwj>
 8001738:	0003      	movs	r3, r0
 800173a:	001c      	movs	r4, r3
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	0019      	movs	r1, r3
 8001744:	0020      	movs	r0, r4
 8001746:	f7ff ff91 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	605c      	str	r4, [r3, #4]
	e = new DigitalPin(GPIOx, ePin);
 800174e:	2008      	movs	r0, #8
 8001750:	f004 fa62 	bl	8005c18 <_Znwj>
 8001754:	0003      	movs	r3, r0
 8001756:	001c      	movs	r4, r3
 8001758:	2320      	movs	r3, #32
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0019      	movs	r1, r3
 8001762:	0020      	movs	r0, r4
 8001764:	f7ff ff82 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	609c      	str	r4, [r3, #8]
	db0 = new DigitalPin(GPIOx, db0Pin);
 800176c:	2008      	movs	r0, #8
 800176e:	f004 fa53 	bl	8005c18 <_Znwj>
 8001772:	0003      	movs	r3, r0
 8001774:	001c      	movs	r4, r3
 8001776:	2324      	movs	r3, #36	; 0x24
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0019      	movs	r1, r3
 8001780:	0020      	movs	r0, r4
 8001782:	f7ff ff73 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	60dc      	str	r4, [r3, #12]
	db1 = new DigitalPin(GPIOx, db1Pin);
 800178a:	2008      	movs	r0, #8
 800178c:	f004 fa44 	bl	8005c18 <_Znwj>
 8001790:	0003      	movs	r3, r0
 8001792:	001c      	movs	r4, r3
 8001794:	2328      	movs	r3, #40	; 0x28
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	881a      	ldrh	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	0019      	movs	r1, r3
 800179e:	0020      	movs	r0, r4
 80017a0:	f7ff ff64 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	611c      	str	r4, [r3, #16]
	db2 = new DigitalPin(GPIOx, db2Pin);
 80017a8:	2008      	movs	r0, #8
 80017aa:	f004 fa35 	bl	8005c18 <_Znwj>
 80017ae:	0003      	movs	r3, r0
 80017b0:	001c      	movs	r4, r3
 80017b2:	232c      	movs	r3, #44	; 0x2c
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	0019      	movs	r1, r3
 80017bc:	0020      	movs	r0, r4
 80017be:	f7ff ff55 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	615c      	str	r4, [r3, #20]
	db3 = new DigitalPin(GPIOx, db3Pin);
 80017c6:	2008      	movs	r0, #8
 80017c8:	f004 fa26 	bl	8005c18 <_Znwj>
 80017cc:	0003      	movs	r3, r0
 80017ce:	001c      	movs	r4, r3
 80017d0:	2330      	movs	r3, #48	; 0x30
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	881a      	ldrh	r2, [r3, #0]
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	0019      	movs	r1, r3
 80017da:	0020      	movs	r0, r4
 80017dc:	f7ff ff46 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	619c      	str	r4, [r3, #24]
	db4 = new DigitalPin(GPIOx, db4Pin);
 80017e4:	2008      	movs	r0, #8
 80017e6:	f004 fa17 	bl	8005c18 <_Znwj>
 80017ea:	0003      	movs	r3, r0
 80017ec:	001c      	movs	r4, r3
 80017ee:	2334      	movs	r3, #52	; 0x34
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	881a      	ldrh	r2, [r3, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0019      	movs	r1, r3
 80017f8:	0020      	movs	r0, r4
 80017fa:	f7ff ff37 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	61dc      	str	r4, [r3, #28]
	db5 = new DigitalPin(GPIOx, db5Pin);
 8001802:	2008      	movs	r0, #8
 8001804:	f004 fa08 	bl	8005c18 <_Znwj>
 8001808:	0003      	movs	r3, r0
 800180a:	001c      	movs	r4, r3
 800180c:	2338      	movs	r3, #56	; 0x38
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	881a      	ldrh	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	0019      	movs	r1, r3
 8001816:	0020      	movs	r0, r4
 8001818:	f7ff ff28 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	621c      	str	r4, [r3, #32]
	db6 = new DigitalPin(GPIOx, db6Pin);
 8001820:	2008      	movs	r0, #8
 8001822:	f004 f9f9 	bl	8005c18 <_Znwj>
 8001826:	0003      	movs	r3, r0
 8001828:	001c      	movs	r4, r3
 800182a:	233c      	movs	r3, #60	; 0x3c
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	0019      	movs	r1, r3
 8001834:	0020      	movs	r0, r4
 8001836:	f7ff ff19 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	625c      	str	r4, [r3, #36]	; 0x24
	db7 = new DigitalPin(GPIOx, db7Pin);
 800183e:	2008      	movs	r0, #8
 8001840:	f004 f9ea 	bl	8005c18 <_Znwj>
 8001844:	0003      	movs	r3, r0
 8001846:	001c      	movs	r4, r3
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	881a      	ldrh	r2, [r3, #0]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	0019      	movs	r1, r3
 8001852:	0020      	movs	r0, r4
 8001854:	f7ff ff0a 	bl	800166c <_ZN10DigitalPinC1EP12GPIO_TypeDeft>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	629c      	str	r4, [r3, #40]	; 0x28

	font_bit = 0;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	222d      	movs	r2, #45	; 0x2d
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]
	lines_bit = 0;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	222c      	movs	r2, #44	; 0x2c
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

	HAL_Delay(50);          // LCD initialisation takes 40ms, be a little conservative.
 800186c:	2032      	movs	r0, #50	; 0x32
 800186e:	f001 fad3 	bl	8002e18 <HAL_Delay>

}
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b005      	add	sp, #20
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	08006760 	.word	0x08006760

08001880 <_ZN13LCDController4initEv>:

void LCDController::init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	e->write(0);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2100      	movs	r1, #0
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff feff 	bl	8001692 <_ZN10DigitalPin5writeEi>
	instruction(0x30);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2130      	movs	r1, #48	; 0x30
 8001898:	0018      	movs	r0, r3
 800189a:	f000 f90e 	bl	8001aba <_ZN13LCDController11instructionEh>
	HAL_Delay(30);
 800189e:	201e      	movs	r0, #30
 80018a0:	f001 faba 	bl	8002e18 <HAL_Delay>
	instruction(0x30);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2130      	movs	r1, #48	; 0x30
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 f906 	bl	8001aba <_ZN13LCDController11instructionEh>
	HAL_Delay(10);
 80018ae:	200a      	movs	r0, #10
 80018b0:	f001 fab2 	bl	8002e18 <HAL_Delay>
	instruction(0x30);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2130      	movs	r1, #48	; 0x30
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f8fe 	bl	8001aba <_ZN13LCDController11instructionEh>
	HAL_Delay(10);
 80018be:	200a      	movs	r0, #10
 80018c0:	f001 faaa 	bl	8002e18 <HAL_Delay>
	instruction(0x38);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2138      	movs	r1, #56	; 0x38
 80018c8:	0018      	movs	r0, r3
 80018ca:	f000 f8f6 	bl	8001aba <_ZN13LCDController11instructionEh>
	instruction(0x10);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2110      	movs	r1, #16
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 f8f1 	bl	8001aba <_ZN13LCDController11instructionEh>
	instruction(0x0c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	210c      	movs	r1, #12
 80018dc:	0018      	movs	r0, r3
 80018de:	f000 f8ec 	bl	8001aba <_ZN13LCDController11instructionEh>
	instruction(0x06);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2106      	movs	r1, #6
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 f8e7 	bl	8001aba <_ZN13LCDController11instructionEh>
	data(0x00); //need to burn one for some reason
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2100      	movs	r1, #0
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 f8d0 	bl	8001a96 <_ZN13LCDController4dataEh>
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}

080018fe <_ZN13LCDController9setCursorEii>:

void LCDController::setCursor(int x, int y) {
 80018fe:	b5b0      	push	{r4, r5, r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
    uint8_t index = LCDMapping[y][x];
 800190a:	2517      	movs	r5, #23
 800190c:	1979      	adds	r1, r7, r5
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	242e      	movs	r4, #46	; 0x2e
 8001914:	0013      	movs	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	189b      	adds	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	18c2      	adds	r2, r0, r3
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	18d3      	adds	r3, r2, r3
 8001922:	191b      	adds	r3, r3, r4
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	700b      	strb	r3, [r1, #0]
    instruction(0x80 | index);
 8001928:	197b      	adds	r3, r7, r5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	4252      	negs	r2, r2
 8001930:	4313      	orrs	r3, r2
 8001932:	b2da      	uxtb	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f000 f8be 	bl	8001aba <_ZN13LCDController11instructionEh>
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b006      	add	sp, #24
 8001944:	bdb0      	pop	{r4, r5, r7, pc}

08001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void LCDController::print(std::string sentence) {
 8001946:	b580      	push	{r7, lr}
 8001948:	b084      	sub	sp, #16
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
	for(int i=0; i < sentence.length(); i++) {
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	0018      	movs	r0, r3
 8001958:	f004 f9d0 	bl	8005cfc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800195c:	0002      	movs	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4293      	cmp	r3, r2
 8001962:	419b      	sbcs	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d015      	beq.n	8001998 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x52>
		char letter = sentence[i];
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	0011      	movs	r1, r2
 8001972:	0018      	movs	r0, r3
 8001974:	f004 f9c4 	bl	8005d00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001978:	0002      	movs	r2, r0
 800197a:	210b      	movs	r1, #11
 800197c:	187b      	adds	r3, r7, r1
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	701a      	strb	r2, [r3, #0]
		data((uint8_t)letter);
 8001982:	187b      	adds	r3, r7, r1
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f000 f883 	bl	8001a96 <_ZN13LCDController4dataEh>
	for(int i=0; i < sentence.length(); i++) {
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e7dd      	b.n	8001954 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe>
	}
}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZN13LCDController5writeEii>:

    instruction(32 | 16 | lines_bit | font_bit);
}


void LCDController::write(int c, int nrs) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
    int old_rs = rs->read();
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff fe8b 	bl	80016cc <_ZN10DigitalPin4readEv>
 80019b6:	0003      	movs	r3, r0
 80019b8:	617b      	str	r3, [r7, #20]

    db0->write(c & 1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	68d8      	ldr	r0, [r3, #12]
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	f7ff fe64 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db1->write(c>>1 & 1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6918      	ldr	r0, [r3, #16]
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	105b      	asrs	r3, r3, #1
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	f7ff fe5b 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db2->write(c>>2 & 1);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6958      	ldr	r0, [r3, #20]
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	109b      	asrs	r3, r3, #2
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	f7ff fe52 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db3->write(c>>3 & 1);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6998      	ldr	r0, [r3, #24]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	10db      	asrs	r3, r3, #3
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	f7ff fe49 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db4->write(c>>4 & 1);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	69d8      	ldr	r0, [r3, #28]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	111b      	asrs	r3, r3, #4
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	f7ff fe40 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db5->write(c>>5 & 1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6a18      	ldr	r0, [r3, #32]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	115b      	asrs	r3, r3, #5
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	f7ff fe37 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db6->write(c>>6 & 1);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	119b      	asrs	r3, r3, #6
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	f7ff fe2e 	bl	8001692 <_ZN10DigitalPin5writeEi>
	db7->write(c>>7 & 1);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	11db      	asrs	r3, r3, #7
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	f7ff fe25 	bl	8001692 <_ZN10DigitalPin5writeEi>

    // Should check Busy Flag here.
    rs->write(nrs);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	0011      	movs	r1, r2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff fe1e 	bl	8001692 <_ZN10DigitalPin5writeEi>
    rw->write(0);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fe18 	bl	8001692 <_ZN10DigitalPin5writeEi>

    e->write(1);  // E must be on for min 480ns then drop to zero.  Trigger is on falling signal.
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2101      	movs	r1, #1
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fe12 	bl	8001692 <_ZN10DigitalPin5writeEi>

    // added extra wait state
    HAL_Delay(1);  // Needed the equivalent of this on the Raspberry Pi.
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f001 f9d2 	bl	8002e18 <HAL_Delay>

    // Tdsw Data Setup Width time at least 80ns.  No need for delay on slow processor.
    e->write(0); //
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2100      	movs	r1, #0
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fe09 	bl	8001692 <_ZN10DigitalPin5writeEi>
    rs->write(old_rs);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	0011      	movs	r1, r2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fe02 	bl	8001692 <_ZN10DigitalPin5writeEi>
}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b006      	add	sp, #24
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <_ZN13LCDController4dataEh>:

void LCDController::data(uint8_t c) {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	000a      	movs	r2, r1
 8001aa0:	1cfb      	adds	r3, r7, #3
 8001aa2:	701a      	strb	r2, [r3, #0]
    write(c, 1);
 8001aa4:	1cfb      	adds	r3, r7, #3
 8001aa6:	7819      	ldrb	r1, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff ff77 	bl	80019a0 <_ZN13LCDController5writeEii>
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZN13LCDController11instructionEh>:
void LCDController::instruction(uint8_t c) {
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	000a      	movs	r2, r1
 8001ac4:	1cfb      	adds	r3, r7, #3
 8001ac6:	701a      	strb	r2, [r3, #0]
    write(c, 0);
 8001ac8:	1cfb      	adds	r3, r7, #3
 8001aca:	7819      	ldrb	r1, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ff65 	bl	80019a0 <_ZN13LCDController5writeEii>
}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_ZN13LCDController5clearEv>:

void LCDController::clear(void) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
    instruction(1);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff ffe5 	bl	8001aba <_ZN13LCDController11instructionEh>
    delayMicroseconds(1520); // clear takes 1.52 ms.
 8001af0:	23be      	movs	r3, #190	; 0xbe
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	0018      	movs	r0, r3
 8001af6:	f000 fdb9 	bl	800266c <delayMicroseconds>
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZN13LCDController4homeEv>:
void LCDController::home(void) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
    instruction(2);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f7ff ffd3 	bl	8001aba <_ZN13LCDController11instructionEh>
    delayMicroseconds(1520); // home takes 1.52 ms.
 8001b14:	23be      	movs	r3, #190	; 0xbe
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fda7 	bl	800266c <delayMicroseconds>
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <_ZNSt7__cxx119to_stringEi>:
  // NB: (v)snprintf vs sprintf.

  // DR 1261.
  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
					   "%d", __val); }
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_ZNSt7__cxx119to_stringEi+0x24>)
 8001b36:	4906      	ldr	r1, [pc, #24]	; (8001b50 <_ZNSt7__cxx119to_stringEi+0x28>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	2210      	movs	r2, #16
 8001b40:	f000 fc7a 	bl	8002438 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080067b0 	.word	0x080067b0
 8001b50:	08006125 	.word	0x08006125

08001b54 <_ZSt6lroundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	1c18      	adds	r0, r3, #0
 8001b60:	f004 f911 	bl	8005d86 <lroundf>
 8001b64:	0003      	movs	r3, r0
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <CppMain>:
int calculateScore();
int map(int x, int in_min, int in_max, int out_min, int out_max);
int numDigits(int x) ;
/*********************************/

void CppMain() {
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b0ef      	sub	sp, #444	; 0x1bc
 8001b74:	af1c      	add	r7, sp, #112	; 0x70

	LCDController myLCD(GPIOB, GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13,
	                GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9,
	                GPIO_PIN_8, GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_5);
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	01d9      	lsls	r1, r3, #7
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	021a      	lsls	r2, r3, #8
 8001b7e:	4caa      	ldr	r4, [pc, #680]	; (8001e28 <CppMain+0x2b8>)
 8001b80:	0038      	movs	r0, r7
 8001b82:	2320      	movs	r3, #32
 8001b84:	9308      	str	r3, [sp, #32]
 8001b86:	2340      	movs	r3, #64	; 0x40
 8001b88:	9307      	str	r3, [sp, #28]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	9306      	str	r3, [sp, #24]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	9305      	str	r3, [sp, #20]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	9304      	str	r3, [sp, #16]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	9303      	str	r3, [sp, #12]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	015b      	lsls	r3, r3, #5
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	019b      	lsls	r3, r3, #6
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	000b      	movs	r3, r1
 8001bb4:	0021      	movs	r1, r4
 8001bb6:	f7ff fd9b 	bl	80016f0 <_ZN13LCDControllerC1EP12GPIO_TypeDefttttttttttt>

    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_SET); //keep alive. Do not write low or it will turn off
 8001bba:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <CppMain+0x2b8>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2110      	movs	r1, #16
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f002 f896 	bl	8003cf2 <HAL_GPIO_WritePin>

    startUpLCD(myLCD); //turn on LCD, clear the screen, and home it
 8001bc6:	4b99      	ldr	r3, [pc, #612]	; (8001e2c <CppMain+0x2bc>)
 8001bc8:	26a4      	movs	r6, #164	; 0xa4
 8001bca:	0076      	lsls	r6, r6, #1
 8001bcc:	19ba      	adds	r2, r7, r6
 8001bce:	18d4      	adds	r4, r2, r3
 8001bd0:	466b      	mov	r3, sp
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	0023      	movs	r3, r4
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	2270      	movs	r2, #112	; 0x70
 8001bda:	0019      	movs	r1, r3
 8001bdc:	f004 f94d 	bl	8005e7a <memcpy>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	6861      	ldr	r1, [r4, #4]
 8001be4:	68a2      	ldr	r2, [r4, #8]
 8001be6:	68e3      	ldr	r3, [r4, #12]
 8001be8:	f000 fb92 	bl	8002310 <_Z10startUpLCD13LCDController>

    calibrateSensors(); //get the current room illumination as a baseline
 8001bec:	f000 fb26 	bl	800223c <_Z16calibrateSensorsv>

    myLCD.clear();
 8001bf0:	003b      	movs	r3, r7
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7ff ff73 	bl	8001ade <_ZN13LCDController5clearEv>
    myLCD.setCursor(7,0);
 8001bf8:	003b      	movs	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2107      	movs	r1, #7
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff fe7d 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("READY");
 8001c04:	2498      	movs	r4, #152	; 0x98
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f004 f81d 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001c0e:	193a      	adds	r2, r7, r4
 8001c10:	4987      	ldr	r1, [pc, #540]	; (8001e30 <CppMain+0x2c0>)
 8001c12:	2580      	movs	r5, #128	; 0x80
 8001c14:	197b      	adds	r3, r7, r5
 8001c16:	0018      	movs	r0, r3
 8001c18:	f004 f89c 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c1c:	197a      	adds	r2, r7, r5
 8001c1e:	003b      	movs	r3, r7
 8001c20:	0011      	movs	r1, r2
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff fe8f 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c28:	197b      	adds	r3, r7, r5
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f004 f860 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	0018      	movs	r0, r3
 8001c34:	f004 f809 	bl	8005c4a <_ZNSaIcED1Ev>
    myLCD.setCursor(4,2);
 8001c38:	003b      	movs	r3, r7
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7ff fe5d 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("Aim at Target");
 8001c44:	24b4      	movs	r4, #180	; 0xb4
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f003 fffd 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001c4e:	193a      	adds	r2, r7, r4
 8001c50:	4978      	ldr	r1, [pc, #480]	; (8001e34 <CppMain+0x2c4>)
 8001c52:	259c      	movs	r5, #156	; 0x9c
 8001c54:	197b      	adds	r3, r7, r5
 8001c56:	0018      	movs	r0, r3
 8001c58:	f004 f87c 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c5c:	197a      	adds	r2, r7, r5
 8001c5e:	003b      	movs	r3, r7
 8001c60:	0011      	movs	r1, r2
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff fe6f 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c68:	197b      	adds	r3, r7, r5
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f004 f840 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	0018      	movs	r0, r3
 8001c74:	f003 ffe9 	bl	8005c4a <_ZNSaIcED1Ev>
    myLCD.setCursor(3,3);
 8001c78:	003b      	movs	r3, r7
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff fe3d 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("for 10 seconds");
 8001c84:	24d0      	movs	r4, #208	; 0xd0
 8001c86:	193b      	adds	r3, r7, r4
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f003 ffdd 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001c8e:	193a      	adds	r2, r7, r4
 8001c90:	4969      	ldr	r1, [pc, #420]	; (8001e38 <CppMain+0x2c8>)
 8001c92:	25b8      	movs	r5, #184	; 0xb8
 8001c94:	197b      	adds	r3, r7, r5
 8001c96:	0018      	movs	r0, r3
 8001c98:	f004 f85c 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c9c:	197a      	adds	r2, r7, r5
 8001c9e:	003b      	movs	r3, r7
 8001ca0:	0011      	movs	r1, r2
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fe4f 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ca8:	197b      	adds	r3, r7, r5
 8001caa:	0018      	movs	r0, r3
 8001cac:	f004 f820 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cb0:	193b      	adds	r3, r7, r4
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f003 ffc9 	bl	8005c4a <_ZNSaIcED1Ev>

    waitForLaser(); //wait until the laser hits one of the rings to start the test
 8001cb8:	f000 fa46 	bl	8002148 <_Z12waitForLaserv>

    myLCD.clear();
 8001cbc:	003b      	movs	r3, r7
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f7ff ff0d 	bl	8001ade <_ZN13LCDController5clearEv>
    myLCD.setCursor(0,0);
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2100      	movs	r1, #0
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff fe17 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("HOLD STEADY");
 8001cd0:	24ec      	movs	r4, #236	; 0xec
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f003 ffb7 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001cda:	193a      	adds	r2, r7, r4
 8001cdc:	4957      	ldr	r1, [pc, #348]	; (8001e3c <CppMain+0x2cc>)
 8001cde:	25d4      	movs	r5, #212	; 0xd4
 8001ce0:	197b      	adds	r3, r7, r5
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f004 f836 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ce8:	197a      	adds	r2, r7, r5
 8001cea:	003b      	movs	r3, r7
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fe29 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001cf4:	197b      	adds	r3, r7, r5
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f003 fffa 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f003 ffa3 	bl	8005c4a <_ZNSaIcED1Ev>

    runTest(myLCD);
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <CppMain+0x2bc>)
 8001d06:	19ba      	adds	r2, r7, r6
 8001d08:	18d4      	adds	r4, r2, r3
 8001d0a:	466b      	mov	r3, sp
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	0023      	movs	r3, r4
 8001d10:	3310      	adds	r3, #16
 8001d12:	2270      	movs	r2, #112	; 0x70
 8001d14:	0019      	movs	r1, r3
 8001d16:	f004 f8b0 	bl	8005e7a <memcpy>
 8001d1a:	6820      	ldr	r0, [r4, #0]
 8001d1c:	6861      	ldr	r1, [r4, #4]
 8001d1e:	68a2      	ldr	r2, [r4, #8]
 8001d20:	68e3      	ldr	r3, [r4, #12]
 8001d22:	f000 f893 	bl	8001e4c <_Z7runTest13LCDController>

    int scorePercentage = calculateScore();
 8001d26:	f000 f9cb 	bl	80020c0 <_Z14calculateScorev>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	24a2      	movs	r4, #162	; 0xa2
 8001d2e:	0064      	lsls	r4, r4, #1
 8001d30:	193a      	adds	r2, r7, r4
 8001d32:	6013      	str	r3, [r2, #0]

    myLCD.clear();
 8001d34:	003b      	movs	r3, r7
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff fed1 	bl	8001ade <_ZN13LCDController5clearEv>
    myLCD.setCursor(0,0);
 8001d3c:	003b      	movs	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff fddb 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("Score: ");
 8001d48:	2584      	movs	r5, #132	; 0x84
 8001d4a:	006d      	lsls	r5, r5, #1
 8001d4c:	197b      	adds	r3, r7, r5
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f003 ff7a 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001d54:	197a      	adds	r2, r7, r5
 8001d56:	493a      	ldr	r1, [pc, #232]	; (8001e40 <CppMain+0x2d0>)
 8001d58:	26f0      	movs	r6, #240	; 0xf0
 8001d5a:	19bb      	adds	r3, r7, r6
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f003 fff9 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d62:	19ba      	adds	r2, r7, r6
 8001d64:	003b      	movs	r3, r7
 8001d66:	0011      	movs	r1, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff fdec 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d6e:	19bb      	adds	r3, r7, r6
 8001d70:	0018      	movs	r0, r3
 8001d72:	f003 ffbd 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d76:	197b      	adds	r3, r7, r5
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f003 ff66 	bl	8005c4a <_ZNSaIcED1Ev>
    myLCD.setCursor(0,3);
 8001d7e:	003b      	movs	r3, r7
 8001d80:	2203      	movs	r2, #3
 8001d82:	2100      	movs	r1, #0
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff fdba 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print(std::to_string(scorePercentage));
 8001d8a:	2586      	movs	r5, #134	; 0x86
 8001d8c:	006d      	lsls	r5, r5, #1
 8001d8e:	197b      	adds	r3, r7, r5
 8001d90:	193a      	adds	r2, r7, r4
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	0011      	movs	r1, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fec6 	bl	8001b28 <_ZNSt7__cxx119to_stringEi>
 8001d9c:	197a      	adds	r2, r7, r5
 8001d9e:	003b      	movs	r3, r7
 8001da0:	0011      	movs	r1, r2
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fdcf 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001da8:	197b      	adds	r3, r7, r5
 8001daa:	0018      	movs	r0, r3
 8001dac:	f003 ffa0 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    int digits = numDigits(scorePercentage);
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0018      	movs	r0, r3
 8001db6:	f000 fb2c 	bl	8002412 <_Z9numDigitsi>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	22a0      	movs	r2, #160	; 0xa0
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	18b9      	adds	r1, r7, r2
 8001dc2:	600b      	str	r3, [r1, #0]
    myLCD.setCursor(digits,3);
 8001dc4:	18bb      	adds	r3, r7, r2
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	003b      	movs	r3, r7
 8001dca:	2203      	movs	r2, #3
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fd96 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print("%");
 8001dd2:	249e      	movs	r4, #158	; 0x9e
 8001dd4:	0064      	lsls	r4, r4, #1
 8001dd6:	193b      	adds	r3, r7, r4
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f003 ff35 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001dde:	193a      	adds	r2, r7, r4
 8001de0:	4918      	ldr	r1, [pc, #96]	; (8001e44 <CppMain+0x2d4>)
 8001de2:	2592      	movs	r5, #146	; 0x92
 8001de4:	006d      	lsls	r5, r5, #1
 8001de6:	197b      	adds	r3, r7, r5
 8001de8:	0018      	movs	r0, r3
 8001dea:	f003 ffb3 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dee:	197a      	adds	r2, r7, r5
 8001df0:	003b      	movs	r3, r7
 8001df2:	0011      	movs	r1, r2
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff fda6 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001dfa:	197b      	adds	r3, r7, r5
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f003 ff77 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e02:	193b      	adds	r3, r7, r4
 8001e04:	0018      	movs	r0, r3
 8001e06:	f003 ff20 	bl	8005c4a <_ZNSaIcED1Ev>

    HAL_Delay(5000); //wait for 5 seconds for doctor to record score
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <CppMain+0x2d8>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f001 f803 	bl	8002e18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET); //auto-shutoff
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <CppMain+0x2b8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	2110      	movs	r1, #16
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f001 ff6a 	bl	8003cf2 <HAL_GPIO_WritePin>
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b053      	add	sp, #332	; 0x14c
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	fffffeb8 	.word	0xfffffeb8
 8001e30:	080067b4 	.word	0x080067b4
 8001e34:	080067bc 	.word	0x080067bc
 8001e38:	080067cc 	.word	0x080067cc
 8001e3c:	080067dc 	.word	0x080067dc
 8001e40:	080067e8 	.word	0x080067e8
 8001e44:	080067f0 	.word	0x080067f0
 8001e48:	00001388 	.word	0x00001388

08001e4c <_Z7runTest13LCDController>:

void runTest(LCDController myLCD) {
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e50:	b0b5      	sub	sp, #212	; 0xd4
 8001e52:	af14      	add	r7, sp, #80	; 0x50
 8001e54:	2490      	movs	r4, #144	; 0x90
 8001e56:	0025      	movs	r5, r4
 8001e58:	2608      	movs	r6, #8
 8001e5a:	46b4      	mov	ip, r6
 8001e5c:	44bc      	add	ip, r7
 8001e5e:	4464      	add	r4, ip
 8001e60:	6020      	str	r0, [r4, #0]
 8001e62:	6061      	str	r1, [r4, #4]
 8001e64:	60a2      	str	r2, [r4, #8]
 8001e66:	60e3      	str	r3, [r4, #12]

    myLCD.setCursor(2,2);
 8001e68:	002c      	movs	r4, r5
 8001e6a:	2608      	movs	r6, #8
 8001e6c:	19bb      	adds	r3, r7, r6
 8001e6e:	191b      	adds	r3, r3, r4
 8001e70:	2202      	movs	r2, #2
 8001e72:	2102      	movs	r1, #2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff fd42 	bl	80018fe <_ZN13LCDController9setCursorEii>
    myLCD.print(" seconds remaining");
 8001e7a:	2518      	movs	r5, #24
 8001e7c:	197b      	adds	r3, r7, r5
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f003 fee2 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001e84:	197a      	adds	r2, r7, r5
 8001e86:	4983      	ldr	r1, [pc, #524]	; (8002094 <_Z7runTest13LCDController+0x248>)
 8001e88:	003b      	movs	r3, r7
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f003 ff62 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e90:	003b      	movs	r3, r7
 8001e92:	19ba      	adds	r2, r7, r6
 8001e94:	1912      	adds	r2, r2, r4
 8001e96:	0019      	movs	r1, r3
 8001e98:	0010      	movs	r0, r2
 8001e9a:	f7ff fd54 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f003 ff25 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ea6:	197b      	adds	r3, r7, r5
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f003 fece 	bl	8005c4a <_ZNSaIcED1Ev>

    uint32_t start = HAL_GetTick();
 8001eae:	f000 ffa9 	bl	8002e04 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	667b      	str	r3, [r7, #100]	; 0x64
    uint32_t countDown, codeRunTime, delayTime; int previousValue = -1; int greatestDiff, ringChoice;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	425b      	negs	r3, r3
 8001eba:	67fb      	str	r3, [r7, #124]	; 0x7c
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8001ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ec2:	2bfa      	cmp	r3, #250	; 0xfa
 8001ec4:	dd00      	ble.n	8001ec8 <_Z7runTest13LCDController+0x7c>
 8001ec6:	e0de      	b.n	8002086 <_Z7runTest13LCDController+0x23a>
        countDown = HAL_GetTick();
 8001ec8:	f000 ff9c 	bl	8002e04 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
        timeRemaining = testDuration - (float)(countDown-start)/1000.0f; //Time remaining in seconds
 8001ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7fe ffaa 	bl	8000e30 <__aeabi_ui2f>
 8001edc:	1c03      	adds	r3, r0, #0
 8001ede:	496e      	ldr	r1, [pc, #440]	; (8002098 <_Z7runTest13LCDController+0x24c>)
 8001ee0:	1c18      	adds	r0, r3, #0
 8001ee2:	f7fe fbe9 	bl	80006b8 <__aeabi_fdiv>
 8001ee6:	1c03      	adds	r3, r0, #0
 8001ee8:	1c19      	adds	r1, r3, #0
 8001eea:	486c      	ldr	r0, [pc, #432]	; (800209c <_Z7runTest13LCDController+0x250>)
 8001eec:	f7fe fdbc 	bl	8000a68 <__aeabi_fsub>
 8001ef0:	1c03      	adds	r3, r0, #0
 8001ef2:	1c1a      	adds	r2, r3, #0
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <_Z7runTest13LCDController+0x254>)
 8001ef6:	601a      	str	r2, [r3, #0]
        greatestDiff = 0; ringChoice = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001efc:	2300      	movs	r3, #0
 8001efe:	677b      	str	r3, [r7, #116]	; 0x74
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 8001f00:	2300      	movs	r3, #0
 8001f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	dc2e      	bgt.n	8001f68 <_Z7runTest13LCDController+0x11c>
        	int analogValue = (int)((readADC(hadc,analogReadPins[i]) / norm) - calibrationForEachRing[i]); //Reading and recording sensor value
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <_Z7runTest13LCDController+0x258>)
 8001f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	58d3      	ldr	r3, [r2, r3]
 8001f12:	4c65      	ldr	r4, [pc, #404]	; (80020a8 <_Z7runTest13LCDController+0x25c>)
 8001f14:	9313      	str	r3, [sp, #76]	; 0x4c
 8001f16:	466b      	mov	r3, sp
 8001f18:	0018      	movs	r0, r3
 8001f1a:	0023      	movs	r3, r4
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	224c      	movs	r2, #76	; 0x4c
 8001f20:	0019      	movs	r1, r3
 8001f22:	f003 ffaa 	bl	8005e7a <memcpy>
 8001f26:	6820      	ldr	r0, [r4, #0]
 8001f28:	6861      	ldr	r1, [r4, #4]
 8001f2a:	68a2      	ldr	r2, [r4, #8]
 8001f2c:	68e3      	ldr	r3, [r4, #12]
 8001f2e:	f000 fa0d 	bl	800234c <_Z7readADC19__ADC_HandleTypeDefm>
 8001f32:	0002      	movs	r2, r0
 8001f34:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <_Z7runTest13LCDController+0x260>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0019      	movs	r1, r3
 8001f3a:	0010      	movs	r0, r2
 8001f3c:	f7fe f8ec 	bl	8000118 <__udivsi3>
 8001f40:	0003      	movs	r3, r0
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <_Z7runTest13LCDController+0x264>)
 8001f46:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	58d3      	ldr	r3, [r2, r3]
 8001f4c:	1acb      	subs	r3, r1, r3
 8001f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
        	if (analogValue > greatestDiff) {
 8001f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dd03      	ble.n	8001f60 <_Z7runTest13LCDController+0x114>
                greatestDiff = analogValue;
 8001f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5a:	67bb      	str	r3, [r7, #120]	; 0x78
                ringChoice = i;
 8001f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f5e:	677b      	str	r3, [r7, #116]	; 0x74
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 8001f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f62:	3301      	adds	r3, #1
 8001f64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f66:	e7cd      	b.n	8001f04 <_Z7runTest13LCDController+0xb8>
            }
        }
        for (int i = 0; i <= (numRings-1); i++) {
 8001f68:	2300      	movs	r3, #0
 8001f6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	dc1a      	bgt.n	8001fa8 <_Z7runTest13LCDController+0x15c>
        	sensorValues[j][i] = 0;
 8001f72:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <_Z7runTest13LCDController+0x268>)
 8001f74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f76:	0091      	lsls	r1, r2, #2
 8001f78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f7a:	188a      	adds	r2, r1, r2
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	2100      	movs	r1, #0
 8001f80:	50d1      	str	r1, [r2, r3]
			if(greatestDiff > 50 && ringChoice == i) {
 8001f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f84:	2b32      	cmp	r3, #50	; 0x32
 8001f86:	dd0b      	ble.n	8001fa0 <_Z7runTest13LCDController+0x154>
 8001f88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <_Z7runTest13LCDController+0x154>
				sensorValues[j][i] = 1;
 8001f90:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <_Z7runTest13LCDController+0x268>)
 8001f92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f94:	0091      	lsls	r1, r2, #2
 8001f96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f98:	188a      	adds	r2, r1, r2
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i <= (numRings-1); i++) {
 8001fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fa6:	e7e1      	b.n	8001f6c <_Z7runTest13LCDController+0x120>
			}
        }

        /*** print out the time remaining if the test is not done ***/
        if  (timeRemaining > 0) {
 8001fa8:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <_Z7runTest13LCDController+0x254>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2100      	movs	r1, #0
 8001fae:	1c18      	adds	r0, r3, #0
 8001fb0:	f7fe fa8c 	bl	80004cc <__aeabi_fcmpgt>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d04b      	beq.n	8002050 <_Z7runTest13LCDController+0x204>
            int roundTime = lround(timeRemaining);
 8001fb8:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <_Z7runTest13LCDController+0x254>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	1c18      	adds	r0, r3, #0
 8001fbe:	f7ff fdc9 	bl	8001b54 <_ZSt6lroundf>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	65bb      	str	r3, [r7, #88]	; 0x58
            if (roundTime != previousValue) {
 8001fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d03e      	beq.n	800204c <_Z7runTest13LCDController+0x200>
                myLCD.setCursor(0, 2);
 8001fce:	2490      	movs	r4, #144	; 0x90
 8001fd0:	2608      	movs	r6, #8
 8001fd2:	19bb      	adds	r3, r7, r6
 8001fd4:	191b      	adds	r3, r3, r4
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	2100      	movs	r1, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff fc8f 	bl	80018fe <_ZN13LCDController9setCursorEii>
                myLCD.print("  ");
 8001fe0:	2534      	movs	r5, #52	; 0x34
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f003 fe2f 	bl	8005c48 <_ZNSaIcEC1Ev>
 8001fea:	197a      	adds	r2, r7, r5
 8001fec:	4932      	ldr	r1, [pc, #200]	; (80020b8 <_Z7runTest13LCDController+0x26c>)
 8001fee:	261c      	movs	r6, #28
 8001ff0:	19bb      	adds	r3, r7, r6
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f003 feae 	bl	8005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ff8:	19bb      	adds	r3, r7, r6
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	18b9      	adds	r1, r7, r2
 8001ffe:	190a      	adds	r2, r1, r4
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f7ff fc9f 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002008:	19bb      	adds	r3, r7, r6
 800200a:	0018      	movs	r0, r3
 800200c:	f003 fe70 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002010:	197b      	adds	r3, r7, r5
 8002012:	0018      	movs	r0, r3
 8002014:	f003 fe19 	bl	8005c4a <_ZNSaIcED1Ev>
                myLCD.setCursor(0, 2);
 8002018:	2608      	movs	r6, #8
 800201a:	19bb      	adds	r3, r7, r6
 800201c:	191b      	adds	r3, r3, r4
 800201e:	2202      	movs	r2, #2
 8002020:	2100      	movs	r1, #0
 8002022:	0018      	movs	r0, r3
 8002024:	f7ff fc6b 	bl	80018fe <_ZN13LCDController9setCursorEii>
                myLCD.print(std::to_string(roundTime));
 8002028:	2538      	movs	r5, #56	; 0x38
 800202a:	197b      	adds	r3, r7, r5
 800202c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff fd79 	bl	8001b28 <_ZNSt7__cxx119to_stringEi>
 8002036:	197b      	adds	r3, r7, r5
 8002038:	19ba      	adds	r2, r7, r6
 800203a:	1912      	adds	r2, r2, r4
 800203c:	0019      	movs	r1, r3
 800203e:	0010      	movs	r0, r2
 8002040:	f7ff fc81 	bl	8001946 <_ZN13LCDController5printENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002044:	197b      	adds	r3, r7, r5
 8002046:	0018      	movs	r0, r3
 8002048:	f003 fe52 	bl	8005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
            }
            previousValue = roundTime;
 800204c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800204e:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        
        codeRunTime = HAL_GetTick();
 8002050:	f000 fed8 	bl	8002e04 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	657b      	str	r3, [r7, #84]	; 0x54

        //adjust the delay for the next sample depending on the time it took the
        //above code to run
        if ((codeRunTime-countDown) > period) {
 8002058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <_Z7runTest13LCDController+0x270>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d80e      	bhi.n	8002084 <_Z7runTest13LCDController+0x238>
        	return;
        } else {
        	 delayTime = period-(codeRunTime-countDown);
 8002066:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	4b13      	ldr	r3, [pc, #76]	; (80020bc <_Z7runTest13LCDController+0x270>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	18d3      	adds	r3, r2, r3
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
        	 HAL_Delay(delayTime); //Wait for the period to sample again
 8002074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fece 	bl	8002e18 <HAL_Delay>
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 800207c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207e:	3301      	adds	r3, #1
 8002080:	673b      	str	r3, [r7, #112]	; 0x70
 8002082:	e71d      	b.n	8001ec0 <_Z7runTest13LCDController+0x74>
        	return;
 8002084:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8002086:	46bd      	mov	sp, r7
 8002088:	b021      	add	sp, #132	; 0x84
 800208a:	bcf0      	pop	{r4, r5, r6, r7}
 800208c:	bc08      	pop	{r3}
 800208e:	b004      	add	sp, #16
 8002090:	4718      	bx	r3
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	080067f4 	.word	0x080067f4
 8002098:	447a0000 	.word	0x447a0000
 800209c:	41200000 	.word	0x41200000
 80020a0:	20001064 	.word	0x20001064
 80020a4:	20000004 	.word	0x20000004
 80020a8:	20001444 	.word	0x20001444
 80020ac:	20000024 	.word	0x20000024
 80020b0:	20001054 	.word	0x20001054
 80020b4:	200000b4 	.word	0x200000b4
 80020b8:	08006808 	.word	0x08006808
 80020bc:	20000000 	.word	0x20000000

080020c0 <_Z14calculateScorev>:

int calculateScore() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af02      	add	r7, sp, #8
	int score = 0; //Initializing score variable
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2bfa      	cmp	r3, #250	; 0xfa
 80020d2:	dc1b      	bgt.n	800210c <_Z14calculateScorev+0x4c>
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	dc12      	bgt.n	8002104 <_Z14calculateScorev+0x44>
            score = score + w[i]*sensorValues[j][i]; //muliple by appropriate weighting factor for each ring
 80020de:	4b18      	ldr	r3, [pc, #96]	; (8002140 <_Z14calculateScorev+0x80>)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	58d3      	ldr	r3, [r2, r3]
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <_Z14calculateScorev+0x84>)
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	0088      	lsls	r0, r1, #2
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	1841      	adds	r1, r0, r1
 80020f0:	0089      	lsls	r1, r1, #2
 80020f2:	588a      	ldr	r2, [r1, r2]
 80020f4:	4353      	muls	r3, r2
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i <= (numRings-1); i++) { //For each sensor
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3301      	adds	r3, #1
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	e7e9      	b.n	80020d8 <_Z14calculateScorev+0x18>
    for (int j = 0; j <= numSamples; j++) { //For each sample (moving through time)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	3301      	adds	r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	e7e0      	b.n	80020ce <_Z14calculateScorev+0xe>
        }
    }
    int scaledScore = map(score,0,1000,0,100); //map the score from 0 to 100%
 800210c:	23fa      	movs	r3, #250	; 0xfa
 800210e:	009a      	lsls	r2, r3, #2
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	2100      	movs	r1, #0
 800211a:	f000 f95d 	bl	80023d8 <_Z3mapiiiii>
 800211e:	0003      	movs	r3, r0
 8002120:	603b      	str	r3, [r7, #0]
    if (scaledScore < 0) {
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	da01      	bge.n	800212c <_Z14calculateScorev+0x6c>
        return 0;
 8002128:	2300      	movs	r3, #0
 800212a:	e005      	b.n	8002138 <_Z14calculateScorev+0x78>
    } else if (scaledScore > 100) {
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	dd01      	ble.n	8002136 <_Z14calculateScorev+0x76>
        return 100;
 8002132:	2364      	movs	r3, #100	; 0x64
 8002134:	e000      	b.n	8002138 <_Z14calculateScorev+0x78>
    } else {
        return scaledScore;
 8002136:	683b      	ldr	r3, [r7, #0]
    }

}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b004      	add	sp, #16
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000014 	.word	0x20000014
 8002144:	200000b4 	.word	0x200000b4

08002148 <_Z12waitForLaserv>:


void waitForLaser() {
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b096      	sub	sp, #88	; 0x58
 800214c:	af14      	add	r7, sp, #80	; 0x50
    while (isReady < 1.25*calibration) { //While the average reading from all sensors is less than 125% of the calibration read
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <_Z12waitForLaserv+0xd4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff fa26 	bl	80015a4 <__aeabi_i2d>
 8002158:	0004      	movs	r4, r0
 800215a:	000d      	movs	r5, r1
 800215c:	4b30      	ldr	r3, [pc, #192]	; (8002220 <_Z12waitForLaserv+0xd8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff fa1f 	bl	80015a4 <__aeabi_i2d>
 8002166:	2200      	movs	r2, #0
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <_Z12waitForLaserv+0xdc>)
 800216a:	f7fe ffa9 	bl	80010c0 <__aeabi_dmul>
 800216e:	0002      	movs	r2, r0
 8002170:	000b      	movs	r3, r1
 8002172:	0020      	movs	r0, r4
 8002174:	0029      	movs	r1, r5
 8002176:	f7fe f95b 	bl	8000430 <__aeabi_dcmplt>
 800217a:	1e03      	subs	r3, r0, #0
 800217c:	d100      	bne.n	8002180 <_Z12waitForLaserv+0x38>
        countUp++;
        if (countUp > 500) {
            HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET); //turn off if accidentally turned on
        }
    }
}
 800217e:	e049      	b.n	8002214 <_Z12waitForLaserv+0xcc>
        isReady = 0; //Sets variable back to zero each time through the while loop
 8002180:	4b26      	ldr	r3, [pc, #152]	; (800221c <_Z12waitForLaserv+0xd4>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	dc2f      	bgt.n	80021f0 <_Z12waitForLaserv+0xa8>
            int value = (int)(readADC(hadc, analogReadPins[i])) / norm;//Read each sensor
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <_Z12waitForLaserv+0xe0>)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	58d3      	ldr	r3, [r2, r3]
 8002198:	4c24      	ldr	r4, [pc, #144]	; (800222c <_Z12waitForLaserv+0xe4>)
 800219a:	9313      	str	r3, [sp, #76]	; 0x4c
 800219c:	466b      	mov	r3, sp
 800219e:	0018      	movs	r0, r3
 80021a0:	0023      	movs	r3, r4
 80021a2:	3310      	adds	r3, #16
 80021a4:	224c      	movs	r2, #76	; 0x4c
 80021a6:	0019      	movs	r1, r3
 80021a8:	f003 fe67 	bl	8005e7a <memcpy>
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	6861      	ldr	r1, [r4, #4]
 80021b0:	68a2      	ldr	r2, [r4, #8]
 80021b2:	68e3      	ldr	r3, [r4, #12]
 80021b4:	f000 f8ca 	bl	800234c <_Z7readADC19__ADC_HandleTypeDefm>
 80021b8:	0003      	movs	r3, r0
 80021ba:	001a      	movs	r2, r3
 80021bc:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <_Z12waitForLaserv+0xe8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	0019      	movs	r1, r3
 80021c2:	0010      	movs	r0, r2
 80021c4:	f7fe f832 	bl	800022c <__divsi3>
 80021c8:	0003      	movs	r3, r0
 80021ca:	603b      	str	r3, [r7, #0]
            HAL_Delay(5); //Wait 5 ms
 80021cc:	2005      	movs	r0, #5
 80021ce:	f000 fe23 	bl	8002e18 <HAL_Delay>
            isReady = isReady + (value / numRings); //Summing up all readings and taking average
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	da00      	bge.n	80021da <_Z12waitForLaserv+0x92>
 80021d8:	3303      	adds	r3, #3
 80021da:	109b      	asrs	r3, r3, #2
 80021dc:	001a      	movs	r2, r3
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <_Z12waitForLaserv+0xd4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	18d2      	adds	r2, r2, r3
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <_Z12waitForLaserv+0xd4>)
 80021e6:	601a      	str	r2, [r3, #0]
        for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	e7cc      	b.n	800218a <_Z12waitForLaserv+0x42>
        countUp++;
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_Z12waitForLaserv+0xec>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <_Z12waitForLaserv+0xec>)
 80021f8:	601a      	str	r2, [r3, #0]
        if (countUp > 500) {
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <_Z12waitForLaserv+0xec>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	23fa      	movs	r3, #250	; 0xfa
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	429a      	cmp	r2, r3
 8002204:	dda3      	ble.n	800214e <_Z12waitForLaserv+0x6>
            HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET); //turn off if accidentally turned on
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <_Z12waitForLaserv+0xf0>)
 8002208:	2200      	movs	r2, #0
 800220a:	2110      	movs	r1, #16
 800220c:	0018      	movs	r0, r3
 800220e:	f001 fd70 	bl	8003cf2 <HAL_GPIO_WritePin>
    while (isReady < 1.25*calibration) { //While the average reading from all sensors is less than 125% of the calibration read
 8002212:	e79c      	b.n	800214e <_Z12waitForLaserv+0x6>
}
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	20001070 	.word	0x20001070
 8002220:	2000106c 	.word	0x2000106c
 8002224:	3ff40000 	.word	0x3ff40000
 8002228:	20000004 	.word	0x20000004
 800222c:	20001444 	.word	0x20001444
 8002230:	20000024 	.word	0x20000024
 8002234:	20001068 	.word	0x20001068
 8002238:	50000400 	.word	0x50000400

0800223c <_Z16calibrateSensorsv>:

void calibrateSensors() {
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b099      	sub	sp, #100	; 0x64
 8002240:	af14      	add	r7, sp, #80	; 0x50

	//int averagePerRing[numRings] = 0;
    HAL_Delay(500); //Wait half a second
 8002242:	23fa      	movs	r3, #250	; 0xfa
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fde6 	bl	8002e18 <HAL_Delay>
    int value;
    for (int j = 1; j <= 10; j++) {
 800224c:	2301      	movs	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b0a      	cmp	r3, #10
 8002254:	dc4d      	bgt.n	80022f2 <_Z16calibrateSensorsv+0xb6>
    	calibration = 0;
 8002256:	4b29      	ldr	r3, [pc, #164]	; (80022fc <_Z16calibrateSensorsv+0xc0>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
		for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b03      	cmp	r3, #3
 8002264:	dc41      	bgt.n	80022ea <_Z16calibrateSensorsv+0xae>
			 value = (int)((readADC(hadc, analogReadPins[i])) / norm); //Read each sensor
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <_Z16calibrateSensorsv+0xc4>)
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	58d3      	ldr	r3, [r2, r3]
 800226e:	4c25      	ldr	r4, [pc, #148]	; (8002304 <_Z16calibrateSensorsv+0xc8>)
 8002270:	9313      	str	r3, [sp, #76]	; 0x4c
 8002272:	466b      	mov	r3, sp
 8002274:	0018      	movs	r0, r3
 8002276:	0023      	movs	r3, r4
 8002278:	3310      	adds	r3, #16
 800227a:	224c      	movs	r2, #76	; 0x4c
 800227c:	0019      	movs	r1, r3
 800227e:	f003 fdfc 	bl	8005e7a <memcpy>
 8002282:	6820      	ldr	r0, [r4, #0]
 8002284:	6861      	ldr	r1, [r4, #4]
 8002286:	68a2      	ldr	r2, [r4, #8]
 8002288:	68e3      	ldr	r3, [r4, #12]
 800228a:	f000 f85f 	bl	800234c <_Z7readADC19__ADC_HandleTypeDefm>
 800228e:	0002      	movs	r2, r0
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <_Z16calibrateSensorsv+0xcc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0019      	movs	r1, r3
 8002296:	0010      	movs	r0, r2
 8002298:	f7fd ff3e 	bl	8000118 <__udivsi3>
 800229c:	0003      	movs	r3, r0
 800229e:	607b      	str	r3, [r7, #4]
			 calibrationForEachRing[i] = ((j-1) * calibrationForEachRing[i] + value)/j;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <_Z16calibrateSensorsv+0xd0>)
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	0089      	lsls	r1, r1, #2
 80022aa:	588a      	ldr	r2, [r1, r2]
 80022ac:	435a      	muls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	18d3      	adds	r3, r2, r3
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7fd ffb9 	bl	800022c <__divsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	0019      	movs	r1, r3
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <_Z16calibrateSensorsv+0xd0>)
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	50d1      	str	r1, [r2, r3]
			 calibration = calibration + (value / numRings);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da00      	bge.n	80022ce <_Z16calibrateSensorsv+0x92>
 80022cc:	3303      	adds	r3, #3
 80022ce:	109b      	asrs	r3, r3, #2
 80022d0:	001a      	movs	r2, r3
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <_Z16calibrateSensorsv+0xc0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	18d2      	adds	r2, r2, r3
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <_Z16calibrateSensorsv+0xc0>)
 80022da:	601a      	str	r2, [r3, #0]
			HAL_Delay(5); //Wait 5 ms
 80022dc:	2005      	movs	r0, #5
 80022de:	f000 fd9b 	bl	8002e18 <HAL_Delay>
		for (int i = 0; i <= (numRings-1); i++) { // For each sensor
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	e7ba      	b.n	8002260 <_Z16calibrateSensorsv+0x24>
    for (int j = 1; j <= 10; j++) {
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e7ae      	b.n	8002250 <_Z16calibrateSensorsv+0x14>
		}
    }
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b005      	add	sp, #20
 80022f8:	bd90      	pop	{r4, r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	2000106c 	.word	0x2000106c
 8002300:	20000004 	.word	0x20000004
 8002304:	20001444 	.word	0x20001444
 8002308:	20000024 	.word	0x20000024
 800230c:	20001054 	.word	0x20001054

08002310 <_Z10startUpLCD13LCDController>:

void startUpLCD(LCDController myLCD) {
 8002310:	b084      	sub	sp, #16
 8002312:	b5b0      	push	{r4, r5, r7, lr}
 8002314:	af00      	add	r7, sp, #0
 8002316:	2410      	movs	r4, #16
 8002318:	0025      	movs	r5, r4
 800231a:	193c      	adds	r4, r7, r4
 800231c:	6020      	str	r0, [r4, #0]
 800231e:	6061      	str	r1, [r4, #4]
 8002320:	60a2      	str	r2, [r4, #8]
 8002322:	60e3      	str	r3, [r4, #12]
    myLCD.init(); //initiate the LCD
 8002324:	002c      	movs	r4, r5
 8002326:	193b      	adds	r3, r7, r4
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff faa9 	bl	8001880 <_ZN13LCDController4initEv>
    myLCD.clear(); //get rid of any remaining text on the screen
 800232e:	193b      	adds	r3, r7, r4
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff fbd4 	bl	8001ade <_ZN13LCDController5clearEv>
    myLCD.home(); //set the cursor to home
 8002336:	193b      	adds	r3, r7, r4
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff fbe2 	bl	8001b02 <_ZN13LCDController4homeEv>
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	bcb0      	pop	{r4, r5, r7}
 8002344:	bc08      	pop	{r3}
 8002346:	b004      	add	sp, #16
 8002348:	4718      	bx	r3
	...

0800234c <_Z7readADC19__ADC_HandleTypeDefm>:


uint32_t readADC(ADC_HandleTypeDef hadc, uint32_t channel) {
 800234c:	b084      	sub	sp, #16
 800234e:	b5b0      	push	{r4, r5, r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	2520      	movs	r5, #32
 8002356:	197c      	adds	r4, r7, r5
 8002358:	6020      	str	r0, [r4, #0]
 800235a:	6061      	str	r1, [r4, #4]
 800235c:	60a2      	str	r2, [r4, #8]
 800235e:	60e3      	str	r3, [r4, #12]
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = channel;
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002364:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2280      	movs	r2, #128	; 0x80
 800236a:	0152      	lsls	r2, r2, #5
 800236c:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	002c      	movs	r4, r5
 8002372:	193a      	adds	r2, r7, r4
 8002374:	0019      	movs	r1, r3
 8002376:	0010      	movs	r0, r2
 8002378:	f001 f81a 	bl	80033b0 <HAL_ADC_ConfigChannel>

	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800237c:	193b      	adds	r3, r7, r4
 800237e:	2100      	movs	r1, #0
 8002380:	0018      	movs	r0, r3
 8002382:	f001 f9d9 	bl	8003738 <HAL_ADCEx_Calibration_Start>

	HAL_ADC_Start(&hadc);
 8002386:	193b      	adds	r3, r7, r4
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fedb 	bl	8003144 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800238e:	2301      	movs	r3, #1
 8002390:	425b      	negs	r3, r3
 8002392:	193a      	adds	r2, r7, r4
 8002394:	0019      	movs	r1, r3
 8002396:	0010      	movs	r0, r2
 8002398:	f000 ff68 	bl	800326c <HAL_ADC_PollForConversion>
	uint32_t raw = HAL_ADC_GetValue(&hadc);
 800239c:	193b      	adds	r3, r7, r4
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fffa 	bl	8003398 <HAL_ADC_GetValue>
 80023a4:	0003      	movs	r3, r0
 80023a6:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Stop(&hadc);
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 ff1e 	bl	80031ec <HAL_ADC_Stop>

	sConfig.Rank = ADC_RANK_NONE;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <_Z7readADC19__ADC_HandleTypeDefm+0x88>)
 80023b4:	605a      	str	r2, [r3, #4]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	193a      	adds	r2, r7, r4
 80023ba:	0019      	movs	r1, r3
 80023bc:	0010      	movs	r0, r2
 80023be:	f000 fff7 	bl	80033b0 <HAL_ADC_ConfigChannel>
	return raw;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	0018      	movs	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b004      	add	sp, #16
 80023ca:	bcb0      	pop	{r4, r5, r7}
 80023cc:	bc08      	pop	{r3}
 80023ce:	b004      	add	sp, #16
 80023d0:	4718      	bx	r3
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	00001001 	.word	0x00001001

080023d8 <_Z3mapiiiii>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	69b9      	ldr	r1, [r7, #24]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	1a8a      	subs	r2, r1, r2
 80023f2:	435a      	muls	r2, r3
 80023f4:	0010      	movs	r0, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	0019      	movs	r1, r3
 80023fe:	f7fd ff15 	bl	800022c <__divsi3>
 8002402:	0003      	movs	r3, r0
 8002404:	001a      	movs	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	18d3      	adds	r3, r2, r3
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <_Z9numDigitsi>:

int numDigits(int x)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
    return (x < 10 ? 1 : (x < 100 ? 2 : 3));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b09      	cmp	r3, #9
 800241e:	dd06      	ble.n	800242e <_Z9numDigitsi+0x1c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b63      	cmp	r3, #99	; 0x63
 8002424:	dc01      	bgt.n	800242a <_Z9numDigitsi+0x18>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <_Z9numDigitsi+0x1e>
 800242a:	2303      	movs	r3, #3
 800242c:	e000      	b.n	8002430 <_Z9numDigitsi+0x1e>
 800242e:	2301      	movs	r3, #1
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZN9__gnu_cxx12__to_xstringINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcEET_PFiPT0_jPKS8_St9__va_listEjSB_z>:
    }

  // Helper for the to_string / to_wstring functions.
  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
 8002438:	b408      	push	{r3}
 800243a:	b5b0      	push	{r4, r5, r7, lr}
 800243c:	b089      	sub	sp, #36	; 0x24
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
				 __builtin_va_list), std::size_t __n,
		 const _CharT* __fmt, ...)
    {
      // XXX Eventually the result should be constructed in-place in
      // the __cxx11 string, likely with the help of internal hooks.
      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3307      	adds	r3, #7
 800244a:	3307      	adds	r3, #7
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	466a      	mov	r2, sp
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	469d      	mov	sp, r3
 8002456:	466b      	mov	r3, sp
 8002458:	3307      	adds	r3, #7
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	61fb      	str	r3, [r7, #28]
							  * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);
 8002460:	2330      	movs	r3, #48	; 0x30
 8002462:	2208      	movs	r2, #8
 8002464:	4694      	mov	ip, r2
 8002466:	44bc      	add	ip, r7
 8002468:	4463      	add	r3, ip
 800246a:	613b      	str	r3, [r7, #16]

      const int __len = __convf(__s, __n, __fmt, __args);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	69f8      	ldr	r0, [r7, #28]
 8002474:	68bc      	ldr	r4, [r7, #8]
 8002476:	47a0      	blx	r4
 8002478:	0003      	movs	r3, r0
 800247a:	61bb      	str	r3, [r7, #24]

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	18d4      	adds	r4, r2, r3
 8002482:	2514      	movs	r5, #20
 8002484:	197b      	adds	r3, r7, r5
 8002486:	0018      	movs	r0, r3
 8002488:	f003 fbde 	bl	8005c48 <_ZNSaIcEC1Ev>
 800248c:	197b      	adds	r3, r7, r5
 800248e:	69f9      	ldr	r1, [r7, #28]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	0022      	movs	r2, r4
 8002494:	f000 f80b 	bl	80024ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>
 8002498:	197b      	adds	r3, r7, r5
 800249a:	0018      	movs	r0, r3
 800249c:	f003 fbd5 	bl	8005c4a <_ZNSaIcED1Ev>
    }
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b009      	add	sp, #36	; 0x24
 80024a6:	bcb0      	pop	{r4, r5, r7}
 80024a8:	bc08      	pop	{r3}
 80024aa:	b001      	add	sp, #4
 80024ac:	4718      	bx	r3

080024ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IPcvEET_S7_RKS3_>:
        basic_string(_InputIterator __beg, _InputIterator __end,
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
	: _M_dataplus(_M_local_data(), __a)
 80024bc:	68fc      	ldr	r4, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f003 fbd3 	bl	8005c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80024c6:	0001      	movs	r1, r0
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	001a      	movs	r2, r3
 80024cc:	0020      	movs	r0, r4
 80024ce:	f003 fc1a 	bl	8005d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	{ _M_construct(__beg, __end); }
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f805 	bl	80024e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b005      	add	sp, #20
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_>:
        _M_construct(_InIterator __beg, _InIterator __end)
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
	  _M_construct_aux(__beg, __end, _Integral());
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f804 	bl	8002506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>
        }
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b006      	add	sp, #24
 8002504:	bd80      	pop	{r7, pc}

08002506 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_construct_auxIPcEEvT_S7_St12__false_type>:
        _M_construct_aux(_InIterator __beg, _InIterator __end,
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b087      	sub	sp, #28
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	003a      	movs	r2, r7
 8002514:	7013      	strb	r3, [r2, #0]
          _M_construct(__beg, __end, _Tag());
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	1c23      	adds	r3, r4, #0
 800251e:	f000 f805 	bl	800252c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
	}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b007      	add	sp, #28
 8002528:	bd90      	pop	{r4, r7, pc}
	...

0800252c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	003a      	movs	r2, r7
 800253a:	7013      	strb	r3, [r2, #0]
      _M_construct(_InIterator __beg, _InIterator __end,
		   std::forward_iterator_tag)
      {
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	0018      	movs	r0, r3
 8002540:	f000 f842 	bl	80025c8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d005      	beq.n	8002554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x28>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8002554:	2300      	movs	r3, #0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x36>
	  std::__throw_logic_error(__N("basic_string::"
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x98>)
 800255c:	0018      	movs	r0, r3
 800255e:	f003 fb75 	bl	8005c4c <_ZSt19__throw_logic_errorPKc>
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f841 	bl	80025f0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>
 800256e:	0003      	movs	r3, r0
 8002570:	617b      	str	r3, [r7, #20]

	if (__dnew > size_type(_S_local_capacity))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d912      	bls.n	800259e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x72>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 8002578:	2314      	movs	r3, #20
 800257a:	18f9      	adds	r1, r7, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	0018      	movs	r0, r3
 8002582:	f003 fb7d 	bl	8005c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002586:	0002      	movs	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	0011      	movs	r1, r2
 800258c:	0018      	movs	r0, r3
 800258e:	f003 fb69 	bl	8005c64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	0011      	movs	r1, r2
 8002598:	0018      	movs	r0, r3
 800259a:	f003 fb69 	bl	8005c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f003 fb61 	bl	8005c68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0019      	movs	r1, r3
 80025ac:	f003 fb96 	bl	8005cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0011      	movs	r1, r2
 80025b6:	0018      	movs	r0, r3
 80025b8:	f003 fb5c 	bl	8005c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b006      	add	sp, #24
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	0800680c 	.word	0x0800680c

080025c8 <_ZN9__gnu_cxx17__is_null_pointerIcEEbPT_>:


  // For use in string and vstring.
  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    { return __ptr == 0; }
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	425a      	negs	r2, r3
 80025d4:	4153      	adcs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80025e8:	1c18      	adds	r0, r3, #0
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZSt8distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80025fa:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff ffee 	bl	80025e0 <_ZSt19__iterator_categoryIPcENSt15iterator_traitsIT_E17iterator_categoryERKS2_>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	1c2a      	adds	r2, r5, #0
 8002608:	0019      	movs	r1, r3
 800260a:	0020      	movs	r0, r4
 800260c:	f000 f805 	bl	800261a <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>
 8002610:	0003      	movs	r3, r0
    }
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bdb0      	pop	{r4, r5, r7, pc}

0800261a <_ZSt10__distanceIPcENSt15iterator_traitsIT_E15difference_typeES2_S2_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	701a      	strb	r2, [r3, #0]
      return __last - __first;
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
    }
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b004      	add	sp, #16
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f000 fb7c 	bl	8002d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f82c 	bl	800269c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f000 f98c 	bl	8002960 <MX_GPIO_Init>
  MX_ADC_Init();
 8002648:	f000 f896 	bl	8002778 <MX_ADC_Init>
  MX_TIM2_Init();
 800264c:	f000 f8de 	bl	800280c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002650:	f000 f930 	bl	80028b4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002654:	f000 f95e 	bl	8002914 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <main+0x30>)
 800265a:	0018      	movs	r0, r3
 800265c:	f002 fbd4 	bl	8004e08 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CppMain();
 8002660:	f7ff fa86 	bl	8001b70 <CppMain>
 8002664:	e7fc      	b.n	8002660 <main+0x28>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20001114 	.word	0x20001114

0800266c <delayMicroseconds>:
/**
 * Delays the program for a given value in microseconds and then returns to operaiton
 * @param us
 */
 void delayMicroseconds (uint16_t us)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	0002      	movs	r2, r0
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <delayMicroseconds+0x2c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8002680:	46c0      	nop			; (mov r8, r8)
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <delayMicroseconds+0x2c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002688:	1dbb      	adds	r3, r7, #6
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d3f8      	bcc.n	8002682 <delayMicroseconds+0x16>
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b002      	add	sp, #8
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20001114 	.word	0x20001114

0800269c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b09d      	sub	sp, #116	; 0x74
 80026a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a2:	2438      	movs	r4, #56	; 0x38
 80026a4:	193b      	adds	r3, r7, r4
 80026a6:	0018      	movs	r0, r3
 80026a8:	2338      	movs	r3, #56	; 0x38
 80026aa:	001a      	movs	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	f003 fc00 	bl	8005eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026b2:	2324      	movs	r3, #36	; 0x24
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	0018      	movs	r0, r3
 80026b8:	2314      	movs	r3, #20
 80026ba:	001a      	movs	r2, r3
 80026bc:	2100      	movs	r1, #0
 80026be:	f003 fbf8 	bl	8005eb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026c2:	003b      	movs	r3, r7
 80026c4:	0018      	movs	r0, r3
 80026c6:	2324      	movs	r3, #36	; 0x24
 80026c8:	001a      	movs	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	f003 fbf1 	bl	8005eb2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <SystemClock_Config+0xd4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <SystemClock_Config+0xd8>)
 80026d6:	401a      	ands	r2, r3
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <SystemClock_Config+0xd4>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0109      	lsls	r1, r1, #4
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80026e2:	0021      	movs	r1, r4
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	2222      	movs	r2, #34	; 0x22
 80026e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2201      	movs	r2, #1
 80026ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2210      	movs	r2, #16
 80026f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2201      	movs	r2, #1
 80026fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002702:	187b      	adds	r3, r7, r1
 8002704:	0018      	movs	r0, r3
 8002706:	f001 fc4b 	bl	8003fa0 <HAL_RCC_OscConfig>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d001      	beq.n	8002712 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800270e:	f000 f979 	bl	8002a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002712:	2124      	movs	r1, #36	; 0x24
 8002714:	187b      	adds	r3, r7, r1
 8002716:	220f      	movs	r2, #15
 8002718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2201      	movs	r2, #1
 800271e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2100      	movs	r1, #0
 8002736:	0018      	movs	r0, r3
 8002738:	f001 fff2 	bl	8004720 <HAL_RCC_ClockConfig>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d001      	beq.n	8002744 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002740:	f000 f960 	bl	8002a04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
 8002744:	003b      	movs	r3, r7
 8002746:	2241      	movs	r2, #65	; 0x41
 8002748:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800274a:	003b      	movs	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002750:	003b      	movs	r3, r7
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	04d2      	lsls	r2, r2, #19
 8002756:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002758:	003b      	movs	r3, r7
 800275a:	0018      	movs	r0, r3
 800275c:	f002 f9c4 	bl	8004ae8 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	1e03      	subs	r3, r0, #0
 8002762:	d001      	beq.n	8002768 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002764:	f000 f94e 	bl	8002a04 <Error_Handler>
  }
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b01d      	add	sp, #116	; 0x74
 800276e:	bd90      	pop	{r4, r7, pc}
 8002770:	40007000 	.word	0x40007000
 8002774:	ffffe7ff 	.word	0xffffe7ff

08002778 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <MX_ADC_Init+0x8c>)
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <MX_ADC_Init+0x90>)
 8002780:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <MX_ADC_Init+0x8c>)
 8002784:	2200      	movs	r2, #0
 8002786:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_ADC_Init+0x8c>)
 800278a:	22c0      	movs	r2, #192	; 0xc0
 800278c:	0612      	lsls	r2, r2, #24
 800278e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <MX_ADC_Init+0x8c>)
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_ADC_Init+0x8c>)
 8002798:	2203      	movs	r2, #3
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_ADC_Init+0x8c>)
 800279e:	2201      	movs	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_ADC_Init+0x8c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_ADC_Init+0x8c>)
 80027aa:	2220      	movs	r2, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_ADC_Init+0x8c>)
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_ADC_Init+0x8c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_ADC_Init+0x8c>)
 80027c0:	22c2      	movs	r2, #194	; 0xc2
 80027c2:	32ff      	adds	r2, #255	; 0xff
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_ADC_Init+0x8c>)
 80027c8:	222c      	movs	r2, #44	; 0x2c
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <MX_ADC_Init+0x8c>)
 80027d0:	2204      	movs	r2, #4
 80027d2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_ADC_Init+0x8c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80027da:	4b0a      	ldr	r3, [pc, #40]	; (8002804 <MX_ADC_Init+0x8c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_ADC_Init+0x8c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <MX_ADC_Init+0x8c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <MX_ADC_Init+0x8c>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fb34 	bl	8002e5c <HAL_ADC_Init>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_ADC_Init+0x84>
  {
    Error_Handler();
 80027f8:	f000 f904 	bl	8002a04 <Error_Handler>
  }
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	20001444 	.word	0x20001444
 8002808:	40012400 	.word	0x40012400

0800280c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	2308      	movs	r3, #8
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	0018      	movs	r0, r3
 8002818:	2310      	movs	r3, #16
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f003 fb48 	bl	8005eb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	003b      	movs	r3, r7
 8002824:	0018      	movs	r0, r3
 8002826:	2308      	movs	r3, #8
 8002828:	001a      	movs	r2, r3
 800282a:	2100      	movs	r1, #0
 800282c:	f003 fb41 	bl	8005eb2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002832:	2280      	movs	r2, #128	; 0x80
 8002834:	05d2      	lsls	r2, r2, #23
 8002836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <MX_TIM2_Init+0xa0>)
 800283a:	220f      	movs	r2, #15
 800283c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <MX_TIM2_Init+0xa4>)
 8002848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_TIM2_Init+0xa0>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002852:	2200      	movs	r2, #0
 8002854:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002858:	0018      	movs	r0, r3
 800285a:	f002 faa9 	bl	8004db0 <HAL_TIM_Base_Init>
 800285e:	1e03      	subs	r3, r0, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002862:	f000 f8cf 	bl	8002a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002866:	2108      	movs	r1, #8
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	0152      	lsls	r2, r2, #5
 800286e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002870:	187a      	adds	r2, r7, r1
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002874:	0011      	movs	r1, r2
 8002876:	0018      	movs	r0, r3
 8002878:	f002 fae8 	bl	8004e4c <HAL_TIM_ConfigClockSource>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002880:	f000 f8c0 	bl	8002a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002884:	003b      	movs	r3, r7
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	003b      	movs	r3, r7
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002890:	003a      	movs	r2, r7
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_TIM2_Init+0xa0>)
 8002894:	0011      	movs	r1, r2
 8002896:	0018      	movs	r0, r3
 8002898:	f002 fc84 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	1e03      	subs	r3, r0, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80028a0:	f000 f8b0 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b006      	add	sp, #24
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20001114 	.word	0x20001114
 80028b0:	0000fffe 	.word	0x0000fffe

080028b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <MX_USART1_UART_Init+0x5c>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028c0:	22e1      	movs	r2, #225	; 0xe1
 80028c2:	0252      	lsls	r2, r2, #9
 80028c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <MX_USART1_UART_Init+0x58>)
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 fc97 	bl	800522c <HAL_UART_Init>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002902:	f000 f87f 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20001084 	.word	0x20001084
 8002910:	40013800 	.word	0x40013800

08002914 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_USB_PCD_Init+0x44>)
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <MX_USB_PCD_Init+0x48>)
 800291c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_USB_PCD_Init+0x44>)
 8002920:	2208      	movs	r2, #8
 8002922:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_USB_PCD_Init+0x44>)
 8002926:	2202      	movs	r2, #2
 8002928:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_USB_PCD_Init+0x44>)
 800292c:	2202      	movs	r2, #2
 800292e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_USB_PCD_Init+0x44>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <MX_USB_PCD_Init+0x44>)
 8002938:	2200      	movs	r2, #0
 800293a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_USB_PCD_Init+0x44>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <MX_USB_PCD_Init+0x44>)
 8002944:	0018      	movs	r0, r3
 8002946:	f001 f9f1 	bl	8003d2c <HAL_PCD_Init>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800294e:	f000 f859 	bl	8002a04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20001150 	.word	0x20001150
 800295c:	40005c00 	.word	0x40005c00

08002960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	240c      	movs	r4, #12
 8002968:	193b      	adds	r3, r7, r4
 800296a:	0018      	movs	r0, r3
 800296c:	2314      	movs	r3, #20
 800296e:	001a      	movs	r2, r3
 8002970:	2100      	movs	r1, #0
 8002972:	f003 fa9e 	bl	8005eb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <MX_GPIO_Init+0x98>)
 8002978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <MX_GPIO_Init+0x98>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	430a      	orrs	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
 8002982:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_GPIO_Init+0x98>)
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <MX_GPIO_Init+0x98>)
 8002990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <MX_GPIO_Init+0x98>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <MX_GPIO_Init+0x98>)
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <MX_GPIO_Init+0x98>)
 80029a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <MX_GPIO_Init+0x98>)
 80029ac:	2102      	movs	r1, #2
 80029ae:	430a      	orrs	r2, r1
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <MX_GPIO_Init+0x98>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80029be:	490f      	ldr	r1, [pc, #60]	; (80029fc <MX_GPIO_Init+0x9c>)
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_GPIO_Init+0xa0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 f994 	bl	8003cf2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB14 PB15 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80029ca:	0021      	movs	r1, r4
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <MX_GPIO_Init+0x9c>)
 80029d0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2201      	movs	r2, #1
 80029d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	187b      	adds	r3, r7, r1
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <MX_GPIO_Init+0xa0>)
 80029e8:	0019      	movs	r1, r3
 80029ea:	0010      	movs	r0, r2
 80029ec:	f000 ffee 	bl	80039cc <HAL_GPIO_Init>

}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b009      	add	sp, #36	; 0x24
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	0000fff0 	.word	0x0000fff0
 8002a00:	50000400 	.word	0x50000400

08002a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a14:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_MspInit+0x24>)
 8002a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_MspInit+0x24>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_MspInit+0x24>)
 8002a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_MspInit+0x24>)
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	0549      	lsls	r1, r1, #21
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	230c      	movs	r3, #12
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	0018      	movs	r0, r3
 8002a46:	2314      	movs	r3, #20
 8002a48:	001a      	movs	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f003 fa31 	bl	8005eb2 <memset>
  if(hadc->Instance==ADC1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_ADC_MspInit+0x74>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d123      	bne.n	8002aa2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a5e:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	0089      	lsls	r1, r1, #2
 8002a64:	430a      	orrs	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a6e:	2101      	movs	r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_ADC_MspInit+0x78>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a80:	210c      	movs	r1, #12
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	220f      	movs	r2, #15
 8002a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	187a      	adds	r2, r7, r1
 8002a96:	23a0      	movs	r3, #160	; 0xa0
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 ff95 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b008      	add	sp, #32
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	40012400 	.word	0x40012400
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	05db      	lsls	r3, r3, #23
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d105      	bne.n	8002ad4 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <HAL_TIM_Base_MspInit+0x28>)
 8002aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_TIM_Base_MspInit+0x28>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	230c      	movs	r3, #12
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	0018      	movs	r0, r3
 8002aee:	2314      	movs	r3, #20
 8002af0:	001a      	movs	r2, r3
 8002af2:	2100      	movs	r1, #0
 8002af4:	f003 f9dd 	bl	8005eb2 <memset>
  if(huart->Instance==USART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_UART_MspInit+0x80>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d12a      	bne.n	8002b58 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b02:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	01c9      	lsls	r1, r1, #7
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_UART_MspInit+0x84>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	2201      	movs	r2, #1
 8002b22:	4013      	ands	r3, r2
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b28:	210c      	movs	r1, #12
 8002b2a:	187b      	adds	r3, r7, r1
 8002b2c:	22c0      	movs	r2, #192	; 0xc0
 8002b2e:	00d2      	lsls	r2, r2, #3
 8002b30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2202      	movs	r2, #2
 8002b36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2203      	movs	r2, #3
 8002b42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2204      	movs	r2, #4
 8002b48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	187a      	adds	r2, r7, r1
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	05db      	lsls	r3, r3, #23
 8002b50:	0011      	movs	r1, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f000 ff3a 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b008      	add	sp, #32
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_PCD_MspInit+0x28>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d106      	bne.n	8002b88 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_PCD_MspInit+0x2c>)
 8002b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_PCD_MspInit+0x2c>)
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	0409      	lsls	r1, r1, #16
 8002b84:	430a      	orrs	r2, r1
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40005c00 	.word	0x40005c00
 8002b94:	40021000 	.word	0x40021000

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b9c:	46c0      	nop			; (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <HardFault_Handler+0x4>

08002ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc0:	f000 f90e 	bl	8002de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	af00      	add	r7, sp, #0
	return 1;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_kill>:

int _kill(int pid, int sig)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
 8002bde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002be0:	f003 f902 	bl	8005de8 <__errno>
 8002be4:	0003      	movs	r3, r0
 8002be6:	2216      	movs	r2, #22
 8002be8:	601a      	str	r2, [r3, #0]
	return -1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	425b      	negs	r3, r3
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_exit>:

void _exit (int status)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bfe:	2301      	movs	r3, #1
 8002c00:	425a      	negs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff ffe5 	bl	8002bd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c0c:	e7fe      	b.n	8002c0c <_exit+0x16>
	...

08002c10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <_sbrk+0x50>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_sbrk+0x16>
		heap_end = &end;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <_sbrk+0x50>)
 8002c22:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <_sbrk+0x54>)
 8002c24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <_sbrk+0x50>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <_sbrk+0x50>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	18d3      	adds	r3, r2, r3
 8002c34:	466a      	mov	r2, sp
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d907      	bls.n	8002c4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c3a:	f003 f8d5 	bl	8005de8 <__errno>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	220c      	movs	r2, #12
 8002c42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	425b      	negs	r3, r3
 8002c48:	e006      	b.n	8002c58 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <_sbrk+0x50>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	18d2      	adds	r2, r2, r3
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <_sbrk+0x50>)
 8002c54:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20001074 	.word	0x20001074
 8002c64:	200014a8 	.word	0x200014a8

08002c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <SystemInit+0x64>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <SystemInit+0x64>)
 8002c72:	2180      	movs	r1, #128	; 0x80
 8002c74:	0049      	lsls	r1, r1, #1
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002c7a:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <SystemInit+0x64>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <SystemInit+0x64>)
 8002c80:	4913      	ldr	r1, [pc, #76]	; (8002cd0 <SystemInit+0x68>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <SystemInit+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <SystemInit+0x64>)
 8002c8c:	4911      	ldr	r1, [pc, #68]	; (8002cd4 <SystemInit+0x6c>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <SystemInit+0x64>)
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <SystemInit+0x64>)
 8002c98:	2101      	movs	r1, #1
 8002c9a:	438a      	bics	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <SystemInit+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <SystemInit+0x64>)
 8002ca4:	490c      	ldr	r1, [pc, #48]	; (8002cd8 <SystemInit+0x70>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <SystemInit+0x64>)
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <SystemInit+0x64>)
 8002cb0:	490a      	ldr	r1, [pc, #40]	; (8002cdc <SystemInit+0x74>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002cb6:	4b05      	ldr	r3, [pc, #20]	; (8002ccc <SystemInit+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <SystemInit+0x78>)
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0512      	lsls	r2, r2, #20
 8002cc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002cc4:	46c0      	nop			; (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	88ff400c 	.word	0x88ff400c
 8002cd4:	fef6fff6 	.word	0xfef6fff6
 8002cd8:	fffbffff 	.word	0xfffbffff
 8002cdc:	ff02ffff 	.word	0xff02ffff
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002ce4:	480d      	ldr	r0, [pc, #52]	; (8002d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ce6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002ce8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cea:	e003      	b.n	8002cf4 <LoopCopyDataInit>

08002cec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002cee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cf2:	3104      	adds	r1, #4

08002cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002cf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002cfc:	d3f6      	bcc.n	8002cec <CopyDataInit>
  ldr  r2, =_sbss
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002d00:	e002      	b.n	8002d08 <LoopFillZerobss>

08002d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002d02:	2300      	movs	r3, #0
  str  r3, [r2]
 8002d04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d06:	3204      	adds	r2, #4

08002d08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <LoopForever+0x16>)
  cmp  r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d0c:	d3f9      	bcc.n	8002d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d0e:	f7ff ffab 	bl	8002c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d12:	f003 f86f 	bl	8005df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d16:	f7ff fc8f 	bl	8002638 <main>

08002d1a <LoopForever>:

LoopForever:
    b LoopForever
 8002d1a:	e7fe      	b.n	8002d1a <LoopForever>
  ldr   r0, =_estack
 8002d1c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002d20:	080069ec 	.word	0x080069ec
  ldr  r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d28:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002d2c:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002d30:	200014a8 	.word	0x200014a8

08002d34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC1_COMP_IRQHandler>
	...

08002d38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_Init+0x3c>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_Init+0x3c>)
 8002d4a:	2140      	movs	r1, #64	; 0x40
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d50:	2000      	movs	r0, #0
 8002d52:	f000 f811 	bl	8002d78 <HAL_InitTick>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002d5a:	1dfb      	adds	r3, r7, #7
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e001      	b.n	8002d66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d62:	f7ff fe55 	bl	8002a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40022000 	.word	0x40022000

08002d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_InitTick+0x5c>)
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_InitTick+0x60>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	0019      	movs	r1, r3
 8002d8a:	23fa      	movs	r3, #250	; 0xfa
 8002d8c:	0098      	lsls	r0, r3, #2
 8002d8e:	f7fd f9c3 	bl	8000118 <__udivsi3>
 8002d92:	0003      	movs	r3, r0
 8002d94:	0019      	movs	r1, r3
 8002d96:	0020      	movs	r0, r4
 8002d98:	f7fd f9be 	bl	8000118 <__udivsi3>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fe07 	bl	80039b2 <HAL_SYSTICK_Config>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e00f      	b.n	8002dcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d80b      	bhi.n	8002dca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	2301      	movs	r3, #1
 8002db6:	425b      	negs	r3, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fde4 	bl	8003988 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_InitTick+0x64>)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b003      	add	sp, #12
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	20000030 	.word	0x20000030
 8002ddc:	2000002c 	.word	0x2000002c

08002de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_IncTick+0x1c>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	001a      	movs	r2, r3
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_IncTick+0x20>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	18d2      	adds	r2, r2, r3
 8002df0:	4b03      	ldr	r3, [pc, #12]	; (8002e00 <HAL_IncTick+0x20>)
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000030 	.word	0x20000030
 8002e00:	200014a0 	.word	0x200014a0

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <HAL_GetTick+0x10>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	200014a0 	.word	0x200014a0

08002e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	d005      	beq.n	8002e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_Delay+0x40>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	001a      	movs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	189b      	adds	r3, r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	f7ff ffe0 	bl	8002e04 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d8f7      	bhi.n	8002e40 <HAL_Delay+0x28>
  {
  }
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000030 	.word	0x20000030

08002e5c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e159      	b.n	8003122 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2250      	movs	r2, #80	; 0x50
 8002e80:	2100      	movs	r1, #0
 8002e82:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff fdd6 	bl	8002a38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	2210      	movs	r2, #16
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d005      	beq.n	8002ea4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002ea2:	d00b      	beq.n	8002ebc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2250      	movs	r2, #80	; 0x50
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e132      	b.n	8003122 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	4a9a      	ldr	r2, [pc, #616]	; (800312c <HAL_ADC_Init+0x2d0>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_Init+0x90>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_Init+0x90>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_ADC_Init+0x92>
 8002eec:	2300      	movs	r3, #0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d149      	bne.n	8002f86 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d00b      	beq.n	8002f16 <HAL_ADC_Init+0xba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d005      	beq.n	8002f16 <HAL_ADC_Init+0xba>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d111      	bne.n	8002f3a <HAL_ADC_Init+0xde>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	0892      	lsrs	r2, r2, #2
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6919      	ldr	r1, [r3, #16]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	611a      	str	r2, [r3, #16]
 8002f38:	e014      	b.n	8002f64 <HAL_ADC_Init+0x108>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	0892      	lsrs	r2, r2, #2
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	4b79      	ldr	r3, [pc, #484]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b78      	ldr	r3, [pc, #480]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f50:	4978      	ldr	r1, [pc, #480]	; (8003134 <HAL_ADC_Init+0x2d8>)
 8002f52:	400a      	ands	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2118      	movs	r1, #24
 8002f70:	438a      	bics	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68d9      	ldr	r1, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002f86:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b69      	ldr	r3, [pc, #420]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f8c:	496a      	ldr	r1, [pc, #424]	; (8003138 <HAL_ADC_Init+0x2dc>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002f92:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	065a      	lsls	r2, r3, #25
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_ADC_Init+0x2d4>)
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	055b      	lsls	r3, r3, #21
 8002fac:	4013      	ands	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2180      	movs	r1, #128	; 0x80
 8002fbc:	0549      	lsls	r1, r1, #21
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	495b      	ldr	r1, [pc, #364]	; (800313c <HAL_ADC_Init+0x2e0>)
 8002fce:	400a      	ands	r2, r1
 8002fd0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68d9      	ldr	r1, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_Init+0x18c>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e000      	b.n	8002fea <HAL_ADC_Init+0x18e>
 8002fe8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002fea:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2020      	movs	r0, #32
 8002ff0:	5c1b      	ldrb	r3, [r3, r0]
 8002ff2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ff4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	202c      	movs	r0, #44	; 0x2c
 8002ffa:	5c1b      	ldrb	r3, [r3, r0]
 8002ffc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ffe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003004:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800300c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003014:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003022:	23c2      	movs	r3, #194	; 0xc2
 8003024:	33ff      	adds	r3, #255	; 0xff
 8003026:	429a      	cmp	r2, r3
 8003028:	d00b      	beq.n	8003042 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	5c9b      	ldrb	r3, [r3, r2]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d11a      	bne.n	8003082 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	0249      	lsls	r1, r1, #9
 8003064:	430a      	orrs	r2, r1
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	e00b      	b.n	8003082 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	2220      	movs	r2, #32
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	2201      	movs	r2, #1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d11f      	bne.n	80030ca <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	492a      	ldr	r1, [pc, #168]	; (8003140 <HAL_ADC_Init+0x2e4>)
 8003096:	400a      	ands	r2, r1
 8003098:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6919      	ldr	r1, [r3, #16]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80030a8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80030ae:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	611a      	str	r2, [r3, #16]
 80030c8:	e00e      	b.n	80030e8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	438a      	bics	r2, r1
 80030e6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2107      	movs	r1, #7
 80030f4:	438a      	bics	r2, r1
 80030f6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003114:	2203      	movs	r2, #3
 8003116:	4393      	bics	r3, r2
 8003118:	2201      	movs	r2, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b002      	add	sp, #8
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	fffffefd 	.word	0xfffffefd
 8003130:	40012708 	.word	0x40012708
 8003134:	ffc3ffff 	.word	0xffc3ffff
 8003138:	fdffffff 	.word	0xfdffffff
 800313c:	fffe0219 	.word	0xfffe0219
 8003140:	fffffc03 	.word	0xfffffc03

08003144 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314c:	230f      	movs	r3, #15
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d138      	bne.n	80031d2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2250      	movs	r2, #80	; 0x50
 8003164:	5c9b      	ldrb	r3, [r3, r2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_ADC_Start+0x2a>
 800316a:	2302      	movs	r3, #2
 800316c:	e038      	b.n	80031e0 <HAL_ADC_Start+0x9c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2250      	movs	r2, #80	; 0x50
 8003172:	2101      	movs	r1, #1
 8003174:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d007      	beq.n	800318e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800317e:	230f      	movs	r3, #15
 8003180:	18fc      	adds	r4, r7, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	0018      	movs	r0, r3
 8003186:	f000 f9b3 	bl	80034f0 <ADC_Enable>
 800318a:	0003      	movs	r3, r0
 800318c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800318e:	230f      	movs	r3, #15
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d120      	bne.n	80031da <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <HAL_ADC_Start+0xa4>)
 800319e:	4013      	ands	r3, r2
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	0052      	lsls	r2, r2, #1
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2250      	movs	r2, #80	; 0x50
 80031b4:	2100      	movs	r1, #0
 80031b6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	221c      	movs	r2, #28
 80031be:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2104      	movs	r1, #4
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e003      	b.n	80031da <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031d2:	230f      	movs	r3, #15
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031da:	230f      	movs	r3, #15
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	781b      	ldrb	r3, [r3, #0]
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b005      	add	sp, #20
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	fffff0fe 	.word	0xfffff0fe

080031ec <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	230f      	movs	r3, #15
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2250      	movs	r2, #80	; 0x50
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_ADC_Stop+0x1e>
 8003206:	2302      	movs	r3, #2
 8003208:	e02a      	b.n	8003260 <HAL_ADC_Stop+0x74>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2250      	movs	r2, #80	; 0x50
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003212:	250f      	movs	r5, #15
 8003214:	197c      	adds	r4, r7, r5
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 fa29 	bl	8003670 <ADC_ConversionStop>
 800321e:	0003      	movs	r3, r0
 8003220:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003222:	197b      	adds	r3, r7, r5
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d113      	bne.n	8003252 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800322a:	250f      	movs	r5, #15
 800322c:	197c      	adds	r4, r7, r5
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 f9bd 	bl	80035b0 <ADC_Disable>
 8003236:	0003      	movs	r3, r0
 8003238:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800323a:	197b      	adds	r3, r7, r5
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_ADC_Stop+0x7c>)
 8003248:	4013      	ands	r3, r2
 800324a:	2201      	movs	r2, #1
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2250      	movs	r2, #80	; 0x50
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bdb0      	pop	{r4, r5, r7, pc}
 8003268:	fffffefe 	.word	0xfffffefe

0800326c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	2b08      	cmp	r3, #8
 8003284:	d102      	bne.n	800328c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003286:	2308      	movs	r3, #8
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	e014      	b.n	80032b6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	4013      	ands	r3, r2
 8003296:	2b01      	cmp	r3, #1
 8003298:	d10b      	bne.n	80032b2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	2220      	movs	r2, #32
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2250      	movs	r2, #80	; 0x50
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06c      	b.n	800338c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80032b2:	230c      	movs	r3, #12
 80032b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80032b6:	f7ff fda5 	bl	8002e04 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80032be:	e019      	b.n	80032f4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	d016      	beq.n	80032f4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_ADC_PollForConversion+0x70>
 80032cc:	f7ff fd9a 	bl	8002e04 <HAL_GetTick>
 80032d0:	0002      	movs	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d20b      	bcs.n	80032f4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e0:	2204      	movs	r2, #4
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2250      	movs	r2, #80	; 0x50
 80032ec:	2100      	movs	r1, #0
 80032ee:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e04b      	b.n	800338c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	d0df      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	4013      	ands	r3, r2
 800331a:	d12e      	bne.n	800337a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003322:	2b00      	cmp	r3, #0
 8003324:	d129      	bne.n	800337a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2208      	movs	r2, #8
 800332e:	4013      	ands	r3, r2
 8003330:	2b08      	cmp	r3, #8
 8003332:	d122      	bne.n	800337a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2204      	movs	r2, #4
 800333c:	4013      	ands	r3, r2
 800333e:	d110      	bne.n	8003362 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	210c      	movs	r1, #12
 800334c:	438a      	bics	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <HAL_ADC_PollForConversion+0x128>)
 8003356:	4013      	ands	r3, r2
 8003358:	2201      	movs	r2, #1
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	; 0x54
 8003360:	e00b      	b.n	800337a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	2220      	movs	r2, #32
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	2201      	movs	r2, #1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	220c      	movs	r2, #12
 8003388:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	0018      	movs	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b004      	add	sp, #16
 8003392:	bd80      	pop	{r7, pc}
 8003394:	fffffefe 	.word	0xfffffefe

08003398 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2250      	movs	r2, #80	; 0x50
 80033be:	5c9b      	ldrb	r3, [r3, r2]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e085      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x124>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2250      	movs	r2, #80	; 0x50
 80033cc:	2101      	movs	r1, #1
 80033ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2204      	movs	r2, #4
 80033d8:	4013      	ands	r3, r2
 80033da:	d00b      	beq.n	80033f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2220      	movs	r2, #32
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2250      	movs	r2, #80	; 0x50
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06f      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a38      	ldr	r2, [pc, #224]	; (80034dc <HAL_ADC_ConfigChannel+0x12c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d035      	beq.n	800346a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	035b      	lsls	r3, r3, #13
 800340a:	0b5a      	lsrs	r2, r3, #13
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	02db      	lsls	r3, r3, #11
 800341c:	4013      	ands	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	0409      	lsls	r1, r1, #16
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800342e:	200a      	movs	r0, #10
 8003430:	f000 f964 	bl	80036fc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	029b      	lsls	r3, r3, #10
 800343c:	4013      	ands	r3, r2
 800343e:	d006      	beq.n	800344e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003440:	4b27      	ldr	r3, [pc, #156]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003446:	2180      	movs	r1, #128	; 0x80
 8003448:	03c9      	lsls	r1, r1, #15
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	2380      	movs	r3, #128	; 0x80
 8003454:	025b      	lsls	r3, r3, #9
 8003456:	4013      	ands	r3, r2
 8003458:	d037      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800345a:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003460:	2180      	movs	r1, #128	; 0x80
 8003462:	0449      	lsls	r1, r1, #17
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e02f      	b.n	80034ca <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	035b      	lsls	r3, r3, #13
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	43d9      	mvns	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	400a      	ands	r2, r1
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	02db      	lsls	r3, r3, #11
 800348a:	4013      	ands	r3, r2
 800348c:	d005      	beq.n	800349a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 8003494:	4913      	ldr	r1, [pc, #76]	; (80034e4 <HAL_ADC_ConfigChannel+0x134>)
 8003496:	400a      	ands	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	029b      	lsls	r3, r3, #10
 80034a2:	4013      	ands	r3, r2
 80034a4:	d005      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_ADC_ConfigChannel+0x138>)
 80034ae:	400a      	ands	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	025b      	lsls	r3, r3, #9
 80034ba:	4013      	ands	r3, r2
 80034bc:	d005      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <HAL_ADC_ConfigChannel+0x130>)
 80034c4:	4909      	ldr	r1, [pc, #36]	; (80034ec <HAL_ADC_ConfigChannel+0x13c>)
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2250      	movs	r2, #80	; 0x50
 80034ce:	2100      	movs	r1, #0
 80034d0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	00001001 	.word	0x00001001
 80034e0:	40012708 	.word	0x40012708
 80034e4:	ff7fffff 	.word	0xff7fffff
 80034e8:	ffbfffff 	.word	0xffbfffff
 80034ec:	feffffff 	.word	0xfeffffff

080034f0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2203      	movs	r2, #3
 8003504:	4013      	ands	r3, r2
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <ADC_Enable+0x2c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2201      	movs	r2, #1
 8003512:	4013      	ands	r3, r2
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <ADC_Enable+0x2c>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <ADC_Enable+0x2e>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d13f      	bne.n	80035a2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a20      	ldr	r2, [pc, #128]	; (80035ac <ADC_Enable+0xbc>)
 800352a:	4013      	ands	r3, r2
 800352c:	d00d      	beq.n	800354a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	2210      	movs	r2, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353e:	2201      	movs	r2, #1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e02c      	b.n	80035a4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 f8ce 	bl	80036fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003560:	f7ff fc50 	bl	8002e04 <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003568:	e014      	b.n	8003594 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800356a:	f7ff fc4b 	bl	8002e04 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b0a      	cmp	r3, #10
 8003576:	d90d      	bls.n	8003594 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	2210      	movs	r2, #16
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	2201      	movs	r2, #1
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e007      	b.n	80035a4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	4013      	ands	r3, r2
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d1e3      	bne.n	800356a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	80000017 	.word	0x80000017

080035b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2203      	movs	r2, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d108      	bne.n	80035dc <ADC_Disable+0x2c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2201      	movs	r2, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <ADC_Disable+0x2c>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <ADC_Disable+0x2e>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d041      	beq.n	8003666 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2205      	movs	r2, #5
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d110      	bne.n	8003612 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2203      	movs	r2, #3
 8003606:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003608:	f7ff fbfc 	bl	8002e04 <HAL_GetTick>
 800360c:	0003      	movs	r3, r0
 800360e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003610:	e022      	b.n	8003658 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003616:	2210      	movs	r2, #16
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	2201      	movs	r2, #1
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e01c      	b.n	8003668 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800362e:	f7ff fbe9 	bl	8002e04 <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b0a      	cmp	r3, #10
 800363a:	d90d      	bls.n	8003658 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	2210      	movs	r2, #16
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364c:	2201      	movs	r2, #1
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e007      	b.n	8003668 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	2b01      	cmp	r3, #1
 8003664:	d0e3      	beq.n	800362e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b004      	add	sp, #16
 800366e:	bd80      	pop	{r7, pc}

08003670 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2204      	movs	r2, #4
 8003684:	4013      	ands	r3, r2
 8003686:	d034      	beq.n	80036f2 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2204      	movs	r2, #4
 8003690:	4013      	ands	r3, r2
 8003692:	2b04      	cmp	r3, #4
 8003694:	d10d      	bne.n	80036b2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2202      	movs	r2, #2
 800369e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80036a0:	d107      	bne.n	80036b2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2110      	movs	r1, #16
 80036ae:	430a      	orrs	r2, r1
 80036b0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b2:	f7ff fba7 	bl	8002e04 <HAL_GetTick>
 80036b6:	0003      	movs	r3, r0
 80036b8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036ba:	e014      	b.n	80036e6 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036bc:	f7ff fba2 	bl	8002e04 <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b0a      	cmp	r3, #10
 80036c8:	d90d      	bls.n	80036e6 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	2210      	movs	r2, #16
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	2201      	movs	r2, #1
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e006      	b.n	80036f4 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2204      	movs	r2, #4
 80036ee:	4013      	ands	r3, r2
 80036f0:	d1e4      	bne.n	80036bc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	0018      	movs	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b004      	add	sp, #16
 80036fa:	bd80      	pop	{r7, pc}

080036fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <ADC_DelayMicroSecond+0x34>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	490a      	ldr	r1, [pc, #40]	; (8003734 <ADC_DelayMicroSecond+0x38>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fc fd04 	bl	8000118 <__udivsi3>
 8003710:	0003      	movs	r3, r0
 8003712:	001a      	movs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4353      	muls	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800371a:	e002      	b.n	8003722 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f9      	bne.n	800371c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b004      	add	sp, #16
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000028 	.word	0x20000028
 8003734:	000f4240 	.word	0x000f4240

08003738 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003742:	2317      	movs	r3, #23
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2250      	movs	r2, #80	; 0x50
 8003756:	5c9b      	ldrb	r3, [r3, r2]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_ADCEx_Calibration_Start+0x28>
 800375c:	2302      	movs	r3, #2
 800375e:	e07a      	b.n	8003856 <HAL_ADCEx_Calibration_Start+0x11e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2250      	movs	r2, #80	; 0x50
 8003764:	2101      	movs	r1, #1
 8003766:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2203      	movs	r2, #3
 8003770:	4013      	ands	r3, r2
 8003772:	2b01      	cmp	r3, #1
 8003774:	d108      	bne.n	8003788 <HAL_ADCEx_Calibration_Start+0x50>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_ADCEx_Calibration_Start+0x50>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_ADCEx_Calibration_Start+0x52>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d152      	bne.n	8003834 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	4a33      	ldr	r2, [pc, #204]	; (8003860 <HAL_ADCEx_Calibration_Start+0x128>)
 8003794:	4013      	ands	r3, r2
 8003796:	2202      	movs	r2, #2
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2203      	movs	r2, #3
 80037a6:	4013      	ands	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2103      	movs	r1, #3
 80037b6:	438a      	bics	r2, r1
 80037b8:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	0609      	lsls	r1, r1, #24
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80037cc:	f7ff fb1a 	bl	8002e04 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80037d4:	e014      	b.n	8003800 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037d6:	f7ff fb15 	bl	8002e04 <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b0a      	cmp	r3, #10
 80037e2:	d90d      	bls.n	8003800 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2212      	movs	r2, #18
 80037ea:	4393      	bics	r3, r2
 80037ec:	2210      	movs	r2, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2250      	movs	r2, #80	; 0x50
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02a      	b.n	8003856 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0fdb      	lsrs	r3, r3, #31
 8003808:	07da      	lsls	r2, r3, #31
 800380a:	2380      	movs	r3, #128	; 0x80
 800380c:	061b      	lsls	r3, r3, #24
 800380e:	429a      	cmp	r2, r3
 8003810:	d0e1      	beq.n	80037d6 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68d9      	ldr	r1, [r3, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2203      	movs	r2, #3
 8003828:	4393      	bics	r3, r2
 800382a:	2201      	movs	r2, #1
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
 8003832:	e009      	b.n	8003848 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003838:	2220      	movs	r2, #32
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8003840:	2317      	movs	r3, #23
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2250      	movs	r2, #80	; 0x50
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003850:	2317      	movs	r3, #23
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	781b      	ldrb	r3, [r3, #0]
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b006      	add	sp, #24
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	fffffefd 	.word	0xfffffefd

08003864 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	0002      	movs	r2, r0
 800386c:	6039      	str	r1, [r7, #0]
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b7f      	cmp	r3, #127	; 0x7f
 8003878:	d932      	bls.n	80038e0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <NVIC_SetPriority+0xd4>)
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	0019      	movs	r1, r3
 8003882:	230f      	movs	r3, #15
 8003884:	400b      	ands	r3, r1
 8003886:	3b08      	subs	r3, #8
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3306      	adds	r3, #6
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	3304      	adds	r3, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1dfa      	adds	r2, r7, #7
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	0011      	movs	r1, r2
 800389a:	2203      	movs	r2, #3
 800389c:	400a      	ands	r2, r1
 800389e:	00d2      	lsls	r2, r2, #3
 80038a0:	21ff      	movs	r1, #255	; 0xff
 80038a2:	4091      	lsls	r1, r2
 80038a4:	000a      	movs	r2, r1
 80038a6:	43d2      	mvns	r2, r2
 80038a8:	401a      	ands	r2, r3
 80038aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	019b      	lsls	r3, r3, #6
 80038b0:	22ff      	movs	r2, #255	; 0xff
 80038b2:	401a      	ands	r2, r3
 80038b4:	1dfb      	adds	r3, r7, #7
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	0018      	movs	r0, r3
 80038ba:	2303      	movs	r3, #3
 80038bc:	4003      	ands	r3, r0
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c2:	481d      	ldr	r0, [pc, #116]	; (8003938 <NVIC_SetPriority+0xd4>)
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	001c      	movs	r4, r3
 80038ca:	230f      	movs	r3, #15
 80038cc:	4023      	ands	r3, r4
 80038ce:	3b08      	subs	r3, #8
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	430a      	orrs	r2, r1
 80038d4:	3306      	adds	r3, #6
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	18c3      	adds	r3, r0, r3
 80038da:	3304      	adds	r3, #4
 80038dc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038de:	e027      	b.n	8003930 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <NVIC_SetPriority+0xd8>)
 80038e2:	1dfb      	adds	r3, r7, #7
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	33c0      	adds	r3, #192	; 0xc0
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	589b      	ldr	r3, [r3, r2]
 80038f0:	1dfa      	adds	r2, r7, #7
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	0011      	movs	r1, r2
 80038f6:	2203      	movs	r2, #3
 80038f8:	400a      	ands	r2, r1
 80038fa:	00d2      	lsls	r2, r2, #3
 80038fc:	21ff      	movs	r1, #255	; 0xff
 80038fe:	4091      	lsls	r1, r2
 8003900:	000a      	movs	r2, r1
 8003902:	43d2      	mvns	r2, r2
 8003904:	401a      	ands	r2, r3
 8003906:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	019b      	lsls	r3, r3, #6
 800390c:	22ff      	movs	r2, #255	; 0xff
 800390e:	401a      	ands	r2, r3
 8003910:	1dfb      	adds	r3, r7, #7
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	0018      	movs	r0, r3
 8003916:	2303      	movs	r3, #3
 8003918:	4003      	ands	r3, r0
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <NVIC_SetPriority+0xd8>)
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b25b      	sxtb	r3, r3
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	430a      	orrs	r2, r1
 800392a:	33c0      	adds	r3, #192	; 0xc0
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	501a      	str	r2, [r3, r0]
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b003      	add	sp, #12
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	e000ed00 	.word	0xe000ed00
 800393c:	e000e100 	.word	0xe000e100

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <SysTick_Config+0x40>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e010      	b.n	8003978 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <SysTick_Config+0x44>)
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	3a01      	subs	r2, #1
 800395c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	2301      	movs	r3, #1
 8003960:	425b      	negs	r3, r3
 8003962:	2103      	movs	r1, #3
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff ff7d 	bl	8003864 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <SysTick_Config+0x44>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <SysTick_Config+0x44>)
 8003972:	2207      	movs	r2, #7
 8003974:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}
 8003980:	00ffffff 	.word	0x00ffffff
 8003984:	e000e010 	.word	0xe000e010

08003988 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	210f      	movs	r1, #15
 8003994:	187b      	adds	r3, r7, r1
 8003996:	1c02      	adds	r2, r0, #0
 8003998:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	187b      	adds	r3, r7, r1
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	0011      	movs	r1, r2
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7ff ff5d 	bl	8003864 <NVIC_SetPriority>
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b004      	add	sp, #16
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ffbf 	bl	8003940 <SysTick_Config>
 80039c2:	0003      	movs	r3, r0
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80039e2:	e14f      	b.n	8003c84 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4091      	lsls	r1, r2
 80039ee:	000a      	movs	r2, r1
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d100      	bne.n	80039fc <HAL_GPIO_Init+0x30>
 80039fa:	e140      	b.n	8003c7e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d00b      	beq.n	8003a1c <HAL_GPIO_Init+0x50>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d007      	beq.n	8003a1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a10:	2b11      	cmp	r3, #17
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b12      	cmp	r3, #18
 8003a1a:	d130      	bne.n	8003a7e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	0013      	movs	r3, r2
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a52:	2201      	movs	r2, #1
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	409a      	lsls	r2, r3
 8003a58:	0013      	movs	r3, r2
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	2201      	movs	r2, #1
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	0013      	movs	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	2203      	movs	r2, #3
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4013      	ands	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0xf2>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b12      	cmp	r3, #18
 8003abc:	d123      	bne.n	8003b06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	08da      	lsrs	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3208      	adds	r2, #8
 8003ac6:	0092      	lsls	r2, r2, #2
 8003ac8:	58d3      	ldr	r3, [r2, r3]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	0013      	movs	r3, r2
 8003ada:	43da      	mvns	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2107      	movs	r1, #7
 8003aea:	400b      	ands	r3, r1
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	409a      	lsls	r2, r3
 8003af0:	0013      	movs	r3, r2
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	08da      	lsrs	r2, r3, #3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3208      	adds	r2, #8
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	409a      	lsls	r2, r3
 8003b14:	0013      	movs	r3, r2
 8003b16:	43da      	mvns	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2203      	movs	r2, #3
 8003b24:	401a      	ands	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	2380      	movs	r3, #128	; 0x80
 8003b40:	055b      	lsls	r3, r3, #21
 8003b42:	4013      	ands	r3, r2
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x17c>
 8003b46:	e09a      	b.n	8003c7e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b48:	4b54      	ldr	r3, [pc, #336]	; (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_GPIO_Init+0x2d0>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	430a      	orrs	r2, r1
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_GPIO_Init+0x2d4>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	589b      	ldr	r3, [r3, r2]
 8003b60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2203      	movs	r2, #3
 8003b66:	4013      	ands	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	23a0      	movs	r3, #160	; 0xa0
 8003b7c:	05db      	lsls	r3, r3, #23
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d019      	beq.n	8003bb6 <HAL_GPIO_Init+0x1ea>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a47      	ldr	r2, [pc, #284]	; (8003ca4 <HAL_GPIO_Init+0x2d8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_GPIO_Init+0x1e6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a46      	ldr	r2, [pc, #280]	; (8003ca8 <HAL_GPIO_Init+0x2dc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00d      	beq.n	8003bae <HAL_GPIO_Init+0x1e2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a45      	ldr	r2, [pc, #276]	; (8003cac <HAL_GPIO_Init+0x2e0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <HAL_GPIO_Init+0x1de>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a44      	ldr	r2, [pc, #272]	; (8003cb0 <HAL_GPIO_Init+0x2e4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <HAL_GPIO_Init+0x1da>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e008      	b.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e004      	b.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_GPIO_Init+0x1ec>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	2103      	movs	r1, #3
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4093      	lsls	r3, r2
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc8:	4935      	ldr	r1, [pc, #212]	; (8003ca0 <HAL_GPIO_Init+0x2d4>)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	025b      	lsls	r3, r3, #9
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bfa:	4b2e      	ldr	r3, [pc, #184]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	43da      	mvns	r2, r3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	43da      	mvns	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	035b      	lsls	r3, r3, #13
 8003c42:	4013      	ands	r3, r2
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c4e:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c54:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	039b      	lsls	r3, r3, #14
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <HAL_GPIO_Init+0x2e8>)
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3301      	adds	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	40da      	lsrs	r2, r3
 8003c8c:	1e13      	subs	r3, r2, #0
 8003c8e:	d000      	beq.n	8003c92 <HAL_GPIO_Init+0x2c6>
 8003c90:	e6a8      	b.n	80039e4 <HAL_GPIO_Init+0x18>
  }
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b006      	add	sp, #24
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40010000 	.word	0x40010000
 8003ca4:	50000400 	.word	0x50000400
 8003ca8:	50000800 	.word	0x50000800
 8003cac:	50000c00 	.word	0x50000c00
 8003cb0:	50001c00 	.word	0x50001c00
 8003cb4:	40010400 	.word	0x40010400

08003cb8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	1cbb      	adds	r3, r7, #2
 8003cc4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	1cba      	adds	r2, r7, #2
 8003ccc:	8812      	ldrh	r2, [r2, #0]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cd2:	230f      	movs	r3, #15
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e003      	b.n	8003ce4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cdc:	230f      	movs	r3, #15
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ce4:	230f      	movs	r3, #15
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	781b      	ldrb	r3, [r3, #0]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b004      	add	sp, #16
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	0008      	movs	r0, r1
 8003cfc:	0011      	movs	r1, r2
 8003cfe:	1cbb      	adds	r3, r7, #2
 8003d00:	1c02      	adds	r2, r0, #0
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	1c7b      	adds	r3, r7, #1
 8003d06:	1c0a      	adds	r2, r1, #0
 8003d08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d0a:	1c7b      	adds	r3, r7, #1
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	1cbb      	adds	r3, r7, #2
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003d1a:	e003      	b.n	8003d24 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003d1c:	1cbb      	adds	r3, r7, #2
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d2e:	b08b      	sub	sp, #44	; 0x2c
 8003d30:	af06      	add	r7, sp, #24
 8003d32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e100      	b.n	8003f40 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a81      	ldr	r2, [pc, #516]	; (8003f48 <HAL_PCD_Init+0x21c>)
 8003d42:	5c9b      	ldrb	r3, [r3, r2]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	23aa      	movs	r3, #170	; 0xaa
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	2100      	movs	r1, #0
 8003d52:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	0018      	movs	r0, r3
 8003d58:	f7fe ff06 	bl	8002b68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a7a      	ldr	r2, [pc, #488]	; (8003f48 <HAL_PCD_Init+0x21c>)
 8003d60:	2103      	movs	r1, #3
 8003d62:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f001 ff0f 	bl	8005b8c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	230f      	movs	r3, #15
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e058      	b.n	8003e2a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d78:	200f      	movs	r0, #15
 8003d7a:	183b      	adds	r3, r7, r0
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	0013      	movs	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	18cb      	adds	r3, r1, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d92:	183b      	adds	r3, r7, r0
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	0013      	movs	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	189b      	adds	r3, r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	183a      	adds	r2, r7, r0
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da8:	183b      	adds	r3, r7, r0
 8003daa:	781a      	ldrb	r2, [r3, #0]
 8003dac:	0004      	movs	r4, r0
 8003dae:	183b      	adds	r3, r7, r0
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b298      	uxth	r0, r3
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	0013      	movs	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	189b      	adds	r3, r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	18cb      	adds	r3, r1, r3
 8003dc0:	3336      	adds	r3, #54	; 0x36
 8003dc2:	1c02      	adds	r2, r0, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dc6:	193b      	adds	r3, r7, r4
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	0013      	movs	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	18cb      	adds	r3, r1, r3
 8003dd8:	3303      	adds	r3, #3
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	0013      	movs	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	189b      	adds	r3, r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	18cb      	adds	r3, r1, r3
 8003dee:	3338      	adds	r3, #56	; 0x38
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	0013      	movs	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	18cb      	adds	r3, r1, r3
 8003e04:	333c      	adds	r3, #60	; 0x3c
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e0a:	193b      	adds	r3, r7, r4
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	0013      	movs	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	189b      	adds	r3, r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	18cb      	adds	r3, r1, r3
 8003e1a:	3340      	adds	r3, #64	; 0x40
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	193b      	adds	r3, r7, r4
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	3201      	adds	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	230f      	movs	r3, #15
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d39f      	bcc.n	8003d78 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e38:	230f      	movs	r3, #15
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e056      	b.n	8003ef0 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e42:	240f      	movs	r4, #15
 8003e44:	193b      	adds	r3, r7, r4
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	236a      	movs	r3, #106	; 0x6a
 8003e4c:	33ff      	adds	r3, #255	; 0xff
 8003e4e:	0019      	movs	r1, r3
 8003e50:	0013      	movs	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	189b      	adds	r3, r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	18c3      	adds	r3, r0, r3
 8003e5a:	185b      	adds	r3, r3, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	23b4      	movs	r3, #180	; 0xb4
 8003e68:	0059      	lsls	r1, r3, #1
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	18c3      	adds	r3, r0, r3
 8003e74:	185b      	adds	r3, r3, r1
 8003e76:	193a      	adds	r2, r7, r4
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e7c:	193b      	adds	r3, r7, r4
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	236c      	movs	r3, #108	; 0x6c
 8003e84:	33ff      	adds	r3, #255	; 0xff
 8003e86:	0019      	movs	r1, r3
 8003e88:	0013      	movs	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	18c3      	adds	r3, r0, r3
 8003e92:	185b      	adds	r3, r3, r1
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	23bc      	movs	r3, #188	; 0xbc
 8003ea0:	0059      	lsls	r1, r3, #1
 8003ea2:	0013      	movs	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	189b      	adds	r3, r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	18c3      	adds	r3, r0, r3
 8003eac:	185b      	adds	r3, r3, r1
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eb2:	193b      	adds	r3, r7, r4
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	23be      	movs	r3, #190	; 0xbe
 8003eba:	0059      	lsls	r1, r3, #1
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	18c3      	adds	r3, r0, r3
 8003ec6:	185b      	adds	r3, r3, r1
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ecc:	193b      	adds	r3, r7, r4
 8003ece:	781a      	ldrb	r2, [r3, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	23c0      	movs	r3, #192	; 0xc0
 8003ed4:	0059      	lsls	r1, r3, #1
 8003ed6:	0013      	movs	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	189b      	adds	r3, r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	18c3      	adds	r3, r0, r3
 8003ee0:	185b      	adds	r3, r3, r1
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee6:	193b      	adds	r3, r7, r4
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	3201      	adds	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d3a1      	bcc.n	8003e42 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	466a      	mov	r2, sp
 8003f06:	0011      	movs	r1, r2
 8003f08:	001a      	movs	r2, r3
 8003f0a:	3210      	adds	r2, #16
 8003f0c:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003f0e:	c170      	stmia	r1!, {r4, r5, r6}
 8003f10:	ca30      	ldmia	r2!, {r4, r5}
 8003f12:	c130      	stmia	r1!, {r4, r5}
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f001 fe51 	bl	8005bc0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2224      	movs	r2, #36	; 0x24
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <HAL_PCD_Init+0x21c>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d103      	bne.n	8003f3e <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f807 	bl	8003f4c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b005      	add	sp, #20
 8003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f48:	000002a9 	.word	0x000002a9

08003f4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	23ba      	movs	r3, #186	; 0xba
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	2101      	movs	r1, #1
 8003f62:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	23b8      	movs	r3, #184	; 0xb8
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2254      	movs	r2, #84	; 0x54
 8003f72:	5a9b      	ldrh	r3, [r3, r2]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2201      	movs	r2, #1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	b299      	uxth	r1, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2254      	movs	r2, #84	; 0x54
 8003f80:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2254      	movs	r2, #84	; 0x54
 8003f86:	5a9b      	ldrh	r3, [r3, r2]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	b299      	uxth	r1, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2254      	movs	r2, #84	; 0x54
 8003f94:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b004      	add	sp, #16
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa0:	b5b0      	push	{r4, r5, r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f000 fbab 	bl	800470a <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb4:	4bce      	ldr	r3, [pc, #824]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	220c      	movs	r2, #12
 8003fba:	4013      	ands	r3, r2
 8003fbc:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fbe:	4bcc      	ldr	r3, [pc, #816]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x36>
 8003fd4:	e07e      	b.n	80040d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d007      	beq.n	8003fec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d112      	bne.n	8004008 <HAL_RCC_OscConfig+0x68>
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	025b      	lsls	r3, r3, #9
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d10d      	bne.n	8004008 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	4bc0      	ldr	r3, [pc, #768]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	029b      	lsls	r3, r3, #10
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <HAL_RCC_OscConfig+0x5a>
 8003ff8:	e06b      	b.n	80040d2 <HAL_RCC_OscConfig+0x132>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d167      	bne.n	80040d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f000 fb81 	bl	800470a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	025b      	lsls	r3, r3, #9
 8004010:	429a      	cmp	r2, r3
 8004012:	d107      	bne.n	8004024 <HAL_RCC_OscConfig+0x84>
 8004014:	4bb6      	ldr	r3, [pc, #728]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4bb5      	ldr	r3, [pc, #724]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	0249      	lsls	r1, r1, #9
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	e027      	b.n	8004074 <HAL_RCC_OscConfig+0xd4>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	23a0      	movs	r3, #160	; 0xa0
 800402a:	02db      	lsls	r3, r3, #11
 800402c:	429a      	cmp	r2, r3
 800402e:	d10e      	bne.n	800404e <HAL_RCC_OscConfig+0xae>
 8004030:	4baf      	ldr	r3, [pc, #700]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4bae      	ldr	r3, [pc, #696]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	02c9      	lsls	r1, r1, #11
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	4bac      	ldr	r3, [pc, #688]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4bab      	ldr	r3, [pc, #684]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	0249      	lsls	r1, r1, #9
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e012      	b.n	8004074 <HAL_RCC_OscConfig+0xd4>
 800404e:	4ba8      	ldr	r3, [pc, #672]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4ba7      	ldr	r3, [pc, #668]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004054:	49a7      	ldr	r1, [pc, #668]	; (80042f4 <HAL_RCC_OscConfig+0x354>)
 8004056:	400a      	ands	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	4ba5      	ldr	r3, [pc, #660]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	025b      	lsls	r3, r3, #9
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4ba1      	ldr	r3, [pc, #644]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4ba0      	ldr	r3, [pc, #640]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800406e:	49a2      	ldr	r1, [pc, #648]	; (80042f8 <HAL_RCC_OscConfig+0x358>)
 8004070:	400a      	ands	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fec2 	bl	8002e04 <HAL_GetTick>
 8004080:	0003      	movs	r3, r0
 8004082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004084:	e009      	b.n	800409a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004086:	f7fe febd 	bl	8002e04 <HAL_GetTick>
 800408a:	0002      	movs	r2, r0
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b64      	cmp	r3, #100	; 0x64
 8004092:	d902      	bls.n	800409a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	f000 fb38 	bl	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800409a:	4b95      	ldr	r3, [pc, #596]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	4013      	ands	r3, r2
 80040a4:	d0ef      	beq.n	8004086 <HAL_RCC_OscConfig+0xe6>
 80040a6:	e015      	b.n	80040d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe feac 	bl	8002e04 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b2:	f7fe fea7 	bl	8002e04 <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b64      	cmp	r3, #100	; 0x64
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e322      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80040c4:	4b8a      	ldr	r3, [pc, #552]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	029b      	lsls	r3, r3, #10
 80040cc:	4013      	ands	r3, r2
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x112>
 80040d0:	e000      	b.n	80040d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d100      	bne.n	80040e0 <HAL_RCC_OscConfig+0x140>
 80040de:	e08a      	b.n	80041f6 <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d13d      	bne.n	800416e <HAL_RCC_OscConfig+0x1ce>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d13a      	bne.n	800416e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80040f8:	4b7d      	ldr	r3, [pc, #500]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_RCC_OscConfig+0x16c>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e2fe      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410c:	4b78      	ldr	r3, [pc, #480]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4a7a      	ldr	r2, [pc, #488]	; (80042fc <HAL_RCC_OscConfig+0x35c>)
 8004112:	4013      	ands	r3, r2
 8004114:	0019      	movs	r1, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	021a      	lsls	r2, r3, #8
 800411c:	4b74      	ldr	r3, [pc, #464]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2209      	movs	r2, #9
 8004128:	4393      	bics	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	4b70      	ldr	r3, [pc, #448]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004134:	f000 fc1e 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004138:	0001      	movs	r1, r0
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	220f      	movs	r2, #15
 8004142:	4013      	ands	r3, r2
 8004144:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x360>)
 8004146:	5cd3      	ldrb	r3, [r2, r3]
 8004148:	000a      	movs	r2, r1
 800414a:	40da      	lsrs	r2, r3
 800414c:	4b6d      	ldr	r3, [pc, #436]	; (8004304 <HAL_RCC_OscConfig+0x364>)
 800414e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004150:	2513      	movs	r5, #19
 8004152:	197c      	adds	r4, r7, r5
 8004154:	2000      	movs	r0, #0
 8004156:	f7fe fe0f 	bl	8002d78 <HAL_InitTick>
 800415a:	0003      	movs	r3, r0
 800415c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800415e:	197b      	adds	r3, r7, r5
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d047      	beq.n	80041f6 <HAL_RCC_OscConfig+0x256>
      {
        return status;
 8004166:	2313      	movs	r3, #19
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	e2cd      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d027      	beq.n	80041c4 <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004174:	4b5e      	ldr	r3, [pc, #376]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2209      	movs	r2, #9
 800417a:	4393      	bics	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	430a      	orrs	r2, r1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe fe3d 	bl	8002e04 <HAL_GetTick>
 800418a:	0003      	movs	r3, r0
 800418c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004190:	f7fe fe38 	bl	8002e04 <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e2b3      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041a2:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2204      	movs	r2, #4
 80041a8:	4013      	ands	r3, r2
 80041aa:	d0f1      	beq.n	8004190 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_OscConfig+0x35c>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	e018      	b.n	80041f6 <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c4:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b49      	ldr	r3, [pc, #292]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7fe fe18 	bl	8002e04 <HAL_GetTick>
 80041d4:	0003      	movs	r3, r0
 80041d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7fe fe13 	bl	8002e04 <HAL_GetTick>
 80041de:	0002      	movs	r2, r0
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e28e      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041ec:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2204      	movs	r2, #4
 80041f2:	4013      	ands	r3, r2
 80041f4:	d1f1      	bne.n	80041da <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2210      	movs	r2, #16
 80041fc:	4013      	ands	r3, r2
 80041fe:	d100      	bne.n	8004202 <HAL_RCC_OscConfig+0x262>
 8004200:	e09e      	b.n	8004340 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d13f      	bne.n	8004288 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4013      	ands	r3, r2
 8004212:	d005      	beq.n	8004220 <HAL_RCC_OscConfig+0x280>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e274      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a38      	ldr	r2, [pc, #224]	; (8004308 <HAL_RCC_OscConfig+0x368>)
 8004226:	4013      	ands	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004234:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	0a19      	lsrs	r1, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	061a      	lsls	r2, r3, #24
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	0b5b      	lsrs	r3, r3, #13
 800424e:	3301      	adds	r3, #1
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	0212      	lsls	r2, r2, #8
 8004254:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	091b      	lsrs	r3, r3, #4
 800425c:	210f      	movs	r1, #15
 800425e:	400b      	ands	r3, r1
 8004260:	4927      	ldr	r1, [pc, #156]	; (8004300 <HAL_RCC_OscConfig+0x360>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x364>)
 8004268:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800426a:	2513      	movs	r5, #19
 800426c:	197c      	adds	r4, r7, r5
 800426e:	2000      	movs	r0, #0
 8004270:	f7fe fd82 	bl	8002d78 <HAL_InitTick>
 8004274:	0003      	movs	r3, r0
 8004276:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004278:	197b      	adds	r3, r7, r5
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05f      	beq.n	8004340 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8004280:	2313      	movs	r3, #19
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	e240      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d03d      	beq.n	800430c <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004290:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b16      	ldr	r3, [pc, #88]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 8004296:	2180      	movs	r1, #128	; 0x80
 8004298:	0049      	lsls	r1, r1, #1
 800429a:	430a      	orrs	r2, r1
 800429c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fe fdb1 	bl	8002e04 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a8:	f7fe fdac 	bl	8002e04 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e227      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <HAL_RCC_OscConfig+0x368>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	0019      	movs	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	0a19      	lsrs	r1, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	061a      	lsls	r2, r3, #24
 80042e8:	4b01      	ldr	r3, [pc, #4]	; (80042f0 <HAL_RCC_OscConfig+0x350>)
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	e027      	b.n	8004340 <HAL_RCC_OscConfig+0x3a0>
 80042f0:	40021000 	.word	0x40021000
 80042f4:	fffeffff 	.word	0xfffeffff
 80042f8:	fffbffff 	.word	0xfffbffff
 80042fc:	ffffe0ff 	.word	0xffffe0ff
 8004300:	080068f8 	.word	0x080068f8
 8004304:	20000028 	.word	0x20000028
 8004308:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800430c:	4bbd      	ldr	r3, [pc, #756]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4bbc      	ldr	r3, [pc, #752]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004312:	49bd      	ldr	r1, [pc, #756]	; (8004608 <HAL_RCC_OscConfig+0x668>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fe fd74 	bl	8002e04 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004322:	f7fe fd6f 	bl	8002e04 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e1ea      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004334:	4bb3      	ldr	r3, [pc, #716]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2208      	movs	r2, #8
 8004346:	4013      	ands	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d019      	beq.n	8004386 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004352:	4bac      	ldr	r3, [pc, #688]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004356:	4bab      	ldr	r3, [pc, #684]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004358:	2101      	movs	r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fe fd51 	bl	8002e04 <HAL_GetTick>
 8004362:	0003      	movs	r3, r0
 8004364:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fe fd4c 	bl	8002e04 <HAL_GetTick>
 800436c:	0002      	movs	r2, r0
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1c7      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800437a:	4ba2      	ldr	r3, [pc, #648]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800437c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d0f1      	beq.n	8004368 <HAL_RCC_OscConfig+0x3c8>
 8004384:	e018      	b.n	80043b8 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004386:	4b9f      	ldr	r3, [pc, #636]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800438a:	4b9e      	ldr	r3, [pc, #632]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800438c:	2101      	movs	r1, #1
 800438e:	438a      	bics	r2, r1
 8004390:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fe fd37 	bl	8002e04 <HAL_GetTick>
 8004396:	0003      	movs	r3, r0
 8004398:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800439c:	f7fe fd32 	bl	8002e04 <HAL_GetTick>
 80043a0:	0002      	movs	r2, r0
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e1ad      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ae:	4b95      	ldr	r3, [pc, #596]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	2202      	movs	r2, #2
 80043b4:	4013      	ands	r3, r2
 80043b6:	d1f1      	bne.n	800439c <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2204      	movs	r2, #4
 80043be:	4013      	ands	r3, r2
 80043c0:	d100      	bne.n	80043c4 <HAL_RCC_OscConfig+0x424>
 80043c2:	e0af      	b.n	8004524 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c4:	2327      	movs	r3, #39	; 0x27
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043cc:	4b8d      	ldr	r3, [pc, #564]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80043ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	055b      	lsls	r3, r3, #21
 80043d4:	4013      	ands	r3, r2
 80043d6:	d10a      	bne.n	80043ee <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d8:	4b8a      	ldr	r3, [pc, #552]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	4b89      	ldr	r3, [pc, #548]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	0549      	lsls	r1, r1, #21
 80043e2:	430a      	orrs	r2, r1
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80043e6:	2327      	movs	r3, #39	; 0x27
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	4b87      	ldr	r3, [pc, #540]	; (800460c <HAL_RCC_OscConfig+0x66c>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	4013      	ands	r3, r2
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fa:	4b84      	ldr	r3, [pc, #528]	; (800460c <HAL_RCC_OscConfig+0x66c>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b83      	ldr	r3, [pc, #524]	; (800460c <HAL_RCC_OscConfig+0x66c>)
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	0049      	lsls	r1, r1, #1
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004408:	f7fe fcfc 	bl	8002e04 <HAL_GetTick>
 800440c:	0003      	movs	r3, r0
 800440e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fe fcf7 	bl	8002e04 <HAL_GetTick>
 8004416:	0002      	movs	r2, r0
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b64      	cmp	r3, #100	; 0x64
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e172      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b79      	ldr	r3, [pc, #484]	; (800460c <HAL_RCC_OscConfig+0x66c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4013      	ands	r3, r2
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	2380      	movs	r3, #128	; 0x80
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	429a      	cmp	r2, r3
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x4ac>
 800443c:	4b71      	ldr	r3, [pc, #452]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800443e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004440:	4b70      	ldr	r3, [pc, #448]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004442:	2180      	movs	r1, #128	; 0x80
 8004444:	0049      	lsls	r1, r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	651a      	str	r2, [r3, #80]	; 0x50
 800444a:	e031      	b.n	80044b0 <HAL_RCC_OscConfig+0x510>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10c      	bne.n	800446e <HAL_RCC_OscConfig+0x4ce>
 8004454:	4b6b      	ldr	r3, [pc, #428]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004458:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800445a:	496b      	ldr	r1, [pc, #428]	; (8004608 <HAL_RCC_OscConfig+0x668>)
 800445c:	400a      	ands	r2, r1
 800445e:	651a      	str	r2, [r3, #80]	; 0x50
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004464:	4b67      	ldr	r3, [pc, #412]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004466:	496a      	ldr	r1, [pc, #424]	; (8004610 <HAL_RCC_OscConfig+0x670>)
 8004468:	400a      	ands	r2, r1
 800446a:	651a      	str	r2, [r3, #80]	; 0x50
 800446c:	e020      	b.n	80044b0 <HAL_RCC_OscConfig+0x510>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	23a0      	movs	r3, #160	; 0xa0
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	429a      	cmp	r2, r3
 8004478:	d10e      	bne.n	8004498 <HAL_RCC_OscConfig+0x4f8>
 800447a:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800447c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	00c9      	lsls	r1, r1, #3
 8004484:	430a      	orrs	r2, r1
 8004486:	651a      	str	r2, [r3, #80]	; 0x50
 8004488:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800448a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800448c:	4b5d      	ldr	r3, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800448e:	2180      	movs	r1, #128	; 0x80
 8004490:	0049      	lsls	r1, r1, #1
 8004492:	430a      	orrs	r2, r1
 8004494:	651a      	str	r2, [r3, #80]	; 0x50
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0x510>
 8004498:	4b5a      	ldr	r3, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800449a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800449c:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800449e:	495a      	ldr	r1, [pc, #360]	; (8004608 <HAL_RCC_OscConfig+0x668>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	651a      	str	r2, [r3, #80]	; 0x50
 80044a4:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80044a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044a8:	4b56      	ldr	r3, [pc, #344]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80044aa:	4959      	ldr	r1, [pc, #356]	; (8004610 <HAL_RCC_OscConfig+0x670>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b8:	f7fe fca4 	bl	8002e04 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c0:	e009      	b.n	80044d6 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fe fc9f 	bl	8002e04 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	4a51      	ldr	r2, [pc, #324]	; (8004614 <HAL_RCC_OscConfig+0x674>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e119      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044d6:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80044d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d0ef      	beq.n	80044c2 <HAL_RCC_OscConfig+0x522>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e4:	f7fe fc8e 	bl	8002e04 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044ec:	e009      	b.n	8004502 <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ee:	f7fe fc89 	bl	8002e04 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_RCC_OscConfig+0x674>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e103      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004502:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4013      	ands	r3, r2
 800450c:	d1ef      	bne.n	80044ee <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800450e:	2327      	movs	r3, #39	; 0x27
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800451a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800451e:	493e      	ldr	r1, [pc, #248]	; (8004618 <HAL_RCC_OscConfig+0x678>)
 8004520:	400a      	ands	r2, r1
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2220      	movs	r2, #32
 800452a:	4013      	ands	r3, r2
 800452c:	d049      	beq.n	80045c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d026      	beq.n	8004584 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004536:	4b33      	ldr	r3, [pc, #204]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800453c:	2101      	movs	r1, #1
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004548:	2101      	movs	r1, #1
 800454a:	430a      	orrs	r2, r1
 800454c:	635a      	str	r2, [r3, #52]	; 0x34
 800454e:	4b33      	ldr	r3, [pc, #204]	; (800461c <HAL_RCC_OscConfig+0x67c>)
 8004550:	6a1a      	ldr	r2, [r3, #32]
 8004552:	4b32      	ldr	r3, [pc, #200]	; (800461c <HAL_RCC_OscConfig+0x67c>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0189      	lsls	r1, r1, #6
 8004558:	430a      	orrs	r2, r1
 800455a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe fc52 	bl	8002e04 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004566:	f7fe fc4d 	bl	8002e04 <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0c8      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2202      	movs	r2, #2
 800457e:	4013      	ands	r3, r2
 8004580:	d0f1      	beq.n	8004566 <HAL_RCC_OscConfig+0x5c6>
 8004582:	e01e      	b.n	80045c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 800458a:	2101      	movs	r1, #1
 800458c:	438a      	bics	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_RCC_OscConfig+0x67c>)
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	4b21      	ldr	r3, [pc, #132]	; (800461c <HAL_RCC_OscConfig+0x67c>)
 8004596:	4922      	ldr	r1, [pc, #136]	; (8004620 <HAL_RCC_OscConfig+0x680>)
 8004598:	400a      	ands	r2, r1
 800459a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe fc32 	bl	8002e04 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a6:	f7fe fc2d 	bl	8002e04 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e0a8      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d1f1      	bne.n	80045a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d100      	bne.n	80045cc <HAL_RCC_OscConfig+0x62c>
 80045ca:	e09d      	b.n	8004708 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	d100      	bne.n	80045d4 <HAL_RCC_OscConfig+0x634>
 80045d2:	e076      	b.n	80046c2 <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d157      	bne.n	800468c <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_RCC_OscConfig+0x664>)
 80045e2:	4910      	ldr	r1, [pc, #64]	; (8004624 <HAL_RCC_OscConfig+0x684>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe fc0c 	bl	8002e04 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80045f0:	e01a      	b.n	8004628 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f2:	f7fe fc07 	bl	8002e04 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d913      	bls.n	8004628 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e082      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
 8004604:	40021000 	.word	0x40021000
 8004608:	fffffeff 	.word	0xfffffeff
 800460c:	40007000 	.word	0x40007000
 8004610:	fffffbff 	.word	0xfffffbff
 8004614:	00001388 	.word	0x00001388
 8004618:	efffffff 	.word	0xefffffff
 800461c:	40010000 	.word	0x40010000
 8004620:	ffffdfff 	.word	0xffffdfff
 8004624:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004628:	4b3a      	ldr	r3, [pc, #232]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	049b      	lsls	r3, r3, #18
 8004630:	4013      	ands	r3, r2
 8004632:	d1de      	bne.n	80045f2 <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4a37      	ldr	r2, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x778>)
 800463a:	4013      	ands	r3, r2
 800463c:	0019      	movs	r1, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	431a      	orrs	r2, r3
 800464e:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 8004650:	430a      	orrs	r2, r1
 8004652:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004654:	4b2f      	ldr	r3, [pc, #188]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	0449      	lsls	r1, r1, #17
 800465e:	430a      	orrs	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004662:	f7fe fbcf 	bl	8002e04 <HAL_GetTick>
 8004666:	0003      	movs	r3, r0
 8004668:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466c:	f7fe fbca 	bl	8002e04 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e045      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	049b      	lsls	r3, r3, #18
 8004686:	4013      	ands	r3, r2
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x6cc>
 800468a:	e03d      	b.n	8004708 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468c:	4b21      	ldr	r3, [pc, #132]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b20      	ldr	r3, [pc, #128]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 8004692:	4922      	ldr	r1, [pc, #136]	; (800471c <HAL_RCC_OscConfig+0x77c>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe fbb4 	bl	8002e04 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe fbaf 	bl	8002e04 <HAL_GetTick>
 80046a6:	0002      	movs	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e02a      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046b4:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	049b      	lsls	r3, r3, #18
 80046bc:	4013      	ands	r3, r2
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x702>
 80046c0:	e022      	b.n	8004708 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e01d      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_RCC_OscConfig+0x774>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	025b      	lsls	r3, r3, #9
 80046da:	401a      	ands	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d10f      	bne.n	8004704 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	23f0      	movs	r3, #240	; 0xf0
 80046e8:	039b      	lsls	r3, r3, #14
 80046ea:	401a      	ands	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	23c0      	movs	r3, #192	; 0xc0
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	401a      	ands	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b00a      	add	sp, #40	; 0x28
 8004710:	bdb0      	pop	{r4, r5, r7, pc}
 8004712:	46c0      	nop			; (mov r8, r8)
 8004714:	40021000 	.word	0x40021000
 8004718:	ff02ffff 	.word	0xff02ffff
 800471c:	feffffff 	.word	0xfeffffff

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b5b0      	push	{r4, r5, r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e10d      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b88      	ldr	r3, [pc, #544]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4013      	ands	r3, r2
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d911      	bls.n	8004766 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b85      	ldr	r3, [pc, #532]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4393      	bics	r3, r2
 800474a:	0019      	movs	r1, r3
 800474c:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004754:	4b80      	ldr	r3, [pc, #512]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2201      	movs	r2, #1
 800475a:	4013      	ands	r3, r2
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d001      	beq.n	8004766 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0f4      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2202      	movs	r2, #2
 800476c:	4013      	ands	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004770:	4b7a      	ldr	r3, [pc, #488]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	22f0      	movs	r2, #240	; 0xf0
 8004776:	4393      	bics	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	4b77      	ldr	r3, [pc, #476]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 8004780:	430a      	orrs	r2, r1
 8004782:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2201      	movs	r2, #1
 800478a:	4013      	ands	r3, r2
 800478c:	d100      	bne.n	8004790 <HAL_RCC_ClockConfig+0x70>
 800478e:	e089      	b.n	80048a4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004798:	4b70      	ldr	r3, [pc, #448]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	4013      	ands	r3, r2
 80047a2:	d120      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0d3      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	049b      	lsls	r3, r3, #18
 80047b8:	4013      	ands	r3, r2
 80047ba:	d114      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0c7      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c8:	4b64      	ldr	r3, [pc, #400]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2204      	movs	r2, #4
 80047ce:	4013      	ands	r3, r2
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0bc      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80047d6:	4b61      	ldr	r3, [pc, #388]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0b4      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b5d      	ldr	r3, [pc, #372]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2203      	movs	r2, #3
 80047ec:	4393      	bics	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047fa:	f7fe fb03 	bl	8002e04 <HAL_GetTick>
 80047fe:	0003      	movs	r3, r0
 8004800:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d111      	bne.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800480a:	e009      	b.n	8004820 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fe fafa 	bl	8002e04 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_RCC_ClockConfig+0x240>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e097      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004820:	4b4e      	ldr	r3, [pc, #312]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	220c      	movs	r2, #12
 8004826:	4013      	ands	r3, r2
 8004828:	2b08      	cmp	r3, #8
 800482a:	d1ef      	bne.n	800480c <HAL_RCC_ClockConfig+0xec>
 800482c:	e03a      	b.n	80048a4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b03      	cmp	r3, #3
 8004834:	d111      	bne.n	800485a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004836:	e009      	b.n	800484c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fe fae4 	bl	8002e04 <HAL_GetTick>
 800483c:	0002      	movs	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	4a47      	ldr	r2, [pc, #284]	; (8004960 <HAL_RCC_ClockConfig+0x240>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e081      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800484c:	4b43      	ldr	r3, [pc, #268]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	220c      	movs	r2, #12
 8004852:	4013      	ands	r3, r2
 8004854:	2b0c      	cmp	r3, #12
 8004856:	d1ef      	bne.n	8004838 <HAL_RCC_ClockConfig+0x118>
 8004858:	e024      	b.n	80048a4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d11b      	bne.n	800489a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004862:	e009      	b.n	8004878 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fe face 	bl	8002e04 <HAL_GetTick>
 8004868:	0002      	movs	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <HAL_RCC_ClockConfig+0x240>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e06b      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004878:	4b38      	ldr	r3, [pc, #224]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	220c      	movs	r2, #12
 800487e:	4013      	ands	r3, r2
 8004880:	2b04      	cmp	r3, #4
 8004882:	d1ef      	bne.n	8004864 <HAL_RCC_ClockConfig+0x144>
 8004884:	e00e      	b.n	80048a4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004886:	f7fe fabd 	bl	8002e04 <HAL_GetTick>
 800488a:	0002      	movs	r2, r0
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	4a33      	ldr	r2, [pc, #204]	; (8004960 <HAL_RCC_ClockConfig+0x240>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e05a      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800489a:	4b30      	ldr	r3, [pc, #192]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	220c      	movs	r2, #12
 80048a0:	4013      	ands	r3, r2
 80048a2:	d1f0      	bne.n	8004886 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	4013      	ands	r3, r2
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d211      	bcs.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2201      	movs	r2, #1
 80048b8:	4393      	bics	r3, r2
 80048ba:	0019      	movs	r1, r3
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCC_ClockConfig+0x238>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03c      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2204      	movs	r2, #4
 80048dc:	4013      	ands	r3, r2
 80048de:	d009      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <HAL_RCC_ClockConfig+0x244>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 80048f0:	430a      	orrs	r2, r1
 80048f2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2208      	movs	r2, #8
 80048fa:	4013      	ands	r3, r2
 80048fc:	d00a      	beq.n	8004914 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a19      	ldr	r2, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x248>)
 8004904:	4013      	ands	r3, r2
 8004906:	0019      	movs	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	00da      	lsls	r2, r3, #3
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 8004910:	430a      	orrs	r2, r1
 8004912:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004914:	f000 f82e 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004918:	0001      	movs	r1, r0
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <HAL_RCC_ClockConfig+0x23c>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	220f      	movs	r2, #15
 8004922:	4013      	ands	r3, r2
 8004924:	4a11      	ldr	r2, [pc, #68]	; (800496c <HAL_RCC_ClockConfig+0x24c>)
 8004926:	5cd3      	ldrb	r3, [r2, r3]
 8004928:	000a      	movs	r2, r1
 800492a:	40da      	lsrs	r2, r3
 800492c:	4b10      	ldr	r3, [pc, #64]	; (8004970 <HAL_RCC_ClockConfig+0x250>)
 800492e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004930:	250b      	movs	r5, #11
 8004932:	197c      	adds	r4, r7, r5
 8004934:	2000      	movs	r0, #0
 8004936:	f7fe fa1f 	bl	8002d78 <HAL_InitTick>
 800493a:	0003      	movs	r3, r0
 800493c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800493e:	197b      	adds	r3, r7, r5
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004946:	230b      	movs	r3, #11
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	e000      	b.n	8004950 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b004      	add	sp, #16
 8004956:	bdb0      	pop	{r4, r5, r7, pc}
 8004958:	40022000 	.word	0x40022000
 800495c:	40021000 	.word	0x40021000
 8004960:	00001388 	.word	0x00001388
 8004964:	fffff8ff 	.word	0xfffff8ff
 8004968:	ffffc7ff 	.word	0xffffc7ff
 800496c:	080068f8 	.word	0x080068f8
 8004970:	20000028 	.word	0x20000028

08004974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xf4>)
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	220c      	movs	r2, #12
 8004984:	4013      	ands	r3, r2
 8004986:	2b08      	cmp	r3, #8
 8004988:	d00e      	beq.n	80049a8 <HAL_RCC_GetSysClockFreq+0x34>
 800498a:	2b0c      	cmp	r3, #12
 800498c:	d00f      	beq.n	80049ae <HAL_RCC_GetSysClockFreq+0x3a>
 800498e:	2b04      	cmp	r3, #4
 8004990:	d157      	bne.n	8004a42 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004992:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	4013      	ands	r3, r2
 800499a:	d002      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800499c:	4b33      	ldr	r3, [pc, #204]	; (8004a6c <HAL_RCC_GetSysClockFreq+0xf8>)
 800499e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80049a0:	e05d      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80049a2:	4b33      	ldr	r3, [pc, #204]	; (8004a70 <HAL_RCC_GetSysClockFreq+0xfc>)
 80049a4:	613b      	str	r3, [r7, #16]
      break;
 80049a6:	e05a      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049a8:	4b32      	ldr	r3, [pc, #200]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x100>)
 80049aa:	613b      	str	r3, [r7, #16]
      break;
 80049ac:	e057      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0c9b      	lsrs	r3, r3, #18
 80049b2:	220f      	movs	r2, #15
 80049b4:	4013      	ands	r3, r2
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x104>)
 80049b8:	5cd3      	ldrb	r3, [r2, r3]
 80049ba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	0d9b      	lsrs	r3, r3, #22
 80049c0:	2203      	movs	r2, #3
 80049c2:	4013      	ands	r3, r2
 80049c4:	3301      	adds	r3, #1
 80049c6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	4013      	ands	r3, r2
 80049d2:	d00f      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	000a      	movs	r2, r1
 80049d8:	0152      	lsls	r2, r2, #5
 80049da:	1a52      	subs	r2, r2, r1
 80049dc:	0193      	lsls	r3, r2, #6
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	185b      	adds	r3, r3, r1
 80049e4:	025b      	lsls	r3, r3, #9
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fb95 	bl	8000118 <__udivsi3>
 80049ee:	0003      	movs	r3, r0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e023      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80049f4:	4b1c      	ldr	r3, [pc, #112]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xf4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2210      	movs	r2, #16
 80049fa:	4013      	ands	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80049fe:	68b9      	ldr	r1, [r7, #8]
 8004a00:	000a      	movs	r2, r1
 8004a02:	0152      	lsls	r2, r2, #5
 8004a04:	1a52      	subs	r2, r2, r1
 8004a06:	0193      	lsls	r3, r2, #6
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	185b      	adds	r3, r3, r1
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fb fb80 	bl	8000118 <__udivsi3>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	000a      	movs	r2, r1
 8004a22:	0152      	lsls	r2, r2, #5
 8004a24:	1a52      	subs	r2, r2, r1
 8004a26:	0193      	lsls	r3, r2, #6
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	185b      	adds	r3, r3, r1
 8004a2e:	029b      	lsls	r3, r3, #10
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f7fb fb70 	bl	8000118 <__udivsi3>
 8004a38:	0003      	movs	r3, r0
 8004a3a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	613b      	str	r3, [r7, #16]
      break;
 8004a40:	e00d      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	0b5b      	lsrs	r3, r3, #13
 8004a48:	2207      	movs	r2, #7
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	2280      	movs	r2, #128	; 0x80
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	409a      	lsls	r2, r3
 8004a58:	0013      	movs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
      break;
 8004a5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004a5e:	693b      	ldr	r3, [r7, #16]
}
 8004a60:	0018      	movs	r0, r3
 8004a62:	46bd      	mov	sp, r7
 8004a64:	b006      	add	sp, #24
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	003d0900 	.word	0x003d0900
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	007a1200 	.word	0x007a1200
 8004a78:	08006910 	.word	0x08006910

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	20000028 	.word	0x20000028

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff2 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a98:	0001      	movs	r1, r0
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	40d9      	lsrs	r1, r3
 8004aaa:	000b      	movs	r3, r1
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	08006908 	.word	0x08006908

08004abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ac0:	f7ff ffdc 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ac4:	0001      	movs	r1, r0
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	0adb      	lsrs	r3, r3, #11
 8004acc:	2207      	movs	r2, #7
 8004ace:	4013      	ands	r3, r2
 8004ad0:	4a04      	ldr	r2, [pc, #16]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	40d9      	lsrs	r1, r3
 8004ad6:	000b      	movs	r3, r1
}
 8004ad8:	0018      	movs	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	08006908 	.word	0x08006908

08004ae8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2220      	movs	r2, #32
 8004af6:	4013      	ands	r3, r2
 8004af8:	d106      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	4013      	ands	r3, r2
 8004b04:	d100      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004b06:	e0dd      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004b08:	2317      	movs	r3, #23
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b10:	4b9c      	ldr	r3, [pc, #624]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	055b      	lsls	r3, r3, #21
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d10a      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b99      	ldr	r3, [pc, #612]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b20:	4b98      	ldr	r3, [pc, #608]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	0549      	lsls	r1, r1, #21
 8004b26:	430a      	orrs	r2, r1
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004b2a:	2317      	movs	r3, #23
 8004b2c:	18fb      	adds	r3, r7, r3
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b32:	4b95      	ldr	r3, [pc, #596]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	2380      	movs	r3, #128	; 0x80
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d11a      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3e:	4b92      	ldr	r3, [pc, #584]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b91      	ldr	r3, [pc, #580]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	0049      	lsls	r1, r1, #1
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4c:	f7fe f95a 	bl	8002e04 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fe f955 	bl	8002e04 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e108      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	4b87      	ldr	r3, [pc, #540]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004b74:	4b83      	ldr	r3, [pc, #524]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	23c0      	movs	r3, #192	; 0xc0
 8004b7a:	039b      	lsls	r3, r3, #14
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	23c0      	movs	r3, #192	; 0xc0
 8004b86:	039b      	lsls	r3, r3, #14
 8004b88:	4013      	ands	r3, r2
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	23c0      	movs	r3, #192	; 0xc0
 8004b96:	039b      	lsls	r3, r3, #14
 8004b98:	4013      	ands	r3, r2
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	23c0      	movs	r3, #192	; 0xc0
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	401a      	ands	r2, r3
 8004baa:	23c0      	movs	r3, #192	; 0xc0
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004bb2:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	401a      	ands	r2, r3
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	029b      	lsls	r3, r3, #10
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d101      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0d8      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004bc8:	4b6e      	ldr	r3, [pc, #440]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bcc:	23c0      	movs	r3, #192	; 0xc0
 8004bce:	029b      	lsls	r3, r3, #10
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d049      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	23c0      	movs	r3, #192	; 0xc0
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	4013      	ands	r3, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d10d      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	23c0      	movs	r3, #192	; 0xc0
 8004bfa:	029b      	lsls	r3, r3, #10
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d034      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d02e      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c10:	4b5c      	ldr	r3, [pc, #368]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c14:	4a5d      	ldr	r2, [pc, #372]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c1a:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c1e:	4b59      	ldr	r3, [pc, #356]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	0309      	lsls	r1, r1, #12
 8004c24:	430a      	orrs	r2, r1
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c2c:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c2e:	4958      	ldr	r1, [pc, #352]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004c34:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4013      	ands	r3, r2
 8004c42:	d014      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe f8de 	bl	8002e04 <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c4c:	e009      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fe f8d9 	bl	8002e04 <HAL_GetTick>
 8004c52:	0002      	movs	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	4a4e      	ldr	r2, [pc, #312]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e08b      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c62:	4b48      	ldr	r3, [pc, #288]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d0ef      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	23c0      	movs	r3, #192	; 0xc0
 8004c74:	029b      	lsls	r3, r3, #10
 8004c76:	401a      	ands	r2, r3
 8004c78:	23c0      	movs	r3, #192	; 0xc0
 8004c7a:	029b      	lsls	r3, r3, #10
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d10c      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004c80:	4b40      	ldr	r3, [pc, #256]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a44      	ldr	r2, [pc, #272]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	23c0      	movs	r3, #192	; 0xc0
 8004c90:	039b      	lsls	r3, r3, #14
 8004c92:	401a      	ands	r2, r3
 8004c94:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c96:	430a      	orrs	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	4b3a      	ldr	r3, [pc, #232]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	23c0      	movs	r3, #192	; 0xc0
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004caa:	430a      	orrs	r2, r1
 8004cac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cae:	2317      	movs	r3, #23
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cbe:	4937      	ldr	r1, [pc, #220]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cce:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	4393      	bics	r3, r2
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	4b29      	ldr	r3, [pc, #164]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf0:	220c      	movs	r2, #12
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2204      	movs	r2, #4
 8004d06:	4013      	ands	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	695a      	ldr	r2, [r3, #20]
 8004d18:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2208      	movs	r2, #8
 8004d24:	4013      	ands	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2240      	movs	r2, #64	; 0x40
 8004d42:	4013      	ands	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d46:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d56:	430a      	orrs	r2, r1
 8004d58:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	4013      	ands	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	4a10      	ldr	r2, [pc, #64]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b006      	add	sp, #24
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	fffcffff 	.word	0xfffcffff
 8004d90:	fff7ffff 	.word	0xfff7ffff
 8004d94:	00001388 	.word	0x00001388
 8004d98:	ffcfffff 	.word	0xffcfffff
 8004d9c:	efffffff 	.word	0xefffffff
 8004da0:	fffff3ff 	.word	0xfffff3ff
 8004da4:	ffffcfff 	.word	0xffffcfff
 8004da8:	fbffffff 	.word	0xfbffffff
 8004dac:	fff3ffff 	.word	0xfff3ffff

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01e      	b.n	8004e00 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2239      	movs	r2, #57	; 0x39
 8004dc6:	5c9b      	ldrb	r3, [r3, r2]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d107      	bne.n	8004dde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2238      	movs	r2, #56	; 0x38
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fd fe6b 	bl	8002ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2239      	movs	r2, #57	; 0x39
 8004de2:	2102      	movs	r1, #2
 8004de4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	0019      	movs	r1, r3
 8004df0:	0010      	movs	r0, r2
 8004df2:	f000 f8e9 	bl	8004fc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2239      	movs	r2, #57	; 0x39
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b002      	add	sp, #8
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2239      	movs	r2, #57	; 0x39
 8004e14:	2102      	movs	r1, #2
 8004e16:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2207      	movs	r2, #7
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d007      	beq.n	8004e3a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2239      	movs	r2, #57	; 0x39
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2238      	movs	r2, #56	; 0x38
 8004e5a:	5c9b      	ldrb	r3, [r3, r2]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x18>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0ab      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x170>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2238      	movs	r2, #56	; 0x38
 8004e68:	2101      	movs	r1, #1
 8004e6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2239      	movs	r2, #57	; 0x39
 8004e70:	2102      	movs	r1, #2
 8004e72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2277      	movs	r2, #119	; 0x77
 8004e80:	4393      	bics	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a4f      	ldr	r2, [pc, #316]	; (8004fc4 <HAL_TIM_ConfigClockSource+0x178>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d100      	bne.n	8004e9e <HAL_TIM_ConfigClockSource+0x52>
 8004e9c:	e06b      	b.n	8004f76 <HAL_TIM_ConfigClockSource+0x12a>
 8004e9e:	d80e      	bhi.n	8004ebe <HAL_TIM_ConfigClockSource+0x72>
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d100      	bne.n	8004ea6 <HAL_TIM_ConfigClockSource+0x5a>
 8004ea4:	e077      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x14a>
 8004ea6:	d803      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x64>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d100      	bne.n	8004eae <HAL_TIM_ConfigClockSource+0x62>
 8004eac:	e073      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004eae:	e07c      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d100      	bne.n	8004eb6 <HAL_TIM_ConfigClockSource+0x6a>
 8004eb4:	e06f      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x14a>
 8004eb6:	2b30      	cmp	r3, #48	; 0x30
 8004eb8:	d100      	bne.n	8004ebc <HAL_TIM_ConfigClockSource+0x70>
 8004eba:	e06c      	b.n	8004f96 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004ebc:	e075      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ebe:	2b70      	cmp	r3, #112	; 0x70
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_TIM_ConfigClockSource+0x94>
 8004ec2:	d804      	bhi.n	8004ece <HAL_TIM_ConfigClockSource+0x82>
 8004ec4:	2b50      	cmp	r3, #80	; 0x50
 8004ec6:	d036      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0xea>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d044      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004ecc:	e06d      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ece:	2280      	movs	r2, #128	; 0x80
 8004ed0:	0152      	lsls	r2, r2, #5
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d068      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x15c>
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	0192      	lsls	r2, r2, #6
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d017      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004ede:	e064      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6899      	ldr	r1, [r3, #8]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f000 f938 	bl	8005164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2277      	movs	r2, #119	; 0x77
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	609a      	str	r2, [r3, #8]
      break;
 8004f0c:	e04d      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f000 f921 	bl	8005164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	01c9      	lsls	r1, r1, #7
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
      break;
 8004f34:	e039      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	001a      	movs	r2, r3
 8004f44:	f000 f894 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2150      	movs	r1, #80	; 0x50
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 f8ee 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e029      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	001a      	movs	r2, r3
 8004f64:	f000 f8b2 	bl	80050cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2160      	movs	r1, #96	; 0x60
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f000 f8de 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004f74:	e019      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	001a      	movs	r2, r3
 8004f84:	f000 f874 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2140      	movs	r1, #64	; 0x40
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f000 f8ce 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004f94:	e009      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	0010      	movs	r0, r2
 8004fa2:	f000 f8c5 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004fa6:	e000      	b.n	8004faa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004fa8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2239      	movs	r2, #57	; 0x39
 8004fae:	2101      	movs	r1, #1
 8004fb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2238      	movs	r2, #56	; 0x38
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b004      	add	sp, #16
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	ffff00ff 	.word	0xffff00ff

08004fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0x2a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <TIM_Base_SetConfig+0x9c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0x2a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <TIM_Base_SetConfig+0xa0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2270      	movs	r2, #112	; 0x70
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	05db      	lsls	r3, r3, #23
 800500a:	429a      	cmp	r2, r3
 800500c:	d007      	beq.n	800501e <TIM_Base_SetConfig+0x56>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_Base_SetConfig+0x9c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_Base_SetConfig+0x56>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a13      	ldr	r2, [pc, #76]	; (8005068 <TIM_Base_SetConfig+0xa0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <TIM_Base_SetConfig+0xa4>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	4393      	bics	r3, r2
 8005036:	001a      	movs	r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	615a      	str	r2, [r3, #20]
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b004      	add	sp, #16
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40010800 	.word	0x40010800
 8005068:	40011400 	.word	0x40011400
 800506c:	fffffcff 	.word	0xfffffcff

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2201      	movs	r2, #1
 8005088:	4393      	bics	r3, r2
 800508a:	001a      	movs	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	22f0      	movs	r2, #240	; 0xf0
 800509a:	4393      	bics	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	220a      	movs	r2, #10
 80050ac:	4393      	bics	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b006      	add	sp, #24
 80050ca:	bd80      	pop	{r7, pc}

080050cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	2210      	movs	r2, #16
 80050de:	4393      	bics	r3, r2
 80050e0:	001a      	movs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <TIM_TI2_ConfigInputStage+0x60>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	22a0      	movs	r2, #160	; 0xa0
 8005108:	4393      	bics	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	ffff0fff 	.word	0xffff0fff

08005130 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2270      	movs	r2, #112	; 0x70
 8005144:	4393      	bics	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	2207      	movs	r2, #7
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <TIM_ETR_SetConfig+0x3c>)
 800517c:	4013      	ands	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	431a      	orrs	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b006      	add	sp, #24
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	ffff00ff 	.word	0xffff00ff

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2238      	movs	r2, #56	; 0x38
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e032      	b.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2238      	movs	r2, #56	; 0x38
 80051c0:	2101      	movs	r1, #1
 80051c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2239      	movs	r2, #57	; 0x39
 80051c8:	2102      	movs	r1, #2
 80051ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2270      	movs	r2, #112	; 0x70
 80051e0:	4393      	bics	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2280      	movs	r2, #128	; 0x80
 80051f2:	4393      	bics	r3, r2
 80051f4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2239      	movs	r2, #57	; 0x39
 8005214:	2101      	movs	r1, #1
 8005216:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2238      	movs	r2, #56	; 0x38
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	0018      	movs	r0, r3
 8005224:	46bd      	mov	sp, r7
 8005226:	b004      	add	sp, #16
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e044      	b.n	80052c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005242:	2b00      	cmp	r3, #0
 8005244:	d107      	bne.n	8005256 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2270      	movs	r2, #112	; 0x70
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	0018      	movs	r0, r3
 8005252:	f7fd fc45 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	; 0x24
 800525a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2101      	movs	r1, #1
 8005268:	438a      	bics	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	0018      	movs	r0, r3
 8005270:	f000 f830 	bl	80052d4 <UART_SetConfig>
 8005274:	0003      	movs	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e024      	b.n	80052c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	0018      	movs	r0, r3
 800528a:	f000 fb3b 	bl	8005904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	490d      	ldr	r1, [pc, #52]	; (80052d0 <HAL_UART_Init+0xa4>)
 800529a:	400a      	ands	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	212a      	movs	r1, #42	; 0x2a
 80052aa:	438a      	bics	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2101      	movs	r1, #1
 80052ba:	430a      	orrs	r2, r1
 80052bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fbd3 	bl	8005a6c <UART_CheckIdleState>
 80052c6:	0003      	movs	r3, r0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	ffffb7ff 	.word	0xffffb7ff

080052d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	b5b0      	push	{r4, r5, r7, lr}
 80052d6:	b08e      	sub	sp, #56	; 0x38
 80052d8:	af00      	add	r7, sp, #0
 80052da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80052dc:	231b      	movs	r3, #27
 80052de:	2218      	movs	r2, #24
 80052e0:	4694      	mov	ip, r2
 80052e2:	44bc      	add	ip, r7
 80052e4:	4463      	add	r3, ip
 80052e6:	2210      	movs	r2, #16
 80052e8:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80052ee:	2313      	movs	r3, #19
 80052f0:	2218      	movs	r2, #24
 80052f2:	4694      	mov	ip, r2
 80052f4:	44bc      	add	ip, r7
 80052f6:	4463      	add	r3, ip
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	431a      	orrs	r2, r3
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	431a      	orrs	r2, r3
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4313      	orrs	r3, r2
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4ac8      	ldr	r2, [pc, #800]	; (8005640 <UART_SetConfig+0x36c>)
 8005320:	4013      	ands	r3, r2
 8005322:	0019      	movs	r1, r3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4ac3      	ldr	r2, [pc, #780]	; (8005644 <UART_SetConfig+0x370>)
 8005336:	4013      	ands	r3, r2
 8005338:	0019      	movs	r1, r3
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4abd      	ldr	r2, [pc, #756]	; (8005648 <UART_SetConfig+0x374>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800535c:	4313      	orrs	r3, r2
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	4ab9      	ldr	r2, [pc, #740]	; (800564c <UART_SetConfig+0x378>)
 8005368:	4013      	ands	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4ab5      	ldr	r2, [pc, #724]	; (8005650 <UART_SetConfig+0x37c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d134      	bne.n	80053ea <UART_SetConfig+0x116>
 8005380:	4bb4      	ldr	r3, [pc, #720]	; (8005654 <UART_SetConfig+0x380>)
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	2203      	movs	r2, #3
 8005386:	4013      	ands	r3, r2
 8005388:	2b01      	cmp	r3, #1
 800538a:	d015      	beq.n	80053b8 <UART_SetConfig+0xe4>
 800538c:	d304      	bcc.n	8005398 <UART_SetConfig+0xc4>
 800538e:	2b02      	cmp	r3, #2
 8005390:	d00a      	beq.n	80053a8 <UART_SetConfig+0xd4>
 8005392:	2b03      	cmp	r3, #3
 8005394:	d018      	beq.n	80053c8 <UART_SetConfig+0xf4>
 8005396:	e01f      	b.n	80053d8 <UART_SetConfig+0x104>
 8005398:	231b      	movs	r3, #27
 800539a:	2218      	movs	r2, #24
 800539c:	4694      	mov	ip, r2
 800539e:	44bc      	add	ip, r7
 80053a0:	4463      	add	r3, ip
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e0ab      	b.n	8005500 <UART_SetConfig+0x22c>
 80053a8:	231b      	movs	r3, #27
 80053aa:	2218      	movs	r2, #24
 80053ac:	4694      	mov	ip, r2
 80053ae:	44bc      	add	ip, r7
 80053b0:	4463      	add	r3, ip
 80053b2:	2202      	movs	r2, #2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e0a3      	b.n	8005500 <UART_SetConfig+0x22c>
 80053b8:	231b      	movs	r3, #27
 80053ba:	2218      	movs	r2, #24
 80053bc:	4694      	mov	ip, r2
 80053be:	44bc      	add	ip, r7
 80053c0:	4463      	add	r3, ip
 80053c2:	2204      	movs	r2, #4
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e09b      	b.n	8005500 <UART_SetConfig+0x22c>
 80053c8:	231b      	movs	r3, #27
 80053ca:	2218      	movs	r2, #24
 80053cc:	4694      	mov	ip, r2
 80053ce:	44bc      	add	ip, r7
 80053d0:	4463      	add	r3, ip
 80053d2:	2208      	movs	r2, #8
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	e093      	b.n	8005500 <UART_SetConfig+0x22c>
 80053d8:	231b      	movs	r3, #27
 80053da:	2218      	movs	r2, #24
 80053dc:	4694      	mov	ip, r2
 80053de:	44bc      	add	ip, r7
 80053e0:	4463      	add	r3, ip
 80053e2:	2210      	movs	r2, #16
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	e08a      	b.n	8005500 <UART_SetConfig+0x22c>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a9a      	ldr	r2, [pc, #616]	; (8005658 <UART_SetConfig+0x384>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d137      	bne.n	8005464 <UART_SetConfig+0x190>
 80053f4:	4b97      	ldr	r3, [pc, #604]	; (8005654 <UART_SetConfig+0x380>)
 80053f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f8:	220c      	movs	r2, #12
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d018      	beq.n	8005432 <UART_SetConfig+0x15e>
 8005400:	d802      	bhi.n	8005408 <UART_SetConfig+0x134>
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <UART_SetConfig+0x13e>
 8005406:	e024      	b.n	8005452 <UART_SetConfig+0x17e>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d00a      	beq.n	8005422 <UART_SetConfig+0x14e>
 800540c:	2b0c      	cmp	r3, #12
 800540e:	d018      	beq.n	8005442 <UART_SetConfig+0x16e>
 8005410:	e01f      	b.n	8005452 <UART_SetConfig+0x17e>
 8005412:	231b      	movs	r3, #27
 8005414:	2218      	movs	r2, #24
 8005416:	4694      	mov	ip, r2
 8005418:	44bc      	add	ip, r7
 800541a:	4463      	add	r3, ip
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	e06e      	b.n	8005500 <UART_SetConfig+0x22c>
 8005422:	231b      	movs	r3, #27
 8005424:	2218      	movs	r2, #24
 8005426:	4694      	mov	ip, r2
 8005428:	44bc      	add	ip, r7
 800542a:	4463      	add	r3, ip
 800542c:	2202      	movs	r2, #2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	e066      	b.n	8005500 <UART_SetConfig+0x22c>
 8005432:	231b      	movs	r3, #27
 8005434:	2218      	movs	r2, #24
 8005436:	4694      	mov	ip, r2
 8005438:	44bc      	add	ip, r7
 800543a:	4463      	add	r3, ip
 800543c:	2204      	movs	r2, #4
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	e05e      	b.n	8005500 <UART_SetConfig+0x22c>
 8005442:	231b      	movs	r3, #27
 8005444:	2218      	movs	r2, #24
 8005446:	4694      	mov	ip, r2
 8005448:	44bc      	add	ip, r7
 800544a:	4463      	add	r3, ip
 800544c:	2208      	movs	r2, #8
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e056      	b.n	8005500 <UART_SetConfig+0x22c>
 8005452:	231b      	movs	r3, #27
 8005454:	2218      	movs	r2, #24
 8005456:	4694      	mov	ip, r2
 8005458:	44bc      	add	ip, r7
 800545a:	4463      	add	r3, ip
 800545c:	2210      	movs	r2, #16
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	e04d      	b.n	8005500 <UART_SetConfig+0x22c>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a77      	ldr	r2, [pc, #476]	; (8005648 <UART_SetConfig+0x374>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d141      	bne.n	80054f2 <UART_SetConfig+0x21e>
 800546e:	4b79      	ldr	r3, [pc, #484]	; (8005654 <UART_SetConfig+0x380>)
 8005470:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005472:	23c0      	movs	r3, #192	; 0xc0
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4013      	ands	r3, r2
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	00d2      	lsls	r2, r2, #3
 800547c:	4293      	cmp	r3, r2
 800547e:	d01f      	beq.n	80054c0 <UART_SetConfig+0x1ec>
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	00d2      	lsls	r2, r2, #3
 8005484:	4293      	cmp	r3, r2
 8005486:	d802      	bhi.n	800548e <UART_SetConfig+0x1ba>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <UART_SetConfig+0x1cc>
 800548c:	e028      	b.n	80054e0 <UART_SetConfig+0x20c>
 800548e:	2280      	movs	r2, #128	; 0x80
 8005490:	0112      	lsls	r2, r2, #4
 8005492:	4293      	cmp	r3, r2
 8005494:	d00c      	beq.n	80054b0 <UART_SetConfig+0x1dc>
 8005496:	22c0      	movs	r2, #192	; 0xc0
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	4293      	cmp	r3, r2
 800549c:	d018      	beq.n	80054d0 <UART_SetConfig+0x1fc>
 800549e:	e01f      	b.n	80054e0 <UART_SetConfig+0x20c>
 80054a0:	231b      	movs	r3, #27
 80054a2:	2218      	movs	r2, #24
 80054a4:	4694      	mov	ip, r2
 80054a6:	44bc      	add	ip, r7
 80054a8:	4463      	add	r3, ip
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	e027      	b.n	8005500 <UART_SetConfig+0x22c>
 80054b0:	231b      	movs	r3, #27
 80054b2:	2218      	movs	r2, #24
 80054b4:	4694      	mov	ip, r2
 80054b6:	44bc      	add	ip, r7
 80054b8:	4463      	add	r3, ip
 80054ba:	2202      	movs	r2, #2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	e01f      	b.n	8005500 <UART_SetConfig+0x22c>
 80054c0:	231b      	movs	r3, #27
 80054c2:	2218      	movs	r2, #24
 80054c4:	4694      	mov	ip, r2
 80054c6:	44bc      	add	ip, r7
 80054c8:	4463      	add	r3, ip
 80054ca:	2204      	movs	r2, #4
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e017      	b.n	8005500 <UART_SetConfig+0x22c>
 80054d0:	231b      	movs	r3, #27
 80054d2:	2218      	movs	r2, #24
 80054d4:	4694      	mov	ip, r2
 80054d6:	44bc      	add	ip, r7
 80054d8:	4463      	add	r3, ip
 80054da:	2208      	movs	r2, #8
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x22c>
 80054e0:	231b      	movs	r3, #27
 80054e2:	2218      	movs	r2, #24
 80054e4:	4694      	mov	ip, r2
 80054e6:	44bc      	add	ip, r7
 80054e8:	4463      	add	r3, ip
 80054ea:	2210      	movs	r2, #16
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	e006      	b.n	8005500 <UART_SetConfig+0x22c>
 80054f2:	231b      	movs	r3, #27
 80054f4:	2218      	movs	r2, #24
 80054f6:	4694      	mov	ip, r2
 80054f8:	44bc      	add	ip, r7
 80054fa:	4463      	add	r3, ip
 80054fc:	2210      	movs	r2, #16
 80054fe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a50      	ldr	r2, [pc, #320]	; (8005648 <UART_SetConfig+0x374>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d000      	beq.n	800550c <UART_SetConfig+0x238>
 800550a:	e083      	b.n	8005614 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550c:	231b      	movs	r3, #27
 800550e:	2218      	movs	r2, #24
 8005510:	4694      	mov	ip, r2
 8005512:	44bc      	add	ip, r7
 8005514:	4463      	add	r3, ip
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d00d      	beq.n	8005538 <UART_SetConfig+0x264>
 800551c:	dc02      	bgt.n	8005524 <UART_SetConfig+0x250>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <UART_SetConfig+0x25a>
 8005522:	e01d      	b.n	8005560 <UART_SetConfig+0x28c>
 8005524:	2b04      	cmp	r3, #4
 8005526:	d012      	beq.n	800554e <UART_SetConfig+0x27a>
 8005528:	2b08      	cmp	r3, #8
 800552a:	d015      	beq.n	8005558 <UART_SetConfig+0x284>
 800552c:	e018      	b.n	8005560 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800552e:	f7ff faaf 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8005532:	0003      	movs	r3, r0
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005536:	e01b      	b.n	8005570 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005538:	4b46      	ldr	r3, [pc, #280]	; (8005654 <UART_SetConfig+0x380>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2210      	movs	r2, #16
 800553e:	4013      	ands	r3, r2
 8005540:	d002      	beq.n	8005548 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8005542:	4b46      	ldr	r3, [pc, #280]	; (800565c <UART_SetConfig+0x388>)
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005546:	e013      	b.n	8005570 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005548:	4b45      	ldr	r3, [pc, #276]	; (8005660 <UART_SetConfig+0x38c>)
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800554c:	e010      	b.n	8005570 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800554e:	f7ff fa11 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8005552:	0003      	movs	r3, r0
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005556:	e00b      	b.n	8005570 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	021b      	lsls	r3, r3, #8
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800555e:	e007      	b.n	8005570 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005560:	2313      	movs	r3, #19
 8005562:	2218      	movs	r2, #24
 8005564:	4694      	mov	ip, r2
 8005566:	44bc      	add	ip, r7
 8005568:	4463      	add	r3, ip
 800556a:	2201      	movs	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
        break;
 800556e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d100      	bne.n	8005578 <UART_SetConfig+0x2a4>
 8005576:	e1a6      	b.n	80058c6 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	0013      	movs	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	189b      	adds	r3, r3, r2
 8005582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005584:	429a      	cmp	r2, r3
 8005586:	d305      	bcc.n	8005594 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	429a      	cmp	r2, r3
 8005592:	d907      	bls.n	80055a4 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 8005594:	2313      	movs	r3, #19
 8005596:	2218      	movs	r2, #24
 8005598:	4694      	mov	ip, r2
 800559a:	44bc      	add	ip, r7
 800559c:	4463      	add	r3, ip
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e190      	b.n	80058c6 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	6939      	ldr	r1, [r7, #16]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	000b      	movs	r3, r1
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	0010      	movs	r0, r2
 80055b6:	0205      	lsls	r5, r0, #8
 80055b8:	431d      	orrs	r5, r3
 80055ba:	000b      	movs	r3, r1
 80055bc:	021c      	lsls	r4, r3, #8
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	68b8      	ldr	r0, [r7, #8]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	1900      	adds	r0, r0, r4
 80055d0:	4169      	adcs	r1, r5
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f7fa ff88 	bl	80004f4 <__aeabi_uldivmod>
 80055e4:	0003      	movs	r3, r0
 80055e6:	000c      	movs	r4, r1
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <UART_SetConfig+0x390>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d908      	bls.n	8005604 <UART_SetConfig+0x330>
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <UART_SetConfig+0x394>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d804      	bhi.n	8005604 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e160      	b.n	80058c6 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8005604:	2313      	movs	r3, #19
 8005606:	2218      	movs	r2, #24
 8005608:	4694      	mov	ip, r2
 800560a:	44bc      	add	ip, r7
 800560c:	4463      	add	r3, ip
 800560e:	2201      	movs	r2, #1
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e158      	b.n	80058c6 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	429a      	cmp	r2, r3
 800561e:	d000      	beq.n	8005622 <UART_SetConfig+0x34e>
 8005620:	e0c3      	b.n	80057aa <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8005622:	231b      	movs	r3, #27
 8005624:	2218      	movs	r2, #24
 8005626:	4694      	mov	ip, r2
 8005628:	44bc      	add	ip, r7
 800562a:	4463      	add	r3, ip
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d900      	bls.n	8005634 <UART_SetConfig+0x360>
 8005632:	e086      	b.n	8005742 <UART_SetConfig+0x46e>
 8005634:	009a      	lsls	r2, r3, #2
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <UART_SetConfig+0x398>)
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	469f      	mov	pc, r3
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	efff69f3 	.word	0xefff69f3
 8005644:	ffffcfff 	.word	0xffffcfff
 8005648:	40004800 	.word	0x40004800
 800564c:	fffff4ff 	.word	0xfffff4ff
 8005650:	40013800 	.word	0x40013800
 8005654:	40021000 	.word	0x40021000
 8005658:	40004400 	.word	0x40004400
 800565c:	003d0900 	.word	0x003d0900
 8005660:	00f42400 	.word	0x00f42400
 8005664:	000002ff 	.word	0x000002ff
 8005668:	000fffff 	.word	0x000fffff
 800566c:	0800691c 	.word	0x0800691c
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005670:	f7ff fa0e 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8005674:	0003      	movs	r3, r0
 8005676:	005a      	lsls	r2, r3, #1
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	18d2      	adds	r2, r2, r3
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	0019      	movs	r1, r3
 8005686:	0010      	movs	r0, r2
 8005688:	f7fa fd46 	bl	8000118 <__udivsi3>
 800568c:	0003      	movs	r3, r0
 800568e:	b29b      	uxth	r3, r3
 8005690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005692:	e05e      	b.n	8005752 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005694:	f7ff fa12 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005698:	0003      	movs	r3, r0
 800569a:	005a      	lsls	r2, r3, #1
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	085b      	lsrs	r3, r3, #1
 80056a2:	18d2      	adds	r2, r2, r3
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	0019      	movs	r1, r3
 80056aa:	0010      	movs	r0, r2
 80056ac:	f7fa fd34 	bl	8000118 <__udivsi3>
 80056b0:	0003      	movs	r3, r0
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056b6:	e04c      	b.n	8005752 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b8:	4b8b      	ldr	r3, [pc, #556]	; (80058e8 <UART_SetConfig+0x614>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2210      	movs	r2, #16
 80056be:	4013      	ands	r3, r2
 80056c0:	d00e      	beq.n	80056e0 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	4a88      	ldr	r2, [pc, #544]	; (80058ec <UART_SetConfig+0x618>)
 80056ca:	189a      	adds	r2, r3, r2
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	0019      	movs	r1, r3
 80056d2:	0010      	movs	r0, r2
 80056d4:	f7fa fd20 	bl	8000118 <__udivsi3>
 80056d8:	0003      	movs	r3, r0
 80056da:	b29b      	uxth	r3, r3
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80056de:	e038      	b.n	8005752 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	4a82      	ldr	r2, [pc, #520]	; (80058f0 <UART_SetConfig+0x61c>)
 80056e8:	189a      	adds	r2, r3, r2
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	0019      	movs	r1, r3
 80056f0:	0010      	movs	r0, r2
 80056f2:	f7fa fd11 	bl	8000118 <__udivsi3>
 80056f6:	0003      	movs	r3, r0
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056fc:	e029      	b.n	8005752 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80056fe:	f7ff f939 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8005702:	0003      	movs	r3, r0
 8005704:	005a      	lsls	r2, r3, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	18d2      	adds	r2, r2, r3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0019      	movs	r1, r3
 8005714:	0010      	movs	r0, r2
 8005716:	f7fa fcff 	bl	8000118 <__udivsi3>
 800571a:	0003      	movs	r3, r0
 800571c:	b29b      	uxth	r3, r3
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005720:	e017      	b.n	8005752 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	2280      	movs	r2, #128	; 0x80
 800572a:	0252      	lsls	r2, r2, #9
 800572c:	189a      	adds	r2, r3, r2
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0019      	movs	r1, r3
 8005734:	0010      	movs	r0, r2
 8005736:	f7fa fcef 	bl	8000118 <__udivsi3>
 800573a:	0003      	movs	r3, r0
 800573c:	b29b      	uxth	r3, r3
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005740:	e007      	b.n	8005752 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005742:	2313      	movs	r3, #19
 8005744:	2218      	movs	r2, #24
 8005746:	4694      	mov	ip, r2
 8005748:	44bc      	add	ip, r7
 800574a:	4463      	add	r3, ip
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
        break;
 8005750:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	2b0f      	cmp	r3, #15
 8005756:	d920      	bls.n	800579a <UART_SetConfig+0x4c6>
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	4a66      	ldr	r2, [pc, #408]	; (80058f4 <UART_SetConfig+0x620>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d81c      	bhi.n	800579a <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	b29a      	uxth	r2, r3
 8005764:	200a      	movs	r0, #10
 8005766:	2418      	movs	r4, #24
 8005768:	193b      	adds	r3, r7, r4
 800576a:	181b      	adds	r3, r3, r0
 800576c:	210f      	movs	r1, #15
 800576e:	438a      	bics	r2, r1
 8005770:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	b29b      	uxth	r3, r3
 8005778:	2207      	movs	r2, #7
 800577a:	4013      	ands	r3, r2
 800577c:	b299      	uxth	r1, r3
 800577e:	193b      	adds	r3, r7, r4
 8005780:	181b      	adds	r3, r3, r0
 8005782:	193a      	adds	r2, r7, r4
 8005784:	1812      	adds	r2, r2, r0
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	193a      	adds	r2, r7, r4
 8005792:	1812      	adds	r2, r2, r0
 8005794:	8812      	ldrh	r2, [r2, #0]
 8005796:	60da      	str	r2, [r3, #12]
 8005798:	e095      	b.n	80058c6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 800579a:	2313      	movs	r3, #19
 800579c:	2218      	movs	r2, #24
 800579e:	4694      	mov	ip, r2
 80057a0:	44bc      	add	ip, r7
 80057a2:	4463      	add	r3, ip
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	e08d      	b.n	80058c6 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 80057aa:	231b      	movs	r3, #27
 80057ac:	2218      	movs	r2, #24
 80057ae:	4694      	mov	ip, r2
 80057b0:	44bc      	add	ip, r7
 80057b2:	4463      	add	r3, ip
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d86a      	bhi.n	8005890 <UART_SetConfig+0x5bc>
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	4b4e      	ldr	r3, [pc, #312]	; (80058f8 <UART_SetConfig+0x624>)
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80057c4:	f7ff f964 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80057c8:	0002      	movs	r2, r0
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	18d2      	adds	r2, r2, r3
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	0019      	movs	r1, r3
 80057d8:	0010      	movs	r0, r2
 80057da:	f7fa fc9d 	bl	8000118 <__udivsi3>
 80057de:	0003      	movs	r3, r0
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057e4:	e05c      	b.n	80058a0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80057e6:	f7ff f969 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 80057ea:	0002      	movs	r2, r0
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	18d2      	adds	r2, r2, r3
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	0019      	movs	r1, r3
 80057fa:	0010      	movs	r0, r2
 80057fc:	f7fa fc8c 	bl	8000118 <__udivsi3>
 8005800:	0003      	movs	r3, r0
 8005802:	b29b      	uxth	r3, r3
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005806:	e04b      	b.n	80058a0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005808:	4b37      	ldr	r3, [pc, #220]	; (80058e8 <UART_SetConfig+0x614>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	4013      	ands	r3, r2
 8005810:	d00e      	beq.n	8005830 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <UART_SetConfig+0x628>)
 800581a:	189a      	adds	r2, r3, r2
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	0019      	movs	r1, r3
 8005822:	0010      	movs	r0, r2
 8005824:	f7fa fc78 	bl	8000118 <__udivsi3>
 8005828:	0003      	movs	r3, r0
 800582a:	b29b      	uxth	r3, r3
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800582e:	e037      	b.n	80058a0 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	4a32      	ldr	r2, [pc, #200]	; (8005900 <UART_SetConfig+0x62c>)
 8005838:	189a      	adds	r2, r3, r2
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	0019      	movs	r1, r3
 8005840:	0010      	movs	r0, r2
 8005842:	f7fa fc69 	bl	8000118 <__udivsi3>
 8005846:	0003      	movs	r3, r0
 8005848:	b29b      	uxth	r3, r3
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800584c:	e028      	b.n	80058a0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800584e:	f7ff f891 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8005852:	0002      	movs	r2, r0
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	18d2      	adds	r2, r2, r3
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	0019      	movs	r1, r3
 8005862:	0010      	movs	r0, r2
 8005864:	f7fa fc58 	bl	8000118 <__udivsi3>
 8005868:	0003      	movs	r3, r0
 800586a:	b29b      	uxth	r3, r3
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800586e:	e017      	b.n	80058a0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	0212      	lsls	r2, r2, #8
 800587a:	189a      	adds	r2, r3, r2
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	0019      	movs	r1, r3
 8005882:	0010      	movs	r0, r2
 8005884:	f7fa fc48 	bl	8000118 <__udivsi3>
 8005888:	0003      	movs	r3, r0
 800588a:	b29b      	uxth	r3, r3
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800588e:	e007      	b.n	80058a0 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005890:	2313      	movs	r3, #19
 8005892:	2218      	movs	r2, #24
 8005894:	4694      	mov	ip, r2
 8005896:	44bc      	add	ip, r7
 8005898:	4463      	add	r3, ip
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
        break;
 800589e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	2b0f      	cmp	r3, #15
 80058a4:	d908      	bls.n	80058b8 <UART_SetConfig+0x5e4>
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	4a12      	ldr	r2, [pc, #72]	; (80058f4 <UART_SetConfig+0x620>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d804      	bhi.n	80058b8 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b4:	60da      	str	r2, [r3, #12]
 80058b6:	e006      	b.n	80058c6 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80058b8:	2313      	movs	r3, #19
 80058ba:	2218      	movs	r2, #24
 80058bc:	4694      	mov	ip, r2
 80058be:	44bc      	add	ip, r7
 80058c0:	4463      	add	r3, ip
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	2200      	movs	r2, #0
 80058ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2200      	movs	r2, #0
 80058d0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80058d2:	2313      	movs	r3, #19
 80058d4:	2218      	movs	r2, #24
 80058d6:	4694      	mov	ip, r2
 80058d8:	44bc      	add	ip, r7
 80058da:	4463      	add	r3, ip
 80058dc:	781b      	ldrb	r3, [r3, #0]
}
 80058de:	0018      	movs	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b00e      	add	sp, #56	; 0x38
 80058e4:	bdb0      	pop	{r4, r5, r7, pc}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	40021000 	.word	0x40021000
 80058ec:	007a1200 	.word	0x007a1200
 80058f0:	01e84800 	.word	0x01e84800
 80058f4:	0000ffff 	.word	0x0000ffff
 80058f8:	08006940 	.word	0x08006940
 80058fc:	003d0900 	.word	0x003d0900
 8005900:	00f42400 	.word	0x00f42400

08005904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2201      	movs	r2, #1
 8005912:	4013      	ands	r3, r2
 8005914:	d00b      	beq.n	800592e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a4a      	ldr	r2, [pc, #296]	; (8005a48 <UART_AdvFeatureConfig+0x144>)
 800591e:	4013      	ands	r3, r2
 8005920:	0019      	movs	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2202      	movs	r2, #2
 8005934:	4013      	ands	r3, r2
 8005936:	d00b      	beq.n	8005950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4a43      	ldr	r2, [pc, #268]	; (8005a4c <UART_AdvFeatureConfig+0x148>)
 8005940:	4013      	ands	r3, r2
 8005942:	0019      	movs	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2204      	movs	r2, #4
 8005956:	4013      	ands	r3, r2
 8005958:	d00b      	beq.n	8005972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <UART_AdvFeatureConfig+0x14c>)
 8005962:	4013      	ands	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2208      	movs	r2, #8
 8005978:	4013      	ands	r3, r2
 800597a:	d00b      	beq.n	8005994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a34      	ldr	r2, [pc, #208]	; (8005a54 <UART_AdvFeatureConfig+0x150>)
 8005984:	4013      	ands	r3, r2
 8005986:	0019      	movs	r1, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	2210      	movs	r2, #16
 800599a:	4013      	ands	r3, r2
 800599c:	d00b      	beq.n	80059b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <UART_AdvFeatureConfig+0x154>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	0019      	movs	r1, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	2220      	movs	r2, #32
 80059bc:	4013      	ands	r3, r2
 80059be:	d00b      	beq.n	80059d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	4a25      	ldr	r2, [pc, #148]	; (8005a5c <UART_AdvFeatureConfig+0x158>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	0019      	movs	r1, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2240      	movs	r2, #64	; 0x40
 80059de:	4013      	ands	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <UART_AdvFeatureConfig+0x15c>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	0019      	movs	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	035b      	lsls	r3, r3, #13
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d10b      	bne.n	8005a1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <UART_AdvFeatureConfig+0x160>)
 8005a0e:	4013      	ands	r3, r2
 8005a10:	0019      	movs	r1, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	4013      	ands	r3, r2
 8005a26:	d00b      	beq.n	8005a40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <UART_AdvFeatureConfig+0x164>)
 8005a30:	4013      	ands	r3, r2
 8005a32:	0019      	movs	r1, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
  }
}
 8005a40:	46c0      	nop			; (mov r8, r8)
 8005a42:	46bd      	mov	sp, r7
 8005a44:	b002      	add	sp, #8
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	fffdffff 	.word	0xfffdffff
 8005a4c:	fffeffff 	.word	0xfffeffff
 8005a50:	fffbffff 	.word	0xfffbffff
 8005a54:	ffff7fff 	.word	0xffff7fff
 8005a58:	ffffefff 	.word	0xffffefff
 8005a5c:	ffffdfff 	.word	0xffffdfff
 8005a60:	ffefffff 	.word	0xffefffff
 8005a64:	ff9fffff 	.word	0xff9fffff
 8005a68:	fff7ffff 	.word	0xfff7ffff

08005a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a7a:	f7fd f9c3 	bl	8002e04 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d10d      	bne.n	8005aac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	0399      	lsls	r1, r3, #14
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	4b16      	ldr	r3, [pc, #88]	; (8005af4 <UART_CheckIdleState+0x88>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	0013      	movs	r3, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f000 f82a 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005aa4:	1e03      	subs	r3, r0, #0
 8005aa6:	d001      	beq.n	8005aac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e01f      	b.n	8005aec <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d10d      	bne.n	8005ad6 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	2380      	movs	r3, #128	; 0x80
 8005abe:	03d9      	lsls	r1, r3, #15
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <UART_CheckIdleState+0x88>)
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	0013      	movs	r3, r2
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f000 f815 	bl	8005af8 <UART_WaitOnFlagUntilTimeout>
 8005ace:	1e03      	subs	r3, r0, #0
 8005ad0:	d001      	beq.n	8005ad6 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e00a      	b.n	8005aec <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2270      	movs	r2, #112	; 0x70
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	0018      	movs	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b004      	add	sp, #16
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	01ffffff 	.word	0x01ffffff

08005af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	1dfb      	adds	r3, r7, #7
 8005b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b08:	e029      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	d026      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b10:	f7fd f978 	bl	8002e04 <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d302      	bcc.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11b      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4915      	ldr	r1, [pc, #84]	; (8005b88 <UART_WaitOnFlagUntilTimeout+0x90>)
 8005b32:	400a      	ands	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	438a      	bics	r2, r1
 8005b44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2270      	movs	r2, #112	; 0x70
 8005b56:	2100      	movs	r1, #0
 8005b58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e00f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	425a      	negs	r2, r3
 8005b6e:	4153      	adcs	r3, r2
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	001a      	movs	r2, r3
 8005b74:	1dfb      	adds	r3, r7, #7
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d0c6      	beq.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b004      	add	sp, #16
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	fffffe5f 	.word	0xfffffe5f

08005b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b94:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <USB_DisableGlobalInt+0x30>)
 8005b96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	5a9b      	ldrh	r3, [r3, r2]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	43d2      	mvns	r2, r2
 8005ba6:	b292      	uxth	r2, r2
 8005ba8:	4013      	ands	r3, r2
 8005baa:	b299      	uxth	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b004      	add	sp, #16
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	0000bf80 	.word	0x0000bf80

08005bc0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	b590      	push	{r4, r7, lr}
 8005bc4:	46c6      	mov	lr, r8
 8005bc6:	b500      	push	{lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	2004      	movs	r0, #4
 8005bd0:	2410      	movs	r4, #16
 8005bd2:	46a4      	mov	ip, r4
 8005bd4:	2408      	movs	r4, #8
 8005bd6:	46a0      	mov	r8, r4
 8005bd8:	44b8      	add	r8, r7
 8005bda:	44c4      	add	ip, r8
 8005bdc:	4460      	add	r0, ip
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	6042      	str	r2, [r0, #4]
 8005be2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2240      	movs	r2, #64	; 0x40
 8005be8:	2101      	movs	r1, #1
 8005bea:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2240      	movs	r2, #64	; 0x40
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2244      	movs	r2, #68	; 0x44
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2250      	movs	r2, #80	; 0x50
 8005c00:	2100      	movs	r1, #0
 8005c02:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	0018      	movs	r0, r3
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	b002      	add	sp, #8
 8005c0c:	bc04      	pop	{r2}
 8005c0e:	4690      	mov	r8, r2
 8005c10:	bc90      	pop	{r4, r7}
 8005c12:	bc08      	pop	{r3}
 8005c14:	b004      	add	sp, #16
 8005c16:	4718      	bx	r3

08005c18 <_Znwj>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	1e04      	subs	r4, r0, #0
 8005c1c:	d100      	bne.n	8005c20 <_Znwj+0x8>
 8005c1e:	3401      	adds	r4, #1
 8005c20:	0020      	movs	r0, r4
 8005c22:	f000 f90b 	bl	8005e3c <malloc>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d107      	bne.n	8005c3a <_Znwj+0x22>
 8005c2a:	f000 f807 	bl	8005c3c <_ZSt15get_new_handlerv>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d101      	bne.n	8005c36 <_Znwj+0x1e>
 8005c32:	f000 f8d2 	bl	8005dda <abort>
 8005c36:	4780      	blx	r0
 8005c38:	e7f2      	b.n	8005c20 <_Znwj+0x8>
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <_ZSt15get_new_handlerv>:
 8005c3c:	4b01      	ldr	r3, [pc, #4]	; (8005c44 <_ZSt15get_new_handlerv+0x8>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	4770      	bx	lr
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	20001078 	.word	0x20001078

08005c48 <_ZNSaIcEC1Ev>:
 8005c48:	4770      	bx	lr

08005c4a <_ZNSaIcED1Ev>:
 8005c4a:	4770      	bx	lr

08005c4c <_ZSt19__throw_logic_errorPKc>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	f000 f8c4 	bl	8005dda <abort>

08005c52 <_ZSt20__throw_length_errorPKc>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	f000 f8c1 	bl	8005dda <abort>

08005c58 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	d001      	beq.n	8005c62 <_ZNSt11char_traitsIcE4copyEPcPKcj+0xa>
 8005c5e:	f000 f90c 	bl	8005e7a <memcpy>
 8005c62:	bd10      	pop	{r4, pc}

08005c64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8005c64:	6001      	str	r1, [r0, #0]
 8005c66:	4770      	bx	lr

08005c68 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8005c68:	6800      	ldr	r0, [r0, #0]
 8005c6a:	4770      	bx	lr

08005c6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8005c6c:	3008      	adds	r0, #8
 8005c6e:	4770      	bx	lr

08005c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8005c70:	6081      	str	r1, [r0, #8]
 8005c72:	4770      	bx	lr

08005c74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8005c74:	2200      	movs	r2, #0
 8005c76:	6803      	ldr	r3, [r0, #0]
 8005c78:	6041      	str	r1, [r0, #4]
 8005c7a:	545a      	strb	r2, [r3, r1]
 8005c7c:	4770      	bx	lr
	...

08005c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8005c80:	680b      	ldr	r3, [r1, #0]
 8005c82:	b510      	push	{r4, lr}
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da02      	bge.n	8005c8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8005c88:	4809      	ldr	r0, [pc, #36]	; (8005cb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8005c8a:	f7ff ffe2 	bl	8005c52 <_ZSt20__throw_length_errorPKc>
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d905      	bls.n	8005c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 8005c92:	0052      	lsls	r2, r2, #1
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d202      	bcs.n	8005c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 8005c98:	2a00      	cmp	r2, #0
 8005c9a:	db05      	blt.n	8005ca8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 8005c9c:	600a      	str	r2, [r1, #0]
 8005c9e:	6808      	ldr	r0, [r1, #0]
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f7ff ffb9 	bl	8005c18 <_Znwj>
 8005ca6:	bd10      	pop	{r4, pc}
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 8005caa:	600b      	str	r3, [r1, #0]
 8005cac:	e7f7      	b.n	8005c9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x1e>
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	0800698e 	.word	0x0800698e
 8005cb4:	7fffffff 	.word	0x7fffffff

08005cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8005cb8:	0003      	movs	r3, r0
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	4298      	cmp	r0, r3
 8005cc2:	d001      	beq.n	8005cc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x10>
 8005cc4:	f000 f85b 	bl	8005d7e <_ZdlPv>
 8005cc8:	bd10      	pop	{r4, pc}

08005cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	2a01      	cmp	r2, #1
 8005cce:	d102      	bne.n	8005cd6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8005cd0:	780b      	ldrb	r3, [r1, #0]
 8005cd2:	7003      	strb	r3, [r0, #0]
 8005cd4:	bd10      	pop	{r4, pc}
 8005cd6:	f7ff ffbf 	bl	8005c58 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8005cda:	e7fb      	b.n	8005cd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08005cdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8005cdc:	b510      	push	{r4, lr}
 8005cde:	1a52      	subs	r2, r2, r1
 8005ce0:	f7ff fff3 	bl	8005cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	1a52      	subs	r2, r2, r1
 8005cea:	f7ff ffee 	bl	8005cca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8005cee:	bd10      	pop	{r4, pc}

08005cf0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8005cf0:	b510      	push	{r4, lr}
 8005cf2:	0004      	movs	r4, r0
 8005cf4:	f7ff ffe0 	bl	8005cb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	bd10      	pop	{r4, pc}

08005cfc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8005cfc:	6840      	ldr	r0, [r0, #4]
 8005cfe:	4770      	bx	lr

08005d00 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8005d00:	6800      	ldr	r0, [r0, #0]
 8005d02:	1840      	adds	r0, r0, r1
 8005d04:	4770      	bx	lr

08005d06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8005d06:	6001      	str	r1, [r0, #0]
 8005d08:	4770      	bx	lr
	...

08005d0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8005d0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d0e:	0004      	movs	r4, r0
 8005d10:	000d      	movs	r5, r1
 8005d12:	0016      	movs	r6, r2
 8005d14:	2900      	cmp	r1, #0
 8005d16:	d104      	bne.n	8005d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	d002      	beq.n	8005d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x16>
 8005d1c:	480c      	ldr	r0, [pc, #48]	; (8005d50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8005d1e:	f7ff ff95 	bl	8005c4c <_ZSt19__throw_logic_errorPKc>
 8005d22:	1b73      	subs	r3, r6, r5
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d907      	bls.n	8005d3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2e>
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	a901      	add	r1, sp, #4
 8005d2e:	0020      	movs	r0, r4
 8005d30:	f7ff ffa6 	bl	8005c80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8005d34:	9b01      	ldr	r3, [sp, #4]
 8005d36:	6020      	str	r0, [r4, #0]
 8005d38:	60a3      	str	r3, [r4, #8]
 8005d3a:	0032      	movs	r2, r6
 8005d3c:	0029      	movs	r1, r5
 8005d3e:	6820      	ldr	r0, [r4, #0]
 8005d40:	f7ff ffd1 	bl	8005ce6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8005d44:	2100      	movs	r1, #0
 8005d46:	9b01      	ldr	r3, [sp, #4]
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	6063      	str	r3, [r4, #4]
 8005d4c:	54d1      	strb	r1, [r2, r3]
 8005d4e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8005d50:	08006964 	.word	0x08006964

08005d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8005d54:	0003      	movs	r3, r0
 8005d56:	3308      	adds	r3, #8
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	0004      	movs	r4, r0
 8005d5c:	1e0d      	subs	r5, r1, #0
 8005d5e:	6003      	str	r3, [r0, #0]
 8005d60:	d00a      	beq.n	8005d78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x24>
 8005d62:	0008      	movs	r0, r1
 8005d64:	f7fa f9d0 	bl	8000108 <strlen>
 8005d68:	182a      	adds	r2, r5, r0
 8005d6a:	0029      	movs	r1, r5
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f7ff ffcc 	bl	8005d0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8005d74:	0020      	movs	r0, r4
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	2201      	movs	r2, #1
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	e7f5      	b.n	8005d6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08005d7e <_ZdlPv>:
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	f000 f866 	bl	8005e50 <free>
 8005d84:	bd10      	pop	{r4, pc}

08005d86 <lroundf>:
 8005d86:	0dc1      	lsrs	r1, r0, #23
 8005d88:	b2c9      	uxtb	r1, r1
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	000a      	movs	r2, r1
 8005d8e:	2401      	movs	r4, #1
 8005d90:	17c3      	asrs	r3, r0, #31
 8005d92:	43a3      	bics	r3, r4
 8005d94:	3a7f      	subs	r2, #127	; 0x7f
 8005d96:	191b      	adds	r3, r3, r4
 8005d98:	2a1e      	cmp	r2, #30
 8005d9a:	dc19      	bgt.n	8005dd0 <lroundf+0x4a>
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	da03      	bge.n	8005da8 <lroundf+0x22>
 8005da0:	3201      	adds	r2, #1
 8005da2:	d018      	beq.n	8005dd6 <lroundf+0x50>
 8005da4:	2300      	movs	r3, #0
 8005da6:	e016      	b.n	8005dd6 <lroundf+0x50>
 8005da8:	2480      	movs	r4, #128	; 0x80
 8005daa:	0240      	lsls	r0, r0, #9
 8005dac:	0a40      	lsrs	r0, r0, #9
 8005dae:	0424      	lsls	r4, r4, #16
 8005db0:	4304      	orrs	r4, r0
 8005db2:	2a16      	cmp	r2, #22
 8005db4:	dd04      	ble.n	8005dc0 <lroundf+0x3a>
 8005db6:	0020      	movs	r0, r4
 8005db8:	3996      	subs	r1, #150	; 0x96
 8005dba:	4088      	lsls	r0, r1
 8005dbc:	4343      	muls	r3, r0
 8005dbe:	e00a      	b.n	8005dd6 <lroundf+0x50>
 8005dc0:	2080      	movs	r0, #128	; 0x80
 8005dc2:	03c0      	lsls	r0, r0, #15
 8005dc4:	4110      	asrs	r0, r2
 8005dc6:	2117      	movs	r1, #23
 8005dc8:	1900      	adds	r0, r0, r4
 8005dca:	1a8a      	subs	r2, r1, r2
 8005dcc:	40d0      	lsrs	r0, r2
 8005dce:	e7f5      	b.n	8005dbc <lroundf+0x36>
 8005dd0:	f7fb f80e 	bl	8000df0 <__aeabi_f2iz>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <abort>:
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	2006      	movs	r0, #6
 8005dde:	f000 f955 	bl	800608c <raise>
 8005de2:	2001      	movs	r0, #1
 8005de4:	f7fc ff07 	bl	8002bf6 <_exit>

08005de8 <__errno>:
 8005de8:	4b01      	ldr	r3, [pc, #4]	; (8005df0 <__errno+0x8>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	4770      	bx	lr
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	20000034 	.word	0x20000034

08005df4 <__libc_init_array>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	2600      	movs	r6, #0
 8005df8:	4d0c      	ldr	r5, [pc, #48]	; (8005e2c <__libc_init_array+0x38>)
 8005dfa:	4c0d      	ldr	r4, [pc, #52]	; (8005e30 <__libc_init_array+0x3c>)
 8005dfc:	1b64      	subs	r4, r4, r5
 8005dfe:	10a4      	asrs	r4, r4, #2
 8005e00:	42a6      	cmp	r6, r4
 8005e02:	d109      	bne.n	8005e18 <__libc_init_array+0x24>
 8005e04:	2600      	movs	r6, #0
 8005e06:	f000 fc9f 	bl	8006748 <_init>
 8005e0a:	4d0a      	ldr	r5, [pc, #40]	; (8005e34 <__libc_init_array+0x40>)
 8005e0c:	4c0a      	ldr	r4, [pc, #40]	; (8005e38 <__libc_init_array+0x44>)
 8005e0e:	1b64      	subs	r4, r4, r5
 8005e10:	10a4      	asrs	r4, r4, #2
 8005e12:	42a6      	cmp	r6, r4
 8005e14:	d105      	bne.n	8005e22 <__libc_init_array+0x2e>
 8005e16:	bd70      	pop	{r4, r5, r6, pc}
 8005e18:	00b3      	lsls	r3, r6, #2
 8005e1a:	58eb      	ldr	r3, [r5, r3]
 8005e1c:	4798      	blx	r3
 8005e1e:	3601      	adds	r6, #1
 8005e20:	e7ee      	b.n	8005e00 <__libc_init_array+0xc>
 8005e22:	00b3      	lsls	r3, r6, #2
 8005e24:	58eb      	ldr	r3, [r5, r3]
 8005e26:	4798      	blx	r3
 8005e28:	3601      	adds	r6, #1
 8005e2a:	e7f2      	b.n	8005e12 <__libc_init_array+0x1e>
 8005e2c:	080069e4 	.word	0x080069e4
 8005e30:	080069e4 	.word	0x080069e4
 8005e34:	080069e4 	.word	0x080069e4
 8005e38:	080069e8 	.word	0x080069e8

08005e3c <malloc>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <malloc+0x10>)
 8005e40:	0001      	movs	r1, r0
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	f000 f888 	bl	8005f58 <_malloc_r>
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	20000034 	.word	0x20000034

08005e50 <free>:
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <free+0x10>)
 8005e54:	0001      	movs	r1, r0
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	f000 f834 	bl	8005ec4 <_free_r>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	20000034 	.word	0x20000034

08005e64 <memchr>:
 8005e64:	b2c9      	uxtb	r1, r1
 8005e66:	1882      	adds	r2, r0, r2
 8005e68:	4290      	cmp	r0, r2
 8005e6a:	d101      	bne.n	8005e70 <memchr+0xc>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	4770      	bx	lr
 8005e70:	7803      	ldrb	r3, [r0, #0]
 8005e72:	428b      	cmp	r3, r1
 8005e74:	d0fb      	beq.n	8005e6e <memchr+0xa>
 8005e76:	3001      	adds	r0, #1
 8005e78:	e7f6      	b.n	8005e68 <memchr+0x4>

08005e7a <memcpy>:
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d100      	bne.n	8005e84 <memcpy+0xa>
 8005e82:	bd10      	pop	{r4, pc}
 8005e84:	5ccc      	ldrb	r4, [r1, r3]
 8005e86:	54c4      	strb	r4, [r0, r3]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	e7f8      	b.n	8005e7e <memcpy+0x4>

08005e8c <memmove>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	4288      	cmp	r0, r1
 8005e90:	d902      	bls.n	8005e98 <memmove+0xc>
 8005e92:	188b      	adds	r3, r1, r2
 8005e94:	4298      	cmp	r0, r3
 8005e96:	d303      	bcc.n	8005ea0 <memmove+0x14>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e007      	b.n	8005eac <memmove+0x20>
 8005e9c:	5c8b      	ldrb	r3, [r1, r2]
 8005e9e:	5483      	strb	r3, [r0, r2]
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	d2fb      	bcs.n	8005e9c <memmove+0x10>
 8005ea4:	bd10      	pop	{r4, pc}
 8005ea6:	5ccc      	ldrb	r4, [r1, r3]
 8005ea8:	54c4      	strb	r4, [r0, r3]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d1fa      	bne.n	8005ea6 <memmove+0x1a>
 8005eb0:	e7f8      	b.n	8005ea4 <memmove+0x18>

08005eb2 <memset>:
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	1812      	adds	r2, r2, r0
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d100      	bne.n	8005ebc <memset+0xa>
 8005eba:	4770      	bx	lr
 8005ebc:	7019      	strb	r1, [r3, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	e7f9      	b.n	8005eb6 <memset+0x4>
	...

08005ec4 <_free_r>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	0005      	movs	r5, r0
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	d010      	beq.n	8005eee <_free_r+0x2a>
 8005ecc:	1f0c      	subs	r4, r1, #4
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da00      	bge.n	8005ed6 <_free_r+0x12>
 8005ed4:	18e4      	adds	r4, r4, r3
 8005ed6:	0028      	movs	r0, r5
 8005ed8:	f000 f930 	bl	800613c <__malloc_lock>
 8005edc:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <_free_r+0x90>)
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <_free_r+0x2c>
 8005ee4:	6063      	str	r3, [r4, #4]
 8005ee6:	6014      	str	r4, [r2, #0]
 8005ee8:	0028      	movs	r0, r5
 8005eea:	f000 f928 	bl	800613e <__malloc_unlock>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	d909      	bls.n	8005f08 <_free_r+0x44>
 8005ef4:	6821      	ldr	r1, [r4, #0]
 8005ef6:	1860      	adds	r0, r4, r1
 8005ef8:	4283      	cmp	r3, r0
 8005efa:	d1f3      	bne.n	8005ee4 <_free_r+0x20>
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	1841      	adds	r1, r0, r1
 8005f02:	6021      	str	r1, [r4, #0]
 8005f04:	e7ee      	b.n	8005ee4 <_free_r+0x20>
 8005f06:	0013      	movs	r3, r2
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d001      	beq.n	8005f12 <_free_r+0x4e>
 8005f0e:	42a2      	cmp	r2, r4
 8005f10:	d9f9      	bls.n	8005f06 <_free_r+0x42>
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	1858      	adds	r0, r3, r1
 8005f16:	42a0      	cmp	r0, r4
 8005f18:	d10b      	bne.n	8005f32 <_free_r+0x6e>
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	1809      	adds	r1, r1, r0
 8005f1e:	1858      	adds	r0, r3, r1
 8005f20:	6019      	str	r1, [r3, #0]
 8005f22:	4282      	cmp	r2, r0
 8005f24:	d1e0      	bne.n	8005ee8 <_free_r+0x24>
 8005f26:	6810      	ldr	r0, [r2, #0]
 8005f28:	6852      	ldr	r2, [r2, #4]
 8005f2a:	1841      	adds	r1, r0, r1
 8005f2c:	6019      	str	r1, [r3, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
 8005f30:	e7da      	b.n	8005ee8 <_free_r+0x24>
 8005f32:	42a0      	cmp	r0, r4
 8005f34:	d902      	bls.n	8005f3c <_free_r+0x78>
 8005f36:	230c      	movs	r3, #12
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	e7d5      	b.n	8005ee8 <_free_r+0x24>
 8005f3c:	6821      	ldr	r1, [r4, #0]
 8005f3e:	1860      	adds	r0, r4, r1
 8005f40:	4282      	cmp	r2, r0
 8005f42:	d103      	bne.n	8005f4c <_free_r+0x88>
 8005f44:	6810      	ldr	r0, [r2, #0]
 8005f46:	6852      	ldr	r2, [r2, #4]
 8005f48:	1841      	adds	r1, r0, r1
 8005f4a:	6021      	str	r1, [r4, #0]
 8005f4c:	6062      	str	r2, [r4, #4]
 8005f4e:	605c      	str	r4, [r3, #4]
 8005f50:	e7ca      	b.n	8005ee8 <_free_r+0x24>
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	2000107c 	.word	0x2000107c

08005f58 <_malloc_r>:
 8005f58:	2303      	movs	r3, #3
 8005f5a:	b570      	push	{r4, r5, r6, lr}
 8005f5c:	1ccd      	adds	r5, r1, #3
 8005f5e:	439d      	bics	r5, r3
 8005f60:	3508      	adds	r5, #8
 8005f62:	0006      	movs	r6, r0
 8005f64:	2d0c      	cmp	r5, #12
 8005f66:	d21e      	bcs.n	8005fa6 <_malloc_r+0x4e>
 8005f68:	250c      	movs	r5, #12
 8005f6a:	42a9      	cmp	r1, r5
 8005f6c:	d81d      	bhi.n	8005faa <_malloc_r+0x52>
 8005f6e:	0030      	movs	r0, r6
 8005f70:	f000 f8e4 	bl	800613c <__malloc_lock>
 8005f74:	4a25      	ldr	r2, [pc, #148]	; (800600c <_malloc_r+0xb4>)
 8005f76:	6814      	ldr	r4, [r2, #0]
 8005f78:	0021      	movs	r1, r4
 8005f7a:	2900      	cmp	r1, #0
 8005f7c:	d119      	bne.n	8005fb2 <_malloc_r+0x5a>
 8005f7e:	4c24      	ldr	r4, [pc, #144]	; (8006010 <_malloc_r+0xb8>)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <_malloc_r+0x36>
 8005f86:	0030      	movs	r0, r6
 8005f88:	f000 f844 	bl	8006014 <_sbrk_r>
 8005f8c:	6020      	str	r0, [r4, #0]
 8005f8e:	0029      	movs	r1, r5
 8005f90:	0030      	movs	r0, r6
 8005f92:	f000 f83f 	bl	8006014 <_sbrk_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d12b      	bne.n	8005ff2 <_malloc_r+0x9a>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	0030      	movs	r0, r6
 8005f9e:	6033      	str	r3, [r6, #0]
 8005fa0:	f000 f8cd 	bl	800613e <__malloc_unlock>
 8005fa4:	e003      	b.n	8005fae <_malloc_r+0x56>
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	dadf      	bge.n	8005f6a <_malloc_r+0x12>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	2000      	movs	r0, #0
 8005fb0:	bd70      	pop	{r4, r5, r6, pc}
 8005fb2:	680b      	ldr	r3, [r1, #0]
 8005fb4:	1b5b      	subs	r3, r3, r5
 8005fb6:	d419      	bmi.n	8005fec <_malloc_r+0x94>
 8005fb8:	2b0b      	cmp	r3, #11
 8005fba:	d903      	bls.n	8005fc4 <_malloc_r+0x6c>
 8005fbc:	600b      	str	r3, [r1, #0]
 8005fbe:	18cc      	adds	r4, r1, r3
 8005fc0:	6025      	str	r5, [r4, #0]
 8005fc2:	e003      	b.n	8005fcc <_malloc_r+0x74>
 8005fc4:	684b      	ldr	r3, [r1, #4]
 8005fc6:	428c      	cmp	r4, r1
 8005fc8:	d10d      	bne.n	8005fe6 <_malloc_r+0x8e>
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	0030      	movs	r0, r6
 8005fce:	f000 f8b6 	bl	800613e <__malloc_unlock>
 8005fd2:	0020      	movs	r0, r4
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	300b      	adds	r0, #11
 8005fd8:	1d23      	adds	r3, r4, #4
 8005fda:	4390      	bics	r0, r2
 8005fdc:	1ac3      	subs	r3, r0, r3
 8005fde:	d0e7      	beq.n	8005fb0 <_malloc_r+0x58>
 8005fe0:	425a      	negs	r2, r3
 8005fe2:	50e2      	str	r2, [r4, r3]
 8005fe4:	e7e4      	b.n	8005fb0 <_malloc_r+0x58>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	000c      	movs	r4, r1
 8005fea:	e7ef      	b.n	8005fcc <_malloc_r+0x74>
 8005fec:	000c      	movs	r4, r1
 8005fee:	6849      	ldr	r1, [r1, #4]
 8005ff0:	e7c3      	b.n	8005f7a <_malloc_r+0x22>
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	1cc4      	adds	r4, r0, #3
 8005ff6:	439c      	bics	r4, r3
 8005ff8:	42a0      	cmp	r0, r4
 8005ffa:	d0e1      	beq.n	8005fc0 <_malloc_r+0x68>
 8005ffc:	1a21      	subs	r1, r4, r0
 8005ffe:	0030      	movs	r0, r6
 8006000:	f000 f808 	bl	8006014 <_sbrk_r>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d1db      	bne.n	8005fc0 <_malloc_r+0x68>
 8006008:	e7c7      	b.n	8005f9a <_malloc_r+0x42>
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	2000107c 	.word	0x2000107c
 8006010:	20001080 	.word	0x20001080

08006014 <_sbrk_r>:
 8006014:	2300      	movs	r3, #0
 8006016:	b570      	push	{r4, r5, r6, lr}
 8006018:	4c06      	ldr	r4, [pc, #24]	; (8006034 <_sbrk_r+0x20>)
 800601a:	0005      	movs	r5, r0
 800601c:	0008      	movs	r0, r1
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	f7fc fdf6 	bl	8002c10 <_sbrk>
 8006024:	1c43      	adds	r3, r0, #1
 8006026:	d103      	bne.n	8006030 <_sbrk_r+0x1c>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d000      	beq.n	8006030 <_sbrk_r+0x1c>
 800602e:	602b      	str	r3, [r5, #0]
 8006030:	bd70      	pop	{r4, r5, r6, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	200014a4 	.word	0x200014a4

08006038 <_raise_r>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	0004      	movs	r4, r0
 800603c:	000d      	movs	r5, r1
 800603e:	291f      	cmp	r1, #31
 8006040:	d904      	bls.n	800604c <_raise_r+0x14>
 8006042:	2316      	movs	r3, #22
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	2001      	movs	r0, #1
 8006048:	4240      	negs	r0, r0
 800604a:	bd70      	pop	{r4, r5, r6, pc}
 800604c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <_raise_r+0x24>
 8006052:	008a      	lsls	r2, r1, #2
 8006054:	189b      	adds	r3, r3, r2
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2a00      	cmp	r2, #0
 800605a:	d108      	bne.n	800606e <_raise_r+0x36>
 800605c:	0020      	movs	r0, r4
 800605e:	f000 f831 	bl	80060c4 <_getpid_r>
 8006062:	002a      	movs	r2, r5
 8006064:	0001      	movs	r1, r0
 8006066:	0020      	movs	r0, r4
 8006068:	f000 f81a 	bl	80060a0 <_kill_r>
 800606c:	e7ed      	b.n	800604a <_raise_r+0x12>
 800606e:	2000      	movs	r0, #0
 8006070:	2a01      	cmp	r2, #1
 8006072:	d0ea      	beq.n	800604a <_raise_r+0x12>
 8006074:	1c51      	adds	r1, r2, #1
 8006076:	d103      	bne.n	8006080 <_raise_r+0x48>
 8006078:	2316      	movs	r3, #22
 800607a:	3001      	adds	r0, #1
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	e7e4      	b.n	800604a <_raise_r+0x12>
 8006080:	2400      	movs	r4, #0
 8006082:	0028      	movs	r0, r5
 8006084:	601c      	str	r4, [r3, #0]
 8006086:	4790      	blx	r2
 8006088:	0020      	movs	r0, r4
 800608a:	e7de      	b.n	800604a <_raise_r+0x12>

0800608c <raise>:
 800608c:	b510      	push	{r4, lr}
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <raise+0x10>)
 8006090:	0001      	movs	r1, r0
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	f7ff ffd0 	bl	8006038 <_raise_r>
 8006098:	bd10      	pop	{r4, pc}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	20000034 	.word	0x20000034

080060a0 <_kill_r>:
 80060a0:	2300      	movs	r3, #0
 80060a2:	b570      	push	{r4, r5, r6, lr}
 80060a4:	4c06      	ldr	r4, [pc, #24]	; (80060c0 <_kill_r+0x20>)
 80060a6:	0005      	movs	r5, r0
 80060a8:	0008      	movs	r0, r1
 80060aa:	0011      	movs	r1, r2
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	f7fc fd92 	bl	8002bd6 <_kill>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d103      	bne.n	80060be <_kill_r+0x1e>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d000      	beq.n	80060be <_kill_r+0x1e>
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	200014a4 	.word	0x200014a4

080060c4 <_getpid_r>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	f7fc fd80 	bl	8002bca <_getpid>
 80060ca:	bd10      	pop	{r4, pc}

080060cc <_vsniprintf_r>:
 80060cc:	b530      	push	{r4, r5, lr}
 80060ce:	0014      	movs	r4, r2
 80060d0:	b09b      	sub	sp, #108	; 0x6c
 80060d2:	0005      	movs	r5, r0
 80060d4:	001a      	movs	r2, r3
 80060d6:	2c00      	cmp	r4, #0
 80060d8:	da05      	bge.n	80060e6 <_vsniprintf_r+0x1a>
 80060da:	238b      	movs	r3, #139	; 0x8b
 80060dc:	6003      	str	r3, [r0, #0]
 80060de:	2001      	movs	r0, #1
 80060e0:	4240      	negs	r0, r0
 80060e2:	b01b      	add	sp, #108	; 0x6c
 80060e4:	bd30      	pop	{r4, r5, pc}
 80060e6:	2382      	movs	r3, #130	; 0x82
 80060e8:	4668      	mov	r0, sp
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	8183      	strh	r3, [r0, #12]
 80060ee:	2300      	movs	r3, #0
 80060f0:	9100      	str	r1, [sp, #0]
 80060f2:	9104      	str	r1, [sp, #16]
 80060f4:	429c      	cmp	r4, r3
 80060f6:	d000      	beq.n	80060fa <_vsniprintf_r+0x2e>
 80060f8:	1e63      	subs	r3, r4, #1
 80060fa:	9302      	str	r3, [sp, #8]
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	2301      	movs	r3, #1
 8006100:	4669      	mov	r1, sp
 8006102:	425b      	negs	r3, r3
 8006104:	81cb      	strh	r3, [r1, #14]
 8006106:	0028      	movs	r0, r5
 8006108:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800610a:	f000 f87b 	bl	8006204 <_svfiprintf_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	da01      	bge.n	8006116 <_vsniprintf_r+0x4a>
 8006112:	238b      	movs	r3, #139	; 0x8b
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	2c00      	cmp	r4, #0
 8006118:	d0e3      	beq.n	80060e2 <_vsniprintf_r+0x16>
 800611a:	2300      	movs	r3, #0
 800611c:	9a00      	ldr	r2, [sp, #0]
 800611e:	7013      	strb	r3, [r2, #0]
 8006120:	e7df      	b.n	80060e2 <_vsniprintf_r+0x16>
	...

08006124 <vsniprintf>:
 8006124:	b507      	push	{r0, r1, r2, lr}
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	0013      	movs	r3, r2
 800612a:	000a      	movs	r2, r1
 800612c:	0001      	movs	r1, r0
 800612e:	4802      	ldr	r0, [pc, #8]	; (8006138 <vsniprintf+0x14>)
 8006130:	6800      	ldr	r0, [r0, #0]
 8006132:	f7ff ffcb 	bl	80060cc <_vsniprintf_r>
 8006136:	bd0e      	pop	{r1, r2, r3, pc}
 8006138:	20000034 	.word	0x20000034

0800613c <__malloc_lock>:
 800613c:	4770      	bx	lr

0800613e <__malloc_unlock>:
 800613e:	4770      	bx	lr

08006140 <__ssputs_r>:
 8006140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006142:	688e      	ldr	r6, [r1, #8]
 8006144:	b085      	sub	sp, #20
 8006146:	0007      	movs	r7, r0
 8006148:	000c      	movs	r4, r1
 800614a:	9203      	str	r2, [sp, #12]
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	429e      	cmp	r6, r3
 8006150:	d83c      	bhi.n	80061cc <__ssputs_r+0x8c>
 8006152:	2390      	movs	r3, #144	; 0x90
 8006154:	898a      	ldrh	r2, [r1, #12]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	421a      	tst	r2, r3
 800615a:	d034      	beq.n	80061c6 <__ssputs_r+0x86>
 800615c:	2503      	movs	r5, #3
 800615e:	6909      	ldr	r1, [r1, #16]
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	1a5b      	subs	r3, r3, r1
 8006164:	9302      	str	r3, [sp, #8]
 8006166:	6963      	ldr	r3, [r4, #20]
 8006168:	9802      	ldr	r0, [sp, #8]
 800616a:	435d      	muls	r5, r3
 800616c:	0feb      	lsrs	r3, r5, #31
 800616e:	195d      	adds	r5, r3, r5
 8006170:	9b01      	ldr	r3, [sp, #4]
 8006172:	106d      	asrs	r5, r5, #1
 8006174:	3301      	adds	r3, #1
 8006176:	181b      	adds	r3, r3, r0
 8006178:	42ab      	cmp	r3, r5
 800617a:	d900      	bls.n	800617e <__ssputs_r+0x3e>
 800617c:	001d      	movs	r5, r3
 800617e:	0553      	lsls	r3, r2, #21
 8006180:	d532      	bpl.n	80061e8 <__ssputs_r+0xa8>
 8006182:	0029      	movs	r1, r5
 8006184:	0038      	movs	r0, r7
 8006186:	f7ff fee7 	bl	8005f58 <_malloc_r>
 800618a:	1e06      	subs	r6, r0, #0
 800618c:	d109      	bne.n	80061a2 <__ssputs_r+0x62>
 800618e:	230c      	movs	r3, #12
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	2340      	movs	r3, #64	; 0x40
 8006194:	2001      	movs	r0, #1
 8006196:	89a2      	ldrh	r2, [r4, #12]
 8006198:	4240      	negs	r0, r0
 800619a:	4313      	orrs	r3, r2
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	b005      	add	sp, #20
 80061a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a2:	9a02      	ldr	r2, [sp, #8]
 80061a4:	6921      	ldr	r1, [r4, #16]
 80061a6:	f7ff fe68 	bl	8005e7a <memcpy>
 80061aa:	89a3      	ldrh	r3, [r4, #12]
 80061ac:	4a14      	ldr	r2, [pc, #80]	; (8006200 <__ssputs_r+0xc0>)
 80061ae:	401a      	ands	r2, r3
 80061b0:	2380      	movs	r3, #128	; 0x80
 80061b2:	4313      	orrs	r3, r2
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	9b02      	ldr	r3, [sp, #8]
 80061b8:	6126      	str	r6, [r4, #16]
 80061ba:	18f6      	adds	r6, r6, r3
 80061bc:	6026      	str	r6, [r4, #0]
 80061be:	6165      	str	r5, [r4, #20]
 80061c0:	9e01      	ldr	r6, [sp, #4]
 80061c2:	1aed      	subs	r5, r5, r3
 80061c4:	60a5      	str	r5, [r4, #8]
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	429e      	cmp	r6, r3
 80061ca:	d900      	bls.n	80061ce <__ssputs_r+0x8e>
 80061cc:	9e01      	ldr	r6, [sp, #4]
 80061ce:	0032      	movs	r2, r6
 80061d0:	9903      	ldr	r1, [sp, #12]
 80061d2:	6820      	ldr	r0, [r4, #0]
 80061d4:	f7ff fe5a 	bl	8005e8c <memmove>
 80061d8:	68a3      	ldr	r3, [r4, #8]
 80061da:	2000      	movs	r0, #0
 80061dc:	1b9b      	subs	r3, r3, r6
 80061de:	60a3      	str	r3, [r4, #8]
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	199e      	adds	r6, r3, r6
 80061e4:	6026      	str	r6, [r4, #0]
 80061e6:	e7da      	b.n	800619e <__ssputs_r+0x5e>
 80061e8:	002a      	movs	r2, r5
 80061ea:	0038      	movs	r0, r7
 80061ec:	f000 fa7e 	bl	80066ec <_realloc_r>
 80061f0:	1e06      	subs	r6, r0, #0
 80061f2:	d1e0      	bne.n	80061b6 <__ssputs_r+0x76>
 80061f4:	6921      	ldr	r1, [r4, #16]
 80061f6:	0038      	movs	r0, r7
 80061f8:	f7ff fe64 	bl	8005ec4 <_free_r>
 80061fc:	e7c7      	b.n	800618e <__ssputs_r+0x4e>
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	fffffb7f 	.word	0xfffffb7f

08006204 <_svfiprintf_r>:
 8006204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006206:	b0a1      	sub	sp, #132	; 0x84
 8006208:	9003      	str	r0, [sp, #12]
 800620a:	001d      	movs	r5, r3
 800620c:	898b      	ldrh	r3, [r1, #12]
 800620e:	000f      	movs	r7, r1
 8006210:	0016      	movs	r6, r2
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	d511      	bpl.n	800623a <_svfiprintf_r+0x36>
 8006216:	690b      	ldr	r3, [r1, #16]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10e      	bne.n	800623a <_svfiprintf_r+0x36>
 800621c:	2140      	movs	r1, #64	; 0x40
 800621e:	f7ff fe9b 	bl	8005f58 <_malloc_r>
 8006222:	6038      	str	r0, [r7, #0]
 8006224:	6138      	str	r0, [r7, #16]
 8006226:	2800      	cmp	r0, #0
 8006228:	d105      	bne.n	8006236 <_svfiprintf_r+0x32>
 800622a:	230c      	movs	r3, #12
 800622c:	9a03      	ldr	r2, [sp, #12]
 800622e:	3801      	subs	r0, #1
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	b021      	add	sp, #132	; 0x84
 8006234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006236:	2340      	movs	r3, #64	; 0x40
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	2300      	movs	r3, #0
 800623c:	ac08      	add	r4, sp, #32
 800623e:	6163      	str	r3, [r4, #20]
 8006240:	3320      	adds	r3, #32
 8006242:	7663      	strb	r3, [r4, #25]
 8006244:	3310      	adds	r3, #16
 8006246:	76a3      	strb	r3, [r4, #26]
 8006248:	9507      	str	r5, [sp, #28]
 800624a:	0035      	movs	r5, r6
 800624c:	782b      	ldrb	r3, [r5, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <_svfiprintf_r+0x52>
 8006252:	2b25      	cmp	r3, #37	; 0x25
 8006254:	d146      	bne.n	80062e4 <_svfiprintf_r+0xe0>
 8006256:	1bab      	subs	r3, r5, r6
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	d00c      	beq.n	8006276 <_svfiprintf_r+0x72>
 800625c:	0032      	movs	r2, r6
 800625e:	0039      	movs	r1, r7
 8006260:	9803      	ldr	r0, [sp, #12]
 8006262:	f7ff ff6d 	bl	8006140 <__ssputs_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d100      	bne.n	800626c <_svfiprintf_r+0x68>
 800626a:	e0ae      	b.n	80063ca <_svfiprintf_r+0x1c6>
 800626c:	6962      	ldr	r2, [r4, #20]
 800626e:	9b05      	ldr	r3, [sp, #20]
 8006270:	4694      	mov	ip, r2
 8006272:	4463      	add	r3, ip
 8006274:	6163      	str	r3, [r4, #20]
 8006276:	782b      	ldrb	r3, [r5, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d100      	bne.n	800627e <_svfiprintf_r+0x7a>
 800627c:	e0a5      	b.n	80063ca <_svfiprintf_r+0x1c6>
 800627e:	2201      	movs	r2, #1
 8006280:	2300      	movs	r3, #0
 8006282:	4252      	negs	r2, r2
 8006284:	6062      	str	r2, [r4, #4]
 8006286:	a904      	add	r1, sp, #16
 8006288:	3254      	adds	r2, #84	; 0x54
 800628a:	1852      	adds	r2, r2, r1
 800628c:	1c6e      	adds	r6, r5, #1
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	60e3      	str	r3, [r4, #12]
 8006292:	60a3      	str	r3, [r4, #8]
 8006294:	7013      	strb	r3, [r2, #0]
 8006296:	65a3      	str	r3, [r4, #88]	; 0x58
 8006298:	7831      	ldrb	r1, [r6, #0]
 800629a:	2205      	movs	r2, #5
 800629c:	4853      	ldr	r0, [pc, #332]	; (80063ec <_svfiprintf_r+0x1e8>)
 800629e:	f7ff fde1 	bl	8005e64 <memchr>
 80062a2:	1c75      	adds	r5, r6, #1
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d11f      	bne.n	80062e8 <_svfiprintf_r+0xe4>
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	06d3      	lsls	r3, r2, #27
 80062ac:	d504      	bpl.n	80062b8 <_svfiprintf_r+0xb4>
 80062ae:	2353      	movs	r3, #83	; 0x53
 80062b0:	a904      	add	r1, sp, #16
 80062b2:	185b      	adds	r3, r3, r1
 80062b4:	2120      	movs	r1, #32
 80062b6:	7019      	strb	r1, [r3, #0]
 80062b8:	0713      	lsls	r3, r2, #28
 80062ba:	d504      	bpl.n	80062c6 <_svfiprintf_r+0xc2>
 80062bc:	2353      	movs	r3, #83	; 0x53
 80062be:	a904      	add	r1, sp, #16
 80062c0:	185b      	adds	r3, r3, r1
 80062c2:	212b      	movs	r1, #43	; 0x2b
 80062c4:	7019      	strb	r1, [r3, #0]
 80062c6:	7833      	ldrb	r3, [r6, #0]
 80062c8:	2b2a      	cmp	r3, #42	; 0x2a
 80062ca:	d016      	beq.n	80062fa <_svfiprintf_r+0xf6>
 80062cc:	0035      	movs	r5, r6
 80062ce:	2100      	movs	r1, #0
 80062d0:	200a      	movs	r0, #10
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	782a      	ldrb	r2, [r5, #0]
 80062d6:	1c6e      	adds	r6, r5, #1
 80062d8:	3a30      	subs	r2, #48	; 0x30
 80062da:	2a09      	cmp	r2, #9
 80062dc:	d94e      	bls.n	800637c <_svfiprintf_r+0x178>
 80062de:	2900      	cmp	r1, #0
 80062e0:	d018      	beq.n	8006314 <_svfiprintf_r+0x110>
 80062e2:	e010      	b.n	8006306 <_svfiprintf_r+0x102>
 80062e4:	3501      	adds	r5, #1
 80062e6:	e7b1      	b.n	800624c <_svfiprintf_r+0x48>
 80062e8:	4b40      	ldr	r3, [pc, #256]	; (80063ec <_svfiprintf_r+0x1e8>)
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	1ac0      	subs	r0, r0, r3
 80062ee:	2301      	movs	r3, #1
 80062f0:	4083      	lsls	r3, r0
 80062f2:	4313      	orrs	r3, r2
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	002e      	movs	r6, r5
 80062f8:	e7ce      	b.n	8006298 <_svfiprintf_r+0x94>
 80062fa:	9b07      	ldr	r3, [sp, #28]
 80062fc:	1d19      	adds	r1, r3, #4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	9107      	str	r1, [sp, #28]
 8006302:	2b00      	cmp	r3, #0
 8006304:	db01      	blt.n	800630a <_svfiprintf_r+0x106>
 8006306:	930b      	str	r3, [sp, #44]	; 0x2c
 8006308:	e004      	b.n	8006314 <_svfiprintf_r+0x110>
 800630a:	425b      	negs	r3, r3
 800630c:	60e3      	str	r3, [r4, #12]
 800630e:	2302      	movs	r3, #2
 8006310:	4313      	orrs	r3, r2
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	782b      	ldrb	r3, [r5, #0]
 8006316:	2b2e      	cmp	r3, #46	; 0x2e
 8006318:	d10a      	bne.n	8006330 <_svfiprintf_r+0x12c>
 800631a:	786b      	ldrb	r3, [r5, #1]
 800631c:	2b2a      	cmp	r3, #42	; 0x2a
 800631e:	d135      	bne.n	800638c <_svfiprintf_r+0x188>
 8006320:	9b07      	ldr	r3, [sp, #28]
 8006322:	3502      	adds	r5, #2
 8006324:	1d1a      	adds	r2, r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	9207      	str	r2, [sp, #28]
 800632a:	2b00      	cmp	r3, #0
 800632c:	db2b      	blt.n	8006386 <_svfiprintf_r+0x182>
 800632e:	9309      	str	r3, [sp, #36]	; 0x24
 8006330:	4e2f      	ldr	r6, [pc, #188]	; (80063f0 <_svfiprintf_r+0x1ec>)
 8006332:	7829      	ldrb	r1, [r5, #0]
 8006334:	2203      	movs	r2, #3
 8006336:	0030      	movs	r0, r6
 8006338:	f7ff fd94 	bl	8005e64 <memchr>
 800633c:	2800      	cmp	r0, #0
 800633e:	d006      	beq.n	800634e <_svfiprintf_r+0x14a>
 8006340:	2340      	movs	r3, #64	; 0x40
 8006342:	1b80      	subs	r0, r0, r6
 8006344:	4083      	lsls	r3, r0
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	3501      	adds	r5, #1
 800634a:	4313      	orrs	r3, r2
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	7829      	ldrb	r1, [r5, #0]
 8006350:	2206      	movs	r2, #6
 8006352:	4828      	ldr	r0, [pc, #160]	; (80063f4 <_svfiprintf_r+0x1f0>)
 8006354:	1c6e      	adds	r6, r5, #1
 8006356:	7621      	strb	r1, [r4, #24]
 8006358:	f7ff fd84 	bl	8005e64 <memchr>
 800635c:	2800      	cmp	r0, #0
 800635e:	d03c      	beq.n	80063da <_svfiprintf_r+0x1d6>
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <_svfiprintf_r+0x1f4>)
 8006362:	2b00      	cmp	r3, #0
 8006364:	d125      	bne.n	80063b2 <_svfiprintf_r+0x1ae>
 8006366:	2207      	movs	r2, #7
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	3307      	adds	r3, #7
 800636c:	4393      	bics	r3, r2
 800636e:	3308      	adds	r3, #8
 8006370:	9307      	str	r3, [sp, #28]
 8006372:	6963      	ldr	r3, [r4, #20]
 8006374:	9a04      	ldr	r2, [sp, #16]
 8006376:	189b      	adds	r3, r3, r2
 8006378:	6163      	str	r3, [r4, #20]
 800637a:	e766      	b.n	800624a <_svfiprintf_r+0x46>
 800637c:	4343      	muls	r3, r0
 800637e:	2101      	movs	r1, #1
 8006380:	189b      	adds	r3, r3, r2
 8006382:	0035      	movs	r5, r6
 8006384:	e7a6      	b.n	80062d4 <_svfiprintf_r+0xd0>
 8006386:	2301      	movs	r3, #1
 8006388:	425b      	negs	r3, r3
 800638a:	e7d0      	b.n	800632e <_svfiprintf_r+0x12a>
 800638c:	2300      	movs	r3, #0
 800638e:	200a      	movs	r0, #10
 8006390:	001a      	movs	r2, r3
 8006392:	3501      	adds	r5, #1
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	7829      	ldrb	r1, [r5, #0]
 8006398:	1c6e      	adds	r6, r5, #1
 800639a:	3930      	subs	r1, #48	; 0x30
 800639c:	2909      	cmp	r1, #9
 800639e:	d903      	bls.n	80063a8 <_svfiprintf_r+0x1a4>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0c5      	beq.n	8006330 <_svfiprintf_r+0x12c>
 80063a4:	9209      	str	r2, [sp, #36]	; 0x24
 80063a6:	e7c3      	b.n	8006330 <_svfiprintf_r+0x12c>
 80063a8:	4342      	muls	r2, r0
 80063aa:	2301      	movs	r3, #1
 80063ac:	1852      	adds	r2, r2, r1
 80063ae:	0035      	movs	r5, r6
 80063b0:	e7f1      	b.n	8006396 <_svfiprintf_r+0x192>
 80063b2:	ab07      	add	r3, sp, #28
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	003a      	movs	r2, r7
 80063b8:	4b10      	ldr	r3, [pc, #64]	; (80063fc <_svfiprintf_r+0x1f8>)
 80063ba:	0021      	movs	r1, r4
 80063bc:	9803      	ldr	r0, [sp, #12]
 80063be:	e000      	b.n	80063c2 <_svfiprintf_r+0x1be>
 80063c0:	bf00      	nop
 80063c2:	9004      	str	r0, [sp, #16]
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	3301      	adds	r3, #1
 80063c8:	d1d3      	bne.n	8006372 <_svfiprintf_r+0x16e>
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80063ce:	065b      	lsls	r3, r3, #25
 80063d0:	d400      	bmi.n	80063d4 <_svfiprintf_r+0x1d0>
 80063d2:	e72e      	b.n	8006232 <_svfiprintf_r+0x2e>
 80063d4:	2001      	movs	r0, #1
 80063d6:	4240      	negs	r0, r0
 80063d8:	e72b      	b.n	8006232 <_svfiprintf_r+0x2e>
 80063da:	ab07      	add	r3, sp, #28
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	003a      	movs	r2, r7
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <_svfiprintf_r+0x1f8>)
 80063e2:	0021      	movs	r1, r4
 80063e4:	9803      	ldr	r0, [sp, #12]
 80063e6:	f000 f879 	bl	80064dc <_printf_i>
 80063ea:	e7ea      	b.n	80063c2 <_svfiprintf_r+0x1be>
 80063ec:	080069a6 	.word	0x080069a6
 80063f0:	080069ac 	.word	0x080069ac
 80063f4:	080069b0 	.word	0x080069b0
 80063f8:	00000000 	.word	0x00000000
 80063fc:	08006141 	.word	0x08006141

08006400 <_printf_common>:
 8006400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006402:	0015      	movs	r5, r2
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	688a      	ldr	r2, [r1, #8]
 8006408:	690b      	ldr	r3, [r1, #16]
 800640a:	9000      	str	r0, [sp, #0]
 800640c:	000c      	movs	r4, r1
 800640e:	4293      	cmp	r3, r2
 8006410:	da00      	bge.n	8006414 <_printf_common+0x14>
 8006412:	0013      	movs	r3, r2
 8006414:	0022      	movs	r2, r4
 8006416:	602b      	str	r3, [r5, #0]
 8006418:	3243      	adds	r2, #67	; 0x43
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	2a00      	cmp	r2, #0
 800641e:	d001      	beq.n	8006424 <_printf_common+0x24>
 8006420:	3301      	adds	r3, #1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	069b      	lsls	r3, r3, #26
 8006428:	d502      	bpl.n	8006430 <_printf_common+0x30>
 800642a:	682b      	ldr	r3, [r5, #0]
 800642c:	3302      	adds	r3, #2
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	2706      	movs	r7, #6
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	401f      	ands	r7, r3
 8006436:	d027      	beq.n	8006488 <_printf_common+0x88>
 8006438:	0023      	movs	r3, r4
 800643a:	3343      	adds	r3, #67	; 0x43
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	4193      	sbcs	r3, r2
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d430      	bmi.n	80064aa <_printf_common+0xaa>
 8006448:	0022      	movs	r2, r4
 800644a:	9901      	ldr	r1, [sp, #4]
 800644c:	3243      	adds	r2, #67	; 0x43
 800644e:	9800      	ldr	r0, [sp, #0]
 8006450:	9e08      	ldr	r6, [sp, #32]
 8006452:	47b0      	blx	r6
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d025      	beq.n	80064a4 <_printf_common+0xa4>
 8006458:	2306      	movs	r3, #6
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	682a      	ldr	r2, [r5, #0]
 800645e:	68e1      	ldr	r1, [r4, #12]
 8006460:	4003      	ands	r3, r0
 8006462:	2500      	movs	r5, #0
 8006464:	2b04      	cmp	r3, #4
 8006466:	d103      	bne.n	8006470 <_printf_common+0x70>
 8006468:	1a8d      	subs	r5, r1, r2
 800646a:	43eb      	mvns	r3, r5
 800646c:	17db      	asrs	r3, r3, #31
 800646e:	401d      	ands	r5, r3
 8006470:	68a3      	ldr	r3, [r4, #8]
 8006472:	6922      	ldr	r2, [r4, #16]
 8006474:	4293      	cmp	r3, r2
 8006476:	dd01      	ble.n	800647c <_printf_common+0x7c>
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	18ed      	adds	r5, r5, r3
 800647c:	2700      	movs	r7, #0
 800647e:	42bd      	cmp	r5, r7
 8006480:	d120      	bne.n	80064c4 <_printf_common+0xc4>
 8006482:	2000      	movs	r0, #0
 8006484:	e010      	b.n	80064a8 <_printf_common+0xa8>
 8006486:	3701      	adds	r7, #1
 8006488:	68e3      	ldr	r3, [r4, #12]
 800648a:	682a      	ldr	r2, [r5, #0]
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	42bb      	cmp	r3, r7
 8006490:	ddd2      	ble.n	8006438 <_printf_common+0x38>
 8006492:	0022      	movs	r2, r4
 8006494:	2301      	movs	r3, #1
 8006496:	3219      	adds	r2, #25
 8006498:	9901      	ldr	r1, [sp, #4]
 800649a:	9800      	ldr	r0, [sp, #0]
 800649c:	9e08      	ldr	r6, [sp, #32]
 800649e:	47b0      	blx	r6
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d1f0      	bne.n	8006486 <_printf_common+0x86>
 80064a4:	2001      	movs	r0, #1
 80064a6:	4240      	negs	r0, r0
 80064a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064aa:	2030      	movs	r0, #48	; 0x30
 80064ac:	18e1      	adds	r1, r4, r3
 80064ae:	3143      	adds	r1, #67	; 0x43
 80064b0:	7008      	strb	r0, [r1, #0]
 80064b2:	0021      	movs	r1, r4
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	3145      	adds	r1, #69	; 0x45
 80064b8:	7809      	ldrb	r1, [r1, #0]
 80064ba:	18a2      	adds	r2, r4, r2
 80064bc:	3243      	adds	r2, #67	; 0x43
 80064be:	3302      	adds	r3, #2
 80064c0:	7011      	strb	r1, [r2, #0]
 80064c2:	e7c1      	b.n	8006448 <_printf_common+0x48>
 80064c4:	0022      	movs	r2, r4
 80064c6:	2301      	movs	r3, #1
 80064c8:	321a      	adds	r2, #26
 80064ca:	9901      	ldr	r1, [sp, #4]
 80064cc:	9800      	ldr	r0, [sp, #0]
 80064ce:	9e08      	ldr	r6, [sp, #32]
 80064d0:	47b0      	blx	r6
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	d0e6      	beq.n	80064a4 <_printf_common+0xa4>
 80064d6:	3701      	adds	r7, #1
 80064d8:	e7d1      	b.n	800647e <_printf_common+0x7e>
	...

080064dc <_printf_i>:
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	9204      	str	r2, [sp, #16]
 80064e2:	000a      	movs	r2, r1
 80064e4:	3243      	adds	r2, #67	; 0x43
 80064e6:	9305      	str	r3, [sp, #20]
 80064e8:	9003      	str	r0, [sp, #12]
 80064ea:	9202      	str	r2, [sp, #8]
 80064ec:	7e0a      	ldrb	r2, [r1, #24]
 80064ee:	000c      	movs	r4, r1
 80064f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f2:	2a6e      	cmp	r2, #110	; 0x6e
 80064f4:	d100      	bne.n	80064f8 <_printf_i+0x1c>
 80064f6:	e086      	b.n	8006606 <_printf_i+0x12a>
 80064f8:	d81f      	bhi.n	800653a <_printf_i+0x5e>
 80064fa:	2a63      	cmp	r2, #99	; 0x63
 80064fc:	d033      	beq.n	8006566 <_printf_i+0x8a>
 80064fe:	d808      	bhi.n	8006512 <_printf_i+0x36>
 8006500:	2a00      	cmp	r2, #0
 8006502:	d100      	bne.n	8006506 <_printf_i+0x2a>
 8006504:	e08c      	b.n	8006620 <_printf_i+0x144>
 8006506:	2a58      	cmp	r2, #88	; 0x58
 8006508:	d04d      	beq.n	80065a6 <_printf_i+0xca>
 800650a:	0025      	movs	r5, r4
 800650c:	3542      	adds	r5, #66	; 0x42
 800650e:	702a      	strb	r2, [r5, #0]
 8006510:	e030      	b.n	8006574 <_printf_i+0x98>
 8006512:	2a64      	cmp	r2, #100	; 0x64
 8006514:	d001      	beq.n	800651a <_printf_i+0x3e>
 8006516:	2a69      	cmp	r2, #105	; 0x69
 8006518:	d1f7      	bne.n	800650a <_printf_i+0x2e>
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	6825      	ldr	r5, [r4, #0]
 800651e:	1d0a      	adds	r2, r1, #4
 8006520:	0628      	lsls	r0, r5, #24
 8006522:	d529      	bpl.n	8006578 <_printf_i+0x9c>
 8006524:	6808      	ldr	r0, [r1, #0]
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	2800      	cmp	r0, #0
 800652a:	da03      	bge.n	8006534 <_printf_i+0x58>
 800652c:	232d      	movs	r3, #45	; 0x2d
 800652e:	9a02      	ldr	r2, [sp, #8]
 8006530:	4240      	negs	r0, r0
 8006532:	7013      	strb	r3, [r2, #0]
 8006534:	4e6b      	ldr	r6, [pc, #428]	; (80066e4 <_printf_i+0x208>)
 8006536:	270a      	movs	r7, #10
 8006538:	e04f      	b.n	80065da <_printf_i+0xfe>
 800653a:	2a73      	cmp	r2, #115	; 0x73
 800653c:	d074      	beq.n	8006628 <_printf_i+0x14c>
 800653e:	d808      	bhi.n	8006552 <_printf_i+0x76>
 8006540:	2a6f      	cmp	r2, #111	; 0x6f
 8006542:	d01f      	beq.n	8006584 <_printf_i+0xa8>
 8006544:	2a70      	cmp	r2, #112	; 0x70
 8006546:	d1e0      	bne.n	800650a <_printf_i+0x2e>
 8006548:	2220      	movs	r2, #32
 800654a:	6809      	ldr	r1, [r1, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	6022      	str	r2, [r4, #0]
 8006550:	e003      	b.n	800655a <_printf_i+0x7e>
 8006552:	2a75      	cmp	r2, #117	; 0x75
 8006554:	d016      	beq.n	8006584 <_printf_i+0xa8>
 8006556:	2a78      	cmp	r2, #120	; 0x78
 8006558:	d1d7      	bne.n	800650a <_printf_i+0x2e>
 800655a:	0022      	movs	r2, r4
 800655c:	2178      	movs	r1, #120	; 0x78
 800655e:	3245      	adds	r2, #69	; 0x45
 8006560:	7011      	strb	r1, [r2, #0]
 8006562:	4e61      	ldr	r6, [pc, #388]	; (80066e8 <_printf_i+0x20c>)
 8006564:	e022      	b.n	80065ac <_printf_i+0xd0>
 8006566:	0025      	movs	r5, r4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	3542      	adds	r5, #66	; 0x42
 800656c:	1d11      	adds	r1, r2, #4
 800656e:	6019      	str	r1, [r3, #0]
 8006570:	6813      	ldr	r3, [r2, #0]
 8006572:	702b      	strb	r3, [r5, #0]
 8006574:	2301      	movs	r3, #1
 8006576:	e065      	b.n	8006644 <_printf_i+0x168>
 8006578:	6808      	ldr	r0, [r1, #0]
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	0669      	lsls	r1, r5, #25
 800657e:	d5d3      	bpl.n	8006528 <_printf_i+0x4c>
 8006580:	b200      	sxth	r0, r0
 8006582:	e7d1      	b.n	8006528 <_printf_i+0x4c>
 8006584:	6819      	ldr	r1, [r3, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	1d08      	adds	r0, r1, #4
 800658a:	6018      	str	r0, [r3, #0]
 800658c:	6808      	ldr	r0, [r1, #0]
 800658e:	062e      	lsls	r6, r5, #24
 8006590:	d505      	bpl.n	800659e <_printf_i+0xc2>
 8006592:	4e54      	ldr	r6, [pc, #336]	; (80066e4 <_printf_i+0x208>)
 8006594:	2708      	movs	r7, #8
 8006596:	2a6f      	cmp	r2, #111	; 0x6f
 8006598:	d01b      	beq.n	80065d2 <_printf_i+0xf6>
 800659a:	270a      	movs	r7, #10
 800659c:	e019      	b.n	80065d2 <_printf_i+0xf6>
 800659e:	066d      	lsls	r5, r5, #25
 80065a0:	d5f7      	bpl.n	8006592 <_printf_i+0xb6>
 80065a2:	b280      	uxth	r0, r0
 80065a4:	e7f5      	b.n	8006592 <_printf_i+0xb6>
 80065a6:	3145      	adds	r1, #69	; 0x45
 80065a8:	4e4e      	ldr	r6, [pc, #312]	; (80066e4 <_printf_i+0x208>)
 80065aa:	700a      	strb	r2, [r1, #0]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	1d01      	adds	r1, r0, #4
 80065b2:	6800      	ldr	r0, [r0, #0]
 80065b4:	6019      	str	r1, [r3, #0]
 80065b6:	0615      	lsls	r5, r2, #24
 80065b8:	d521      	bpl.n	80065fe <_printf_i+0x122>
 80065ba:	07d3      	lsls	r3, r2, #31
 80065bc:	d502      	bpl.n	80065c4 <_printf_i+0xe8>
 80065be:	2320      	movs	r3, #32
 80065c0:	431a      	orrs	r2, r3
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	2710      	movs	r7, #16
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d103      	bne.n	80065d2 <_printf_i+0xf6>
 80065ca:	2320      	movs	r3, #32
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	439a      	bics	r2, r3
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	0023      	movs	r3, r4
 80065d4:	2200      	movs	r2, #0
 80065d6:	3343      	adds	r3, #67	; 0x43
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	6863      	ldr	r3, [r4, #4]
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	db58      	blt.n	8006694 <_printf_i+0x1b8>
 80065e2:	2204      	movs	r2, #4
 80065e4:	6821      	ldr	r1, [r4, #0]
 80065e6:	4391      	bics	r1, r2
 80065e8:	6021      	str	r1, [r4, #0]
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d154      	bne.n	8006698 <_printf_i+0x1bc>
 80065ee:	9d02      	ldr	r5, [sp, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d05a      	beq.n	80066aa <_printf_i+0x1ce>
 80065f4:	0025      	movs	r5, r4
 80065f6:	7833      	ldrb	r3, [r6, #0]
 80065f8:	3542      	adds	r5, #66	; 0x42
 80065fa:	702b      	strb	r3, [r5, #0]
 80065fc:	e055      	b.n	80066aa <_printf_i+0x1ce>
 80065fe:	0655      	lsls	r5, r2, #25
 8006600:	d5db      	bpl.n	80065ba <_printf_i+0xde>
 8006602:	b280      	uxth	r0, r0
 8006604:	e7d9      	b.n	80065ba <_printf_i+0xde>
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	680d      	ldr	r5, [r1, #0]
 800660a:	1d10      	adds	r0, r2, #4
 800660c:	6949      	ldr	r1, [r1, #20]
 800660e:	6018      	str	r0, [r3, #0]
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	062e      	lsls	r6, r5, #24
 8006614:	d501      	bpl.n	800661a <_printf_i+0x13e>
 8006616:	6019      	str	r1, [r3, #0]
 8006618:	e002      	b.n	8006620 <_printf_i+0x144>
 800661a:	066d      	lsls	r5, r5, #25
 800661c:	d5fb      	bpl.n	8006616 <_printf_i+0x13a>
 800661e:	8019      	strh	r1, [r3, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	9d02      	ldr	r5, [sp, #8]
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	e04f      	b.n	80066c8 <_printf_i+0x1ec>
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	1d11      	adds	r1, r2, #4
 800662c:	6019      	str	r1, [r3, #0]
 800662e:	6815      	ldr	r5, [r2, #0]
 8006630:	2100      	movs	r1, #0
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	0028      	movs	r0, r5
 8006636:	f7ff fc15 	bl	8005e64 <memchr>
 800663a:	2800      	cmp	r0, #0
 800663c:	d001      	beq.n	8006642 <_printf_i+0x166>
 800663e:	1b40      	subs	r0, r0, r5
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	9a02      	ldr	r2, [sp, #8]
 800664a:	7013      	strb	r3, [r2, #0]
 800664c:	e03c      	b.n	80066c8 <_printf_i+0x1ec>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	002a      	movs	r2, r5
 8006652:	9904      	ldr	r1, [sp, #16]
 8006654:	9803      	ldr	r0, [sp, #12]
 8006656:	9d05      	ldr	r5, [sp, #20]
 8006658:	47a8      	blx	r5
 800665a:	1c43      	adds	r3, r0, #1
 800665c:	d03e      	beq.n	80066dc <_printf_i+0x200>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	079b      	lsls	r3, r3, #30
 8006662:	d415      	bmi.n	8006690 <_printf_i+0x1b4>
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	68e0      	ldr	r0, [r4, #12]
 8006668:	4298      	cmp	r0, r3
 800666a:	da39      	bge.n	80066e0 <_printf_i+0x204>
 800666c:	0018      	movs	r0, r3
 800666e:	e037      	b.n	80066e0 <_printf_i+0x204>
 8006670:	0022      	movs	r2, r4
 8006672:	2301      	movs	r3, #1
 8006674:	3219      	adds	r2, #25
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	9803      	ldr	r0, [sp, #12]
 800667a:	9e05      	ldr	r6, [sp, #20]
 800667c:	47b0      	blx	r6
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d02c      	beq.n	80066dc <_printf_i+0x200>
 8006682:	3501      	adds	r5, #1
 8006684:	68e3      	ldr	r3, [r4, #12]
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	1a9b      	subs	r3, r3, r2
 800668a:	42ab      	cmp	r3, r5
 800668c:	dcf0      	bgt.n	8006670 <_printf_i+0x194>
 800668e:	e7e9      	b.n	8006664 <_printf_i+0x188>
 8006690:	2500      	movs	r5, #0
 8006692:	e7f7      	b.n	8006684 <_printf_i+0x1a8>
 8006694:	2800      	cmp	r0, #0
 8006696:	d0ad      	beq.n	80065f4 <_printf_i+0x118>
 8006698:	9d02      	ldr	r5, [sp, #8]
 800669a:	0039      	movs	r1, r7
 800669c:	f7f9 fdc2 	bl	8000224 <__aeabi_uidivmod>
 80066a0:	5c73      	ldrb	r3, [r6, r1]
 80066a2:	3d01      	subs	r5, #1
 80066a4:	702b      	strb	r3, [r5, #0]
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d1f7      	bne.n	800669a <_printf_i+0x1be>
 80066aa:	2f08      	cmp	r7, #8
 80066ac:	d109      	bne.n	80066c2 <_printf_i+0x1e6>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	07db      	lsls	r3, r3, #31
 80066b2:	d506      	bpl.n	80066c2 <_printf_i+0x1e6>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	6922      	ldr	r2, [r4, #16]
 80066b8:	4293      	cmp	r3, r2
 80066ba:	dc02      	bgt.n	80066c2 <_printf_i+0x1e6>
 80066bc:	2330      	movs	r3, #48	; 0x30
 80066be:	3d01      	subs	r5, #1
 80066c0:	702b      	strb	r3, [r5, #0]
 80066c2:	9b02      	ldr	r3, [sp, #8]
 80066c4:	1b5b      	subs	r3, r3, r5
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	9b05      	ldr	r3, [sp, #20]
 80066ca:	aa07      	add	r2, sp, #28
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	0021      	movs	r1, r4
 80066d0:	9b04      	ldr	r3, [sp, #16]
 80066d2:	9803      	ldr	r0, [sp, #12]
 80066d4:	f7ff fe94 	bl	8006400 <_printf_common>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d1b8      	bne.n	800664e <_printf_i+0x172>
 80066dc:	2001      	movs	r0, #1
 80066de:	4240      	negs	r0, r0
 80066e0:	b009      	add	sp, #36	; 0x24
 80066e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e4:	080069b7 	.word	0x080069b7
 80066e8:	080069c8 	.word	0x080069c8

080066ec <_realloc_r>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	0007      	movs	r7, r0
 80066f0:	000d      	movs	r5, r1
 80066f2:	0016      	movs	r6, r2
 80066f4:	2900      	cmp	r1, #0
 80066f6:	d105      	bne.n	8006704 <_realloc_r+0x18>
 80066f8:	0011      	movs	r1, r2
 80066fa:	f7ff fc2d 	bl	8005f58 <_malloc_r>
 80066fe:	0004      	movs	r4, r0
 8006700:	0020      	movs	r0, r4
 8006702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006704:	2a00      	cmp	r2, #0
 8006706:	d103      	bne.n	8006710 <_realloc_r+0x24>
 8006708:	f7ff fbdc 	bl	8005ec4 <_free_r>
 800670c:	0034      	movs	r4, r6
 800670e:	e7f7      	b.n	8006700 <_realloc_r+0x14>
 8006710:	f000 f812 	bl	8006738 <_malloc_usable_size_r>
 8006714:	002c      	movs	r4, r5
 8006716:	42b0      	cmp	r0, r6
 8006718:	d2f2      	bcs.n	8006700 <_realloc_r+0x14>
 800671a:	0031      	movs	r1, r6
 800671c:	0038      	movs	r0, r7
 800671e:	f7ff fc1b 	bl	8005f58 <_malloc_r>
 8006722:	1e04      	subs	r4, r0, #0
 8006724:	d0ec      	beq.n	8006700 <_realloc_r+0x14>
 8006726:	0029      	movs	r1, r5
 8006728:	0032      	movs	r2, r6
 800672a:	f7ff fba6 	bl	8005e7a <memcpy>
 800672e:	0029      	movs	r1, r5
 8006730:	0038      	movs	r0, r7
 8006732:	f7ff fbc7 	bl	8005ec4 <_free_r>
 8006736:	e7e3      	b.n	8006700 <_realloc_r+0x14>

08006738 <_malloc_usable_size_r>:
 8006738:	1f0b      	subs	r3, r1, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	1f18      	subs	r0, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	da01      	bge.n	8006746 <_malloc_usable_size_r+0xe>
 8006742:	580b      	ldr	r3, [r1, r0]
 8006744:	18c0      	adds	r0, r0, r3
 8006746:	4770      	bx	lr

08006748 <_init>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674e:	bc08      	pop	{r3}
 8006750:	469e      	mov	lr, r3
 8006752:	4770      	bx	lr

08006754 <_fini>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr
